Index.PACKAGES = {"cats.effect.testkit" : [{"name" : "cats.effect.testkit.TestException", "shortDescription" : "", "members_case class" : [{"member" : "cats.effect.testkit.TestException#<init>", "error" : "unsupported entity"}, {"label" : "i", "tail" : ": Int", "member" : "cats.effect.testkit.TestException.i", "link" : "cats\/effect\/testkit\/TestException.html#i:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cats\/effect\/testkit\/TestException.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "cats\/effect\/testkit\/TestException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "cats\/effect\/testkit\/TestException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "cats\/effect\/testkit\/TestException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "cats\/effect\/testkit\/TestException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "cats\/effect\/testkit\/TestException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cats\/effect\/testkit\/TestException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cats\/effect\/testkit\/TestException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cats\/effect\/testkit\/TestException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "cats\/effect\/testkit\/TestException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "cats\/effect\/testkit\/TestException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "cats\/effect\/testkit\/TestException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "cats\/effect\/testkit\/TestException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "cats\/effect\/testkit\/TestException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/testkit\/TestException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/testkit\/TestException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/testkit\/TestException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/testkit\/TestException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/testkit\/TestException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/testkit\/TestException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/testkit\/TestException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/testkit\/TestException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/testkit\/TestException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/testkit\/TestException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/testkit\/TestException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/testkit\/TestException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/testkit\/TestException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/testkit\/TestException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/testkit\/TestException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/testkit\/TestException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cats\/effect\/testkit\/TestException.html", "kind" : "case class"}, {"name" : "cats.effect.testkit.TestInstances", "trait" : "cats\/effect\/testkit\/TestInstances.html", "kind" : "trait", "members_trait" : [{"label" : "Ticker", "tail" : "", "member" : "cats.effect.testkit.TestInstances.Ticker", "link" : "cats\/effect\/testkit\/TestInstances.html#TickerextendsProductwithSerializable", "kind" : "case class"}, {"label" : "scheduler", "tail" : "(ticker: Ticker): Scheduler", "member" : "cats.effect.testkit.TestInstances.scheduler", "link" : "cats\/effect\/testkit\/TestInstances.html#scheduler(implicitticker:TestInstances.this.Ticker):cats.effect.unsafe.Scheduler", "kind" : "def"}, {"label" : "materializeRuntime", "tail" : "(ticker: Ticker): IORuntime", "member" : "cats.effect.testkit.TestInstances.materializeRuntime", "link" : "cats\/effect\/testkit\/TestInstances.html#materializeRuntime(implicitticker:TestInstances.this.Ticker):cats.effect.unsafe.IORuntime", "kind" : "implicit def"}, {"label" : "unsafeRunSync", "tail" : "(ioa: SyncIO[A]): Outcome[Id, Throwable, A]", "member" : "cats.effect.testkit.TestInstances.unsafeRunSync", "link" : "cats\/effect\/testkit\/TestInstances.html#unsafeRunSync[A](ioa:cats.effect.SyncIO[A]):cats.effect.Outcome[cats.Id,Throwable,A]", "kind" : "def"}, {"label" : "unsafeRun", "tail" : "(ioa: IO[A])(ticker: Ticker): Outcome[Option, Throwable, A]", "member" : "cats.effect.testkit.TestInstances.unsafeRun", "link" : "cats\/effect\/testkit\/TestInstances.html#unsafeRun[A](ioa:cats.effect.IO[A])(implicitticker:TestInstances.this.Ticker):cats.effect.Outcome[Option,Throwable,A]", "kind" : "def"}, {"label" : "resourceFBooleanToProp", "tail" : "(r: Resource[F, Boolean])(view: (F[Boolean]) => Prop, F: MonadCancel[F, Throwable]): Prop", "member" : "cats.effect.testkit.TestInstances.resourceFBooleanToProp", "link" : "cats\/effect\/testkit\/TestInstances.html#resourceFBooleanToProp[F[_]](r:cats.effect.Resource[F,Boolean])(implicitview:F[Boolean]=>org.scalacheck.Prop,implicitF:cats.effect.MonadCancel[F,Throwable]):org.scalacheck.Prop", "kind" : "implicit def"}, {"label" : "syncIoBooleanToProp", "tail" : "(iob: SyncIO[Boolean]): Prop", "member" : "cats.effect.testkit.TestInstances.syncIoBooleanToProp", "link" : "cats\/effect\/testkit\/TestInstances.html#syncIoBooleanToProp(iob:cats.effect.SyncIO[Boolean]):org.scalacheck.Prop", "kind" : "implicit def"}, {"label" : "ioBooleanToProp", "tail" : "(iob: IO[Boolean])(ticker: Ticker): Prop", "member" : "cats.effect.testkit.TestInstances.ioBooleanToProp", "link" : "cats\/effect\/testkit\/TestInstances.html#ioBooleanToProp(iob:cats.effect.IO[Boolean])(implicitticker:TestInstances.this.Ticker):org.scalacheck.Prop", "kind" : "implicit def"}, {"label" : "eqSyncIOA", "tail" : "(arg0: Eq[A]): Eq[SyncIO[A]]", "member" : "cats.effect.testkit.TestInstances.eqSyncIOA", "link" : "cats\/effect\/testkit\/TestInstances.html#eqSyncIOA[A](implicitevidence$10:cats.Eq[A]):cats.Eq[cats.effect.SyncIO[A]]", "kind" : "implicit def"}, {"label" : "ordResourceFFD", "tail" : "(ordF: Order[F[FiniteDuration]], F: MonadCancel[F, Throwable]): Order[Resource[F, FiniteDuration]]", "member" : "cats.effect.testkit.TestInstances.ordResourceFFD", "link" : "cats\/effect\/testkit\/TestInstances.html#ordResourceFFD[F[_]](implicitordF:cats.Order[F[scala.concurrent.duration.FiniteDuration]],implicitF:cats.effect.MonadCancel[F,Throwable]):cats.Order[cats.effect.Resource[F,scala.concurrent.duration.FiniteDuration]]", "kind" : "implicit def"}, {"label" : "eqResource", "tail" : "(E: Eq[F[A]], F: MonadCancel[F, Throwable]): Eq[Resource[F, A]]", "member" : "cats.effect.testkit.TestInstances.eqResource", "link" : "cats\/effect\/testkit\/TestInstances.html#eqResource[F[_],A](implicitE:cats.Eq[F[A]],implicitF:cats.effect.MonadCancel[F,Throwable]):cats.Eq[cats.effect.Resource[F,A]]", "kind" : "implicit def"}, {"label" : "eqIOA", "tail" : "(arg0: Eq[A], ticker: Ticker): Eq[IO[A]]", "member" : "cats.effect.testkit.TestInstances.eqIOA", "link" : "cats\/effect\/testkit\/TestInstances.html#eqIOA[A](implicitevidence$9:cats.Eq[A],implicitticker:TestInstances.this.Ticker):cats.Eq[cats.effect.IO[A]]", "kind" : "implicit def"}, {"label" : "orderIoFiniteDuration", "tail" : "(ticker: Ticker): Order[IO[FiniteDuration]]", "member" : "cats.effect.testkit.TestInstances.orderIoFiniteDuration", "link" : "cats\/effect\/testkit\/TestInstances.html#orderIoFiniteDuration(implicitticker:TestInstances.this.Ticker):cats.Order[cats.effect.IO[scala.concurrent.duration.FiniteDuration]]", "kind" : "implicit def"}, {"label" : "eqExecutionContext", "tail" : ": Eq[ExecutionContext]", "member" : "cats.effect.testkit.TestInstances.eqExecutionContext", "link" : "cats\/effect\/testkit\/TestInstances.html#eqExecutionContext:cats.Eq[scala.concurrent.ExecutionContext]", "kind" : "implicit lazy val"}, {"label" : "showThrowable", "tail" : ": Show[Throwable]", "member" : "cats.effect.testkit.TestInstances.showThrowable", "link" : "cats\/effect\/testkit\/TestInstances.html#showThrowable:cats.Show[Throwable]", "kind" : "implicit lazy val"}, {"label" : "eqThrowable", "tail" : ": Eq[Throwable]", "member" : "cats.effect.testkit.TestInstances.eqThrowable", "link" : "cats\/effect\/testkit\/TestInstances.html#eqThrowable:cats.Eq[Throwable]", "kind" : "implicit lazy val"}, {"label" : "arbitraryExecutionContext", "tail" : "(ticker: Ticker): Arbitrary[ExecutionContext]", "member" : "cats.effect.testkit.TestInstances.arbitraryExecutionContext", "link" : "cats\/effect\/testkit\/TestInstances.html#arbitraryExecutionContext(implicitticker:TestInstances.this.Ticker):org.scalacheck.Arbitrary[scala.concurrent.ExecutionContext]", "kind" : "implicit def"}, {"label" : "arbitraryThrowable", "tail" : ": Arbitrary[Throwable]", "member" : "cats.effect.testkit.TestInstances.arbitraryThrowable", "link" : "cats\/effect\/testkit\/TestInstances.html#arbitraryThrowable:org.scalacheck.Arbitrary[Throwable]", "kind" : "lazy val"}, {"label" : "arbitraryFiniteDuration", "tail" : ": Arbitrary[FiniteDuration]", "member" : "cats.effect.testkit.TestInstances.arbitraryFiniteDuration", "link" : "cats\/effect\/testkit\/TestInstances.html#arbitraryFiniteDuration:org.scalacheck.Arbitrary[scala.concurrent.duration.FiniteDuration]", "kind" : "implicit lazy val"}, {"label" : "genResource", "tail" : "(F: Applicative[F], AFA: Arbitrary[F[A]], AFU: Arbitrary[F[Unit]], AA: Arbitrary[A]): Gen[Resource[F, A]]", "member" : "cats.effect.testkit.TestInstances.genResource", "link" : "cats\/effect\/testkit\/TestInstances.html#genResource[F[_],A](implicitF:cats.Applicative[F],implicitAFA:org.scalacheck.Arbitrary[F[A]],implicitAFU:org.scalacheck.Arbitrary[F[Unit]],implicitAA:org.scalacheck.Arbitrary[A]):org.scalacheck.Gen[cats.effect.Resource[F,A]]", "kind" : "def"}, {"label" : "arbitraryResource", "tail" : "(F: Applicative[F], AFA: Arbitrary[F[A]], AFU: Arbitrary[F[Unit]], AA: Arbitrary[A]): Arbitrary[Resource[F, A]]", "member" : "cats.effect.testkit.TestInstances.arbitraryResource", "link" : "cats\/effect\/testkit\/TestInstances.html#arbitraryResource[F[_],A](implicitF:cats.Applicative[F],implicitAFA:org.scalacheck.Arbitrary[F[A]],implicitAFU:org.scalacheck.Arbitrary[F[Unit]],implicitAA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[cats.effect.Resource[F,A]]", "kind" : "implicit def"}, {"label" : "arbitrarySyncIO", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Arbitrary[SyncIO[A]]", "member" : "cats.effect.testkit.TestInstances.arbitrarySyncIO", "link" : "cats\/effect\/testkit\/TestInstances.html#arbitrarySyncIO[A](implicitevidence$7:org.scalacheck.Arbitrary[A],implicitevidence$8:org.scalacheck.Cogen[A]):org.scalacheck.Arbitrary[cats.effect.SyncIO[A]]", "kind" : "implicit def"}, {"label" : "arbitraryIO", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A], ticker: Ticker): Arbitrary[IO[A]]", "member" : "cats.effect.testkit.TestInstances.arbitraryIO", "link" : "cats\/effect\/testkit\/TestInstances.html#arbitraryIO[A](implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicitticker:TestInstances.this.Ticker):org.scalacheck.Arbitrary[cats.effect.IO[A]]", "kind" : "implicit def"}, {"label" : "cogenIO", "tail" : "(arg0: Cogen[A], ticker: Ticker): Cogen[IO[A]]", "member" : "cats.effect.testkit.TestInstances.cogenIO", "link" : "cats\/effect\/testkit\/TestInstances.html#cogenIO[A](implicitevidence$1:org.scalacheck.Cogen[A],implicitticker:TestInstances.this.Ticker):org.scalacheck.Cogen[cats.effect.IO[A]]", "kind" : "implicit def"}, {"label" : "cogenSyncType", "tail" : ": Cogen[Type]", "member" : "cats.effect.kernel.testkit.SyncTypeGenerators.cogenSyncType", "link" : "cats\/effect\/testkit\/TestInstances.html#cogenSyncType:org.scalacheck.Cogen[cats.effect.kernel.Sync.Type]", "kind" : "implicit val"}, {"label" : "arbitrarySyncType", "tail" : ": Arbitrary[Type]", "member" : "cats.effect.kernel.testkit.SyncTypeGenerators.arbitrarySyncType", "link" : "cats\/effect\/testkit\/TestInstances.html#arbitrarySyncType:org.scalacheck.Arbitrary[cats.effect.kernel.Sync.Type]", "kind" : "implicit val"}, {"label" : "cogenOutcome", "tail" : "(arg0: Cogen[E], A: Cogen[F[A]]): Cogen[kernel.Outcome[F, E, A]]", "member" : "cats.effect.kernel.testkit.OutcomeGenerators.cogenOutcome", "link" : "cats\/effect\/testkit\/TestInstances.html#cogenOutcome[F[_],E,A](implicitevidence$71:org.scalacheck.Cogen[E],implicitA:org.scalacheck.Cogen[F[A]]):org.scalacheck.Cogen[cats.effect.kernel.Outcome[F,E,A]]", "kind" : "implicit def"}, {"label" : "arbitraryOutcome", "tail" : "(arg0: Applicative[F], arg1: Arbitrary[E], arg2: Cogen[E], arg3: Arbitrary[A], arg4: Cogen[A]): Arbitrary[kernel.Outcome[F, E, A]]", "member" : "cats.effect.kernel.testkit.OutcomeGenerators.arbitraryOutcome", "link" : "cats\/effect\/testkit\/TestInstances.html#arbitraryOutcome[F[_],E,A](implicitevidence$66:cats.Applicative[F],implicitevidence$67:org.scalacheck.Arbitrary[E],implicitevidence$68:org.scalacheck.Cogen[E],implicitevidence$69:org.scalacheck.Arbitrary[A],implicitevidence$70:org.scalacheck.Cogen[A]):org.scalacheck.Arbitrary[cats.effect.kernel.Outcome[F,E,A]]", "kind" : "implicit def"}, {"label" : "outcomeGenerators", "tail" : "(arg0: Applicative[F], arg1: Arbitrary[E], arg2: Cogen[E]): ApplicativeErrorGenerators[[γ$0$]kernel.Outcome[F, E, γ$0$], E]", "member" : "cats.effect.kernel.testkit.OutcomeGenerators.outcomeGenerators", "link" : "cats\/effect\/testkit\/TestInstances.html#outcomeGenerators[F[_],E](implicitevidence$61:cats.Applicative[F],implicitevidence$62:org.scalacheck.Arbitrary[E],implicitevidence$63:org.scalacheck.Cogen[E]):cats.effect.kernel.testkit.ApplicativeErrorGenerators[[γ$0$]cats.effect.kernel.Outcome[F,E,γ$0$],E]", "kind" : "def"}, {"label" : "eqParallelF", "tail" : "(EqF: Eq[F[A]]): Eq[kernel.ParallelF[F, A]]", "member" : "cats.effect.kernel.testkit.ParallelFGenerators.eqParallelF", "link" : "cats\/effect\/testkit\/TestInstances.html#eqParallelF[F[_],A](implicitEqF:cats.Eq[F[A]]):cats.Eq[cats.effect.kernel.ParallelF[F,A]]", "kind" : "implicit def"}, {"label" : "arbitraryParallelF", "tail" : "(ArbF: Arbitrary[F[A]]): Arbitrary[kernel.ParallelF[F, A]]", "member" : "cats.effect.kernel.testkit.ParallelFGenerators.arbitraryParallelF", "link" : "cats\/effect\/testkit\/TestInstances.html#arbitraryParallelF[F[_],A](implicitArbF:org.scalacheck.Arbitrary[F[A]]):org.scalacheck.Arbitrary[cats.effect.kernel.ParallelF[F,A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/testkit\/TestInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/testkit\/TestInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/testkit\/TestInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/testkit\/TestInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/testkit\/TestInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/testkit\/TestInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/testkit\/TestInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/testkit\/TestInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/testkit\/TestInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/testkit\/TestInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/testkit\/TestInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/testkit\/TestInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/testkit\/TestInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/testkit\/TestInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/testkit\/TestInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/testkit\/TestInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/testkit\/TestInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/testkit\/TestInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/testkit\/TestInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "cats.effect.kernel.instances" : [{"name" : "cats.effect.kernel.instances.all", "shortDescription" : "", "object" : "cats\/effect\/kernel\/instances\/package$$all$.html", "members_object" : [{"label" : "alignForParallelF", "tail" : "(F: GenSpawn[F, E]): Align[[β$3$]T[F, β$3$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.alignForParallelF", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#alignForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.Align[[β$3$]cats.effect.kernel.Par.instance.T[F,β$3$]]", "kind" : "implicit def"}, {"label" : "commutativeApplicativeForParallelF", "tail" : "(F: GenSpawn[F, E]): CommutativeApplicative[[β$1$]T[F, β$1$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.commutativeApplicativeForParallelF", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#commutativeApplicativeForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.CommutativeApplicative[[β$1$]cats.effect.kernel.Par.instance.T[F,β$1$]]", "kind" : "implicit def"}, {"label" : "parallelForGenSpawn", "tail" : "(M: GenSpawn[M, E]): Aux[M, [β$0$]T[M, β$0$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.parallelForGenSpawn", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#parallelForGenSpawn[M[_],E](implicitM:cats.effect.kernel.GenSpawn[M,E]):cats.Parallel.Aux[M,[β$0$]cats.effect.kernel.Par.instance.T[M,β$0$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/instances\/package$$all$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.instances.AllInstances", "trait" : "cats\/effect\/kernel\/instances\/AllInstances.html", "kind" : "trait", "members_trait" : [{"label" : "alignForParallelF", "tail" : "(F: GenSpawn[F, E]): Align[[β$3$]T[F, β$3$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.alignForParallelF", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#alignForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.Align[[β$3$]cats.effect.kernel.Par.instance.T[F,β$3$]]", "kind" : "implicit def"}, {"label" : "commutativeApplicativeForParallelF", "tail" : "(F: GenSpawn[F, E]): CommutativeApplicative[[β$1$]T[F, β$1$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.commutativeApplicativeForParallelF", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#commutativeApplicativeForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.CommutativeApplicative[[β$1$]cats.effect.kernel.Par.instance.T[F,β$1$]]", "kind" : "implicit def"}, {"label" : "parallelForGenSpawn", "tail" : "(M: GenSpawn[M, E]): Aux[M, [β$0$]T[M, β$0$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.parallelForGenSpawn", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#parallelForGenSpawn[M[_],E](implicitM:cats.effect.kernel.GenSpawn[M,E]):cats.Parallel.Aux[M,[β$0$]cats.effect.kernel.Par.instance.T[M,β$0$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/instances\/AllInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.instances.GenSpawnInstances", "trait" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html", "kind" : "trait", "members_trait" : [{"label" : "alignForParallelF", "tail" : "(F: GenSpawn[F, E]): Align[[β$3$]T[F, β$3$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.alignForParallelF", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#alignForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.Align[[β$3$]cats.effect.kernel.Par.instance.T[F,β$3$]]", "kind" : "implicit def"}, {"label" : "commutativeApplicativeForParallelF", "tail" : "(F: GenSpawn[F, E]): CommutativeApplicative[[β$1$]T[F, β$1$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.commutativeApplicativeForParallelF", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#commutativeApplicativeForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.CommutativeApplicative[[β$1$]cats.effect.kernel.Par.instance.T[F,β$1$]]", "kind" : "implicit def"}, {"label" : "parallelForGenSpawn", "tail" : "(M: GenSpawn[M, E]): Aux[M, [β$0$]T[M, β$0$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.parallelForGenSpawn", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#parallelForGenSpawn[M[_],E](implicitM:cats.effect.kernel.GenSpawn[M,E]):cats.Parallel.Aux[M,[β$0$]cats.effect.kernel.Par.instance.T[M,β$0$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/instances\/GenSpawnInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.instances.spawn", "shortDescription" : "", "object" : "cats\/effect\/kernel\/instances\/package$$spawn$.html", "members_object" : [{"label" : "alignForParallelF", "tail" : "(F: GenSpawn[F, E]): Align[[β$3$]T[F, β$3$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.alignForParallelF", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#alignForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.Align[[β$3$]cats.effect.kernel.Par.instance.T[F,β$3$]]", "kind" : "implicit def"}, {"label" : "commutativeApplicativeForParallelF", "tail" : "(F: GenSpawn[F, E]): CommutativeApplicative[[β$1$]T[F, β$1$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.commutativeApplicativeForParallelF", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#commutativeApplicativeForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.CommutativeApplicative[[β$1$]cats.effect.kernel.Par.instance.T[F,β$1$]]", "kind" : "implicit def"}, {"label" : "parallelForGenSpawn", "tail" : "(M: GenSpawn[M, E]): Aux[M, [β$0$]T[M, β$0$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.parallelForGenSpawn", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#parallelForGenSpawn[M[_],E](implicitM:cats.effect.kernel.GenSpawn[M,E]):cats.Parallel.Aux[M,[β$0$]cats.effect.kernel.Par.instance.T[M,β$0$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/instances\/package$$spawn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "cats.effect.syntax" : [{"name" : "cats.effect.syntax.all", "shortDescription" : "", "object" : "cats\/effect\/syntax\/package$$all$.html", "members_object" : [{"label" : "clockOps", "tail" : "(wrapped: F[A]): ClockOps[F, A]", "member" : "cats.effect.kernel.syntax.ClockSyntax.clockOps", "link" : "cats\/effect\/syntax\/package$$all$.html#clockOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.ClockOps[F,A]", "kind" : "implicit def"}, {"label" : "effectResourceOps", "tail" : "(wrapped: F[A]): EffectResourceOps[F, A]", "member" : "cats.effect.kernel.syntax.ResourceSyntax.effectResourceOps", "link" : "cats\/effect\/syntax\/package$$all$.html#effectResourceOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.EffectResourceOps[F,A]", "kind" : "implicit def"}, {"label" : "asyncOps", "tail" : "(wrapped: F[A]): AsyncOps[F, A]", "member" : "cats.effect.kernel.syntax.AsyncSyntax.asyncOps", "link" : "cats\/effect\/syntax\/package$$all$.html#asyncOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.AsyncOps[F,A]", "kind" : "implicit def"}, {"label" : "concurrentParSequenceOps", "tail" : "(wrapped: T[F[A]]): ConcurrentParSequenceNOps[T, F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParSequenceOps", "link" : "cats\/effect\/syntax\/package$$all$.html#concurrentParSequenceOps[T[_],F[_],A](wrapped:T[F[A]]):cats.effect.kernel.syntax.ConcurrentParSequenceNOps[T,F,A]", "kind" : "implicit def"}, {"label" : "concurrentParTraverseOps", "tail" : "(wrapped: T[A]): ConcurrentParTraverseNOps[T, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParTraverseOps", "link" : "cats\/effect\/syntax\/package$$all$.html#concurrentParTraverseOps[T[_],A](wrapped:T[A]):cats.effect.kernel.syntax.ConcurrentParTraverseNOps[T,A]", "kind" : "implicit def"}, {"label" : "genConcurrentOps_", "tail" : "(wrapped: F[A]): GenConcurrentOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.genConcurrentOps_", "link" : "cats\/effect\/syntax\/package$$all$.html#genConcurrentOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenConcurrentOps_[F,A]", "kind" : "implicit def"}, {"label" : "genTemporalOps", "tail" : "(wrapped: F[A])(F: kernel.GenTemporal[F, E]): GenTemporalOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps", "link" : "cats\/effect\/syntax\/package$$all$.html#genTemporalOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.syntax.GenTemporalOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genTemporalOps_", "tail" : "(wrapped: F[A]): GenTemporalOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps_", "link" : "cats\/effect\/syntax\/package$$all$.html#genTemporalOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenTemporalOps_[F,A]", "kind" : "implicit def"}, {"label" : "genSpawnOps", "tail" : "(wrapped: F[A])(F: kernel.GenSpawn[F, E]): GenSpawnOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps", "link" : "cats\/effect\/syntax\/package$$all$.html#genSpawnOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.syntax.GenSpawnOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genSpawnOps_", "tail" : "(wrapped: F[A]): GenSpawnOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps_", "link" : "cats\/effect\/syntax\/package$$all$.html#genSpawnOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenSpawnOps_[F,A]", "kind" : "implicit def"}, {"label" : "monadCancelOps", "tail" : "(wrapped: F[A])(F: kernel.MonadCancel[F, E]): MonadCancelOps[F, A, E]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps", "link" : "cats\/effect\/syntax\/package$$all$.html#monadCancelOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.syntax.MonadCancelOps[F,A,E]", "kind" : "implicit def"}, {"label" : "monadCancelOps_", "tail" : "(wrapped: F[A]): MonadCancelOps_[F, A]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps_", "link" : "cats\/effect\/syntax\/package$$all$.html#monadCancelOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.MonadCancelOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/syntax\/package$$all$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/syntax\/package$$all$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/syntax\/package$$all$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/syntax\/package$$all$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/syntax\/package$$all$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/syntax\/package$$all$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/syntax\/package$$all$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$all$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$all$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$all$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/syntax\/package$$all$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/syntax\/package$$all$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/syntax\/package$$all$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/syntax\/package$$all$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/syntax\/package$$all$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/syntax\/package$$all$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/syntax\/package$$all$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/syntax\/package$$all$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/syntax\/package$$all$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.syntax.AllSyntax", "trait" : "cats\/effect\/syntax\/AllSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "clockOps", "tail" : "(wrapped: F[A]): ClockOps[F, A]", "member" : "cats.effect.kernel.syntax.ClockSyntax.clockOps", "link" : "cats\/effect\/syntax\/AllSyntax.html#clockOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.ClockOps[F,A]", "kind" : "implicit def"}, {"label" : "effectResourceOps", "tail" : "(wrapped: F[A]): EffectResourceOps[F, A]", "member" : "cats.effect.kernel.syntax.ResourceSyntax.effectResourceOps", "link" : "cats\/effect\/syntax\/AllSyntax.html#effectResourceOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.EffectResourceOps[F,A]", "kind" : "implicit def"}, {"label" : "asyncOps", "tail" : "(wrapped: F[A]): AsyncOps[F, A]", "member" : "cats.effect.kernel.syntax.AsyncSyntax.asyncOps", "link" : "cats\/effect\/syntax\/AllSyntax.html#asyncOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.AsyncOps[F,A]", "kind" : "implicit def"}, {"label" : "concurrentParSequenceOps", "tail" : "(wrapped: T[F[A]]): ConcurrentParSequenceNOps[T, F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParSequenceOps", "link" : "cats\/effect\/syntax\/AllSyntax.html#concurrentParSequenceOps[T[_],F[_],A](wrapped:T[F[A]]):cats.effect.kernel.syntax.ConcurrentParSequenceNOps[T,F,A]", "kind" : "implicit def"}, {"label" : "concurrentParTraverseOps", "tail" : "(wrapped: T[A]): ConcurrentParTraverseNOps[T, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParTraverseOps", "link" : "cats\/effect\/syntax\/AllSyntax.html#concurrentParTraverseOps[T[_],A](wrapped:T[A]):cats.effect.kernel.syntax.ConcurrentParTraverseNOps[T,A]", "kind" : "implicit def"}, {"label" : "genConcurrentOps_", "tail" : "(wrapped: F[A]): GenConcurrentOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.genConcurrentOps_", "link" : "cats\/effect\/syntax\/AllSyntax.html#genConcurrentOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenConcurrentOps_[F,A]", "kind" : "implicit def"}, {"label" : "genTemporalOps", "tail" : "(wrapped: F[A])(F: kernel.GenTemporal[F, E]): GenTemporalOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps", "link" : "cats\/effect\/syntax\/AllSyntax.html#genTemporalOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.syntax.GenTemporalOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genTemporalOps_", "tail" : "(wrapped: F[A]): GenTemporalOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps_", "link" : "cats\/effect\/syntax\/AllSyntax.html#genTemporalOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenTemporalOps_[F,A]", "kind" : "implicit def"}, {"label" : "genSpawnOps", "tail" : "(wrapped: F[A])(F: kernel.GenSpawn[F, E]): GenSpawnOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps", "link" : "cats\/effect\/syntax\/AllSyntax.html#genSpawnOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.syntax.GenSpawnOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genSpawnOps_", "tail" : "(wrapped: F[A]): GenSpawnOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps_", "link" : "cats\/effect\/syntax\/AllSyntax.html#genSpawnOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenSpawnOps_[F,A]", "kind" : "implicit def"}, {"label" : "monadCancelOps", "tail" : "(wrapped: F[A])(F: kernel.MonadCancel[F, E]): MonadCancelOps[F, A, E]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps", "link" : "cats\/effect\/syntax\/AllSyntax.html#monadCancelOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.syntax.MonadCancelOps[F,A,E]", "kind" : "implicit def"}, {"label" : "monadCancelOps_", "tail" : "(wrapped: F[A]): MonadCancelOps_[F, A]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps_", "link" : "cats\/effect\/syntax\/AllSyntax.html#monadCancelOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.MonadCancelOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/syntax\/AllSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/syntax\/AllSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/syntax\/AllSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/syntax\/AllSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/syntax\/AllSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/syntax\/AllSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/syntax\/AllSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/AllSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/AllSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/AllSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/syntax\/AllSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/syntax\/AllSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/syntax\/AllSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/syntax\/AllSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/syntax\/AllSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/syntax\/AllSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/syntax\/AllSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/syntax\/AllSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/syntax\/AllSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.syntax.async", "shortDescription" : "", "object" : "cats\/effect\/syntax\/package$$async$.html", "members_object" : [{"label" : "asyncOps", "tail" : "(wrapped: F[A]): AsyncOps[F, A]", "member" : "cats.effect.kernel.syntax.AsyncSyntax.asyncOps", "link" : "cats\/effect\/syntax\/package$$async$.html#asyncOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.AsyncOps[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/syntax\/package$$async$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/syntax\/package$$async$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/syntax\/package$$async$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/syntax\/package$$async$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/syntax\/package$$async$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/syntax\/package$$async$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/syntax\/package$$async$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$async$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$async$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$async$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/syntax\/package$$async$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/syntax\/package$$async$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/syntax\/package$$async$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/syntax\/package$$async$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/syntax\/package$$async$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/syntax\/package$$async$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/syntax\/package$$async$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/syntax\/package$$async$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/syntax\/package$$async$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.syntax.clock", "shortDescription" : "", "object" : "cats\/effect\/syntax\/package$$clock$.html", "members_object" : [{"label" : "clockOps", "tail" : "(wrapped: F[A]): ClockOps[F, A]", "member" : "cats.effect.kernel.syntax.ClockSyntax.clockOps", "link" : "cats\/effect\/syntax\/package$$clock$.html#clockOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.ClockOps[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/syntax\/package$$clock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/syntax\/package$$clock$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/syntax\/package$$clock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/syntax\/package$$clock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/syntax\/package$$clock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/syntax\/package$$clock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/syntax\/package$$clock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$clock$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$clock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$clock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/syntax\/package$$clock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/syntax\/package$$clock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/syntax\/package$$clock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/syntax\/package$$clock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/syntax\/package$$clock$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/syntax\/package$$clock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/syntax\/package$$clock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/syntax\/package$$clock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/syntax\/package$$clock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.syntax.concurrent", "shortDescription" : "", "object" : "cats\/effect\/syntax\/package$$concurrent$.html", "members_object" : [{"label" : "concurrentParSequenceOps", "tail" : "(wrapped: T[F[A]]): ConcurrentParSequenceNOps[T, F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParSequenceOps", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#concurrentParSequenceOps[T[_],F[_],A](wrapped:T[F[A]]):cats.effect.kernel.syntax.ConcurrentParSequenceNOps[T,F,A]", "kind" : "implicit def"}, {"label" : "concurrentParTraverseOps", "tail" : "(wrapped: T[A]): ConcurrentParTraverseNOps[T, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParTraverseOps", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#concurrentParTraverseOps[T[_],A](wrapped:T[A]):cats.effect.kernel.syntax.ConcurrentParTraverseNOps[T,A]", "kind" : "implicit def"}, {"label" : "genConcurrentOps_", "tail" : "(wrapped: F[A]): GenConcurrentOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.genConcurrentOps_", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#genConcurrentOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenConcurrentOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/syntax\/package$$concurrent$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/syntax\/package$$concurrent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.syntax.monadCancel", "shortDescription" : "", "object" : "cats\/effect\/syntax\/package$$monadCancel$.html", "members_object" : [{"label" : "monadCancelOps", "tail" : "(wrapped: F[A])(F: kernel.MonadCancel[F, E]): MonadCancelOps[F, A, E]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#monadCancelOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.syntax.MonadCancelOps[F,A,E]", "kind" : "implicit def"}, {"label" : "monadCancelOps_", "tail" : "(wrapped: F[A]): MonadCancelOps_[F, A]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps_", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#monadCancelOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.MonadCancelOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/syntax\/package$$monadCancel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.syntax.resource", "shortDescription" : "", "object" : "cats\/effect\/syntax\/package$$resource$.html", "members_object" : [{"label" : "effectResourceOps", "tail" : "(wrapped: F[A]): EffectResourceOps[F, A]", "member" : "cats.effect.kernel.syntax.ResourceSyntax.effectResourceOps", "link" : "cats\/effect\/syntax\/package$$resource$.html#effectResourceOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.EffectResourceOps[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/syntax\/package$$resource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/syntax\/package$$resource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/syntax\/package$$resource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/syntax\/package$$resource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/syntax\/package$$resource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/syntax\/package$$resource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/syntax\/package$$resource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$resource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$resource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$resource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/syntax\/package$$resource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/syntax\/package$$resource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/syntax\/package$$resource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/syntax\/package$$resource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/syntax\/package$$resource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/syntax\/package$$resource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/syntax\/package$$resource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/syntax\/package$$resource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/syntax\/package$$resource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.syntax.spawn", "shortDescription" : "", "object" : "cats\/effect\/syntax\/package$$spawn$.html", "members_object" : [{"label" : "genSpawnOps", "tail" : "(wrapped: F[A])(F: kernel.GenSpawn[F, E]): GenSpawnOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps", "link" : "cats\/effect\/syntax\/package$$spawn$.html#genSpawnOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.syntax.GenSpawnOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genSpawnOps_", "tail" : "(wrapped: F[A]): GenSpawnOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps_", "link" : "cats\/effect\/syntax\/package$$spawn$.html#genSpawnOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenSpawnOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/syntax\/package$$spawn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/syntax\/package$$spawn$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/syntax\/package$$spawn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/syntax\/package$$spawn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/syntax\/package$$spawn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/syntax\/package$$spawn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/syntax\/package$$spawn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$spawn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$spawn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$spawn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/syntax\/package$$spawn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/syntax\/package$$spawn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/syntax\/package$$spawn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/syntax\/package$$spawn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/syntax\/package$$spawn$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/syntax\/package$$spawn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/syntax\/package$$spawn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/syntax\/package$$spawn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/syntax\/package$$spawn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.syntax.temporal", "shortDescription" : "", "object" : "cats\/effect\/syntax\/package$$temporal$.html", "members_object" : [{"label" : "genTemporalOps", "tail" : "(wrapped: F[A])(F: kernel.GenTemporal[F, E]): GenTemporalOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps", "link" : "cats\/effect\/syntax\/package$$temporal$.html#genTemporalOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.syntax.GenTemporalOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genTemporalOps_", "tail" : "(wrapped: F[A]): GenTemporalOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps_", "link" : "cats\/effect\/syntax\/package$$temporal$.html#genTemporalOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenTemporalOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/syntax\/package$$temporal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/syntax\/package$$temporal$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/syntax\/package$$temporal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/syntax\/package$$temporal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/syntax\/package$$temporal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/syntax\/package$$temporal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/syntax\/package$$temporal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$temporal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$temporal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/syntax\/package$$temporal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/syntax\/package$$temporal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/syntax\/package$$temporal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/syntax\/package$$temporal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/syntax\/package$$temporal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/syntax\/package$$temporal$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/syntax\/package$$temporal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/syntax\/package$$temporal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/syntax\/package$$temporal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/syntax\/package$$temporal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "cats.effect.unsafe" : [{"name" : "cats.effect.unsafe.implicits", "shortDescription" : "", "object" : "cats\/effect\/unsafe\/implicits$.html", "members_object" : [{"label" : "global", "tail" : ": IORuntime", "member" : "cats.effect.unsafe.implicits.global", "link" : "cats\/effect\/unsafe\/implicits$.html#global:cats.effect.unsafe.IORuntime", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/unsafe\/implicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/unsafe\/implicits$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/unsafe\/implicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/unsafe\/implicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/unsafe\/implicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/unsafe\/implicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/unsafe\/implicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/implicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/implicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/implicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/unsafe\/implicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/unsafe\/implicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/unsafe\/implicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/unsafe\/implicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/unsafe\/implicits$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/unsafe\/implicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/unsafe\/implicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/unsafe\/implicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/unsafe\/implicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.unsafe.IORuntime", "shortDescription" : "", "object" : "cats\/effect\/unsafe\/IORuntime$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "cats.effect.unsafe.IORuntime.toString", "link" : "cats\/effect\/unsafe\/IORuntime.html#toString():String", "kind" : "def"}, {"label" : "config", "tail" : ": IORuntimeConfig", "member" : "cats.effect.unsafe.IORuntime.config", "link" : "cats\/effect\/unsafe\/IORuntime.html#config:cats.effect.unsafe.IORuntimeConfig", "kind" : "val"}, {"label" : "shutdown", "tail" : ": () => Unit", "member" : "cats.effect.unsafe.IORuntime.shutdown", "link" : "cats\/effect\/unsafe\/IORuntime.html#shutdown:()=>Unit", "kind" : "val"}, {"label" : "scheduler", "tail" : ": Scheduler", "member" : "cats.effect.unsafe.IORuntime.scheduler", "link" : "cats\/effect\/unsafe\/IORuntime.html#scheduler:cats.effect.unsafe.Scheduler", "kind" : "val"}, {"label" : "compute", "tail" : ": ExecutionContext", "member" : "cats.effect.unsafe.IORuntime.compute", "link" : "cats\/effect\/unsafe\/IORuntime.html#compute:scala.concurrent.ExecutionContext", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/unsafe\/IORuntime.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/unsafe\/IORuntime.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/unsafe\/IORuntime.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/unsafe\/IORuntime.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/unsafe\/IORuntime.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/unsafe\/IORuntime.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/unsafe\/IORuntime.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntime.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntime.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntime.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/unsafe\/IORuntime.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/unsafe\/IORuntime.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/unsafe\/IORuntime.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/unsafe\/IORuntime.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/unsafe\/IORuntime.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/unsafe\/IORuntime.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/unsafe\/IORuntime.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/unsafe\/IORuntime.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(compute: ExecutionContext, blocking: ExecutionContext, scheduler: Scheduler, shutdown: () => Unit, config: IORuntimeConfig): IORuntime", "member" : "cats.effect.unsafe.IORuntime.apply", "link" : "cats\/effect\/unsafe\/IORuntime$.html#apply(compute:scala.concurrent.ExecutionContext,blocking:scala.concurrent.ExecutionContext,scheduler:cats.effect.unsafe.Scheduler,shutdown:()=>Unit,config:cats.effect.unsafe.IORuntimeConfig):cats.effect.unsafe.IORuntime", "kind" : "def"}, {"label" : "global", "tail" : ": IORuntime", "member" : "cats.effect.unsafe.IORuntimeCompanionPlatform.global", "link" : "cats\/effect\/unsafe\/IORuntime$.html#global:cats.effect.unsafe.IORuntime", "kind" : "lazy val"}, {"label" : "createDefaultScheduler", "tail" : "(threadPrefix: String): (Scheduler, () => Unit)", "member" : "cats.effect.unsafe.IORuntimeCompanionPlatform.createDefaultScheduler", "link" : "cats\/effect\/unsafe\/IORuntime$.html#createDefaultScheduler(threadPrefix:String):(cats.effect.unsafe.Scheduler,()=>Unit)", "kind" : "def"}, {"label" : "createDefaultBlockingExecutionContext", "tail" : "(threadPrefix: String): (ExecutionContext, () => Unit)", "member" : "cats.effect.unsafe.IORuntimeCompanionPlatform.createDefaultBlockingExecutionContext", "link" : "cats\/effect\/unsafe\/IORuntime$.html#createDefaultBlockingExecutionContext(threadPrefix:String):(scala.concurrent.ExecutionContext,()=>Unit)", "kind" : "def"}, {"label" : "createDefaultComputeThreadPool", "tail" : "(self: => IORuntime, threads: Int, threadPrefix: String): (WorkStealingThreadPool, () => Unit)", "member" : "cats.effect.unsafe.IORuntimeCompanionPlatform.createDefaultComputeThreadPool", "link" : "cats\/effect\/unsafe\/IORuntime$.html#createDefaultComputeThreadPool(self:=>cats.effect.unsafe.IORuntime,threads:Int,threadPrefix:String):(cats.effect.unsafe.WorkStealingThreadPool,()=>Unit)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/unsafe\/IORuntime$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/unsafe\/IORuntime$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/unsafe\/IORuntime$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/unsafe\/IORuntime$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/unsafe\/IORuntime$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/unsafe\/IORuntime$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/unsafe\/IORuntime$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntime$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntime$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntime$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/unsafe\/IORuntime$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/unsafe\/IORuntime$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/unsafe\/IORuntime$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/unsafe\/IORuntime$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/unsafe\/IORuntime$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/unsafe\/IORuntime$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/unsafe\/IORuntime$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/unsafe\/IORuntime$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/unsafe\/IORuntime$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/unsafe\/IORuntime.html", "kind" : "class"}, {"name" : "cats.effect.unsafe.IORuntimeConfig", "shortDescription" : "", "object" : "cats\/effect\/unsafe\/IORuntimeConfig$.html", "members_object" : [{"label" : "apply", "tail" : "(cancelationCheckThreshold: Int, autoYieldThreshold: Int): IORuntimeConfig", "member" : "cats.effect.unsafe.IORuntimeConfig.apply", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#apply(cancelationCheckThreshold:Int,autoYieldThreshold:Int):cats.effect.unsafe.IORuntimeConfig", "kind" : "def"}, {"label" : "apply", "tail" : "(): IORuntimeConfig", "member" : "cats.effect.unsafe.IORuntimeConfig.apply", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#apply():cats.effect.unsafe.IORuntimeConfig", "kind" : "def"}, {"label" : "Default", "tail" : ": IORuntimeConfig", "member" : "cats.effect.unsafe.IORuntimeConfigCompanionPlatform.Default", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#Default:cats.effect.unsafe.IORuntimeConfig", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/unsafe\/IORuntimeConfig$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "autoYieldThreshold", "tail" : ": Int", "member" : "cats.effect.unsafe.IORuntimeConfig.autoYieldThreshold", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#autoYieldThreshold:Int", "kind" : "val"}, {"label" : "cancelationCheckThreshold", "tail" : ": Int", "member" : "cats.effect.unsafe.IORuntimeConfig.cancelationCheckThreshold", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#cancelationCheckThreshold:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/unsafe\/IORuntimeConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cats\/effect\/unsafe\/IORuntimeConfig.html", "kind" : "case class"}, {"name" : "cats.effect.unsafe.Scheduler", "object" : "cats\/effect\/unsafe\/Scheduler$.html", "members_object" : [{"label" : "fromScheduledExecutor", "tail" : "(scheduler: ScheduledExecutorService): Scheduler", "member" : "cats.effect.unsafe.SchedulerCompanionPlatform.fromScheduledExecutor", "link" : "cats\/effect\/unsafe\/Scheduler$.html#fromScheduledExecutor(scheduler:java.util.concurrent.ScheduledExecutorService):cats.effect.unsafe.Scheduler", "kind" : "def"}, {"label" : "createDefaultScheduler", "tail" : "(): (Scheduler, () => Unit)", "member" : "cats.effect.unsafe.SchedulerCompanionPlatform.createDefaultScheduler", "link" : "cats\/effect\/unsafe\/Scheduler$.html#createDefaultScheduler():(cats.effect.unsafe.Scheduler,()=>Unit)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/unsafe\/Scheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/unsafe\/Scheduler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/unsafe\/Scheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/unsafe\/Scheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/unsafe\/Scheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/unsafe\/Scheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/unsafe\/Scheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/Scheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/Scheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/Scheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/unsafe\/Scheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/unsafe\/Scheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/unsafe\/Scheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/unsafe\/Scheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/unsafe\/Scheduler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/unsafe\/Scheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/unsafe\/Scheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/unsafe\/Scheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/unsafe\/Scheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/unsafe\/Scheduler.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/unsafe\/Scheduler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/unsafe\/Scheduler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/unsafe\/Scheduler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/unsafe\/Scheduler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/unsafe\/Scheduler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/unsafe\/Scheduler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/unsafe\/Scheduler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/Scheduler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/Scheduler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/unsafe\/Scheduler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/unsafe\/Scheduler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/unsafe\/Scheduler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/unsafe\/Scheduler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/unsafe\/Scheduler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/unsafe\/Scheduler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/unsafe\/Scheduler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/unsafe\/Scheduler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/unsafe\/Scheduler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/unsafe\/Scheduler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "monotonicNanos", "tail" : "(): Long", "member" : "cats.effect.unsafe.Scheduler.monotonicNanos", "link" : "cats\/effect\/unsafe\/Scheduler.html#monotonicNanos():Long", "kind" : "abstract def"}, {"label" : "nowMillis", "tail" : "(): Long", "member" : "cats.effect.unsafe.Scheduler.nowMillis", "link" : "cats\/effect\/unsafe\/Scheduler.html#nowMillis():Long", "kind" : "abstract def"}, {"label" : "sleep", "tail" : "(delay: FiniteDuration, task: Runnable): Runnable", "member" : "cats.effect.unsafe.Scheduler.sleep", "link" : "cats\/effect\/unsafe\/Scheduler.html#sleep(delay:scala.concurrent.duration.FiniteDuration,task:Runnable):Runnable", "kind" : "abstract def"}], "shortDescription" : ""}], "cats.effect.instances" : [{"name" : "cats.effect.instances.all", "shortDescription" : "", "object" : "cats\/effect\/instances\/package$$all$.html", "members_object" : [{"label" : "alignForParallelF", "tail" : "(F: kernel.GenSpawn[F, E]): Align[[β$3$]T[F, β$3$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.alignForParallelF", "link" : "cats\/effect\/instances\/package$$all$.html#alignForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.Align[[β$3$]cats.effect.kernel.Par.instance.T[F,β$3$]]", "kind" : "implicit def"}, {"label" : "commutativeApplicativeForParallelF", "tail" : "(F: kernel.GenSpawn[F, E]): CommutativeApplicative[[β$1$]T[F, β$1$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.commutativeApplicativeForParallelF", "link" : "cats\/effect\/instances\/package$$all$.html#commutativeApplicativeForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.CommutativeApplicative[[β$1$]cats.effect.kernel.Par.instance.T[F,β$1$]]", "kind" : "implicit def"}, {"label" : "parallelForGenSpawn", "tail" : "(M: kernel.GenSpawn[M, E]): Aux[M, [β$0$]T[M, β$0$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.parallelForGenSpawn", "link" : "cats\/effect\/instances\/package$$all$.html#parallelForGenSpawn[M[_],E](implicitM:cats.effect.kernel.GenSpawn[M,E]):cats.Parallel.Aux[M,[β$0$]cats.effect.kernel.Par.instance.T[M,β$0$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/instances\/package$$all$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/instances\/package$$all$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/instances\/package$$all$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/instances\/package$$all$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/instances\/package$$all$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/instances\/package$$all$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/instances\/package$$all$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/instances\/package$$all$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/instances\/package$$all$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/instances\/package$$all$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/instances\/package$$all$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/instances\/package$$all$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/instances\/package$$all$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/instances\/package$$all$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/instances\/package$$all$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/instances\/package$$all$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/instances\/package$$all$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/instances\/package$$all$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/instances\/package$$all$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.instances.AllInstances", "trait" : "cats\/effect\/instances\/AllInstances.html", "kind" : "trait", "members_trait" : [{"label" : "alignForParallelF", "tail" : "(F: kernel.GenSpawn[F, E]): Align[[β$3$]T[F, β$3$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.alignForParallelF", "link" : "cats\/effect\/instances\/AllInstances.html#alignForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.Align[[β$3$]cats.effect.kernel.Par.instance.T[F,β$3$]]", "kind" : "implicit def"}, {"label" : "commutativeApplicativeForParallelF", "tail" : "(F: kernel.GenSpawn[F, E]): CommutativeApplicative[[β$1$]T[F, β$1$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.commutativeApplicativeForParallelF", "link" : "cats\/effect\/instances\/AllInstances.html#commutativeApplicativeForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.CommutativeApplicative[[β$1$]cats.effect.kernel.Par.instance.T[F,β$1$]]", "kind" : "implicit def"}, {"label" : "parallelForGenSpawn", "tail" : "(M: kernel.GenSpawn[M, E]): Aux[M, [β$0$]T[M, β$0$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.parallelForGenSpawn", "link" : "cats\/effect\/instances\/AllInstances.html#parallelForGenSpawn[M[_],E](implicitM:cats.effect.kernel.GenSpawn[M,E]):cats.Parallel.Aux[M,[β$0$]cats.effect.kernel.Par.instance.T[M,β$0$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/instances\/AllInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/instances\/AllInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/instances\/AllInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/instances\/AllInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/instances\/AllInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/instances\/AllInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/instances\/AllInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/instances\/AllInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/instances\/AllInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/instances\/AllInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/instances\/AllInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/instances\/AllInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/instances\/AllInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/instances\/AllInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/instances\/AllInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/instances\/AllInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/instances\/AllInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/instances\/AllInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/instances\/AllInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.instances.spawn", "shortDescription" : "", "object" : "cats\/effect\/instances\/package$$spawn$.html", "members_object" : [{"label" : "alignForParallelF", "tail" : "(F: kernel.GenSpawn[F, E]): Align[[β$3$]T[F, β$3$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.alignForParallelF", "link" : "cats\/effect\/instances\/package$$spawn$.html#alignForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.Align[[β$3$]cats.effect.kernel.Par.instance.T[F,β$3$]]", "kind" : "implicit def"}, {"label" : "commutativeApplicativeForParallelF", "tail" : "(F: kernel.GenSpawn[F, E]): CommutativeApplicative[[β$1$]T[F, β$1$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.commutativeApplicativeForParallelF", "link" : "cats\/effect\/instances\/package$$spawn$.html#commutativeApplicativeForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.CommutativeApplicative[[β$1$]cats.effect.kernel.Par.instance.T[F,β$1$]]", "kind" : "implicit def"}, {"label" : "parallelForGenSpawn", "tail" : "(M: kernel.GenSpawn[M, E]): Aux[M, [β$0$]T[M, β$0$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.parallelForGenSpawn", "link" : "cats\/effect\/instances\/package$$spawn$.html#parallelForGenSpawn[M[_],E](implicitM:cats.effect.kernel.GenSpawn[M,E]):cats.Parallel.Aux[M,[β$0$]cats.effect.kernel.Par.instance.T[M,β$0$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/instances\/package$$spawn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/instances\/package$$spawn$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/instances\/package$$spawn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/instances\/package$$spawn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/instances\/package$$spawn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/instances\/package$$spawn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/instances\/package$$spawn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/instances\/package$$spawn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/instances\/package$$spawn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/instances\/package$$spawn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/instances\/package$$spawn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/instances\/package$$spawn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/instances\/package$$spawn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/instances\/package$$spawn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/instances\/package$$spawn$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/instances\/package$$spawn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/instances\/package$$spawn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/instances\/package$$spawn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/instances\/package$$spawn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "cats.effect.kernel.testkit" : [{"name" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators", "trait" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "recursiveGen", "tail" : "(deeper: GenK[F])(AA: Arbitrary[A], AC: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.recursiveGen", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#recursiveGen[A](deeper:cats.effect.kernel.testkit.GenK[F])(implicitAA:org.scalacheck.Arbitrary[A],implicitAC:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "baseGen", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.baseGen", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#baseGen[A](implicitevidence$26:org.scalacheck.Arbitrary[A],implicitevidence$27:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "generators", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.Generators1.generators", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#generators[A](implicitevidence$11:org.scalacheck.Arbitrary[A],implicitevidence$12:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "def"}, {"label" : "maxDepth", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.Generators1.maxDepth", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#maxDepth:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": ApplicativeError[F, E]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.F", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#F:cats.ApplicativeError[F,E]", "kind" : "implicit abstract val"}, {"label" : "cogenE", "tail" : ": Cogen[E]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.cogenE", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#cogenE:org.scalacheck.Cogen[E]", "kind" : "implicit abstract val"}, {"label" : "arbitraryE", "tail" : ": Arbitrary[E]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.arbitraryE", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeErrorGenerators.html#arbitraryE:org.scalacheck.Arbitrary[E]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.ApplicativeGenerators", "trait" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "recursiveGen", "tail" : "(deeper: GenK[F])(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.ApplicativeGenerators.recursiveGen", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#recursiveGen[A](deeper:cats.effect.kernel.testkit.GenK[F])(implicitevidence$15:org.scalacheck.Arbitrary[A],implicitevidence$16:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "baseGen", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.ApplicativeGenerators.baseGen", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#baseGen[A](implicitevidence$13:org.scalacheck.Arbitrary[A],implicitevidence$14:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "generators", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.Generators1.generators", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#generators[A](implicitevidence$11:org.scalacheck.Arbitrary[A],implicitevidence$12:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "def"}, {"label" : "maxDepth", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.Generators1.maxDepth", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#maxDepth:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": Applicative[F]", "member" : "cats.effect.kernel.testkit.ApplicativeGenerators.F", "link" : "cats\/effect\/kernel\/testkit\/ApplicativeGenerators.html#F:cats.Applicative[F]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.AsyncGenerators", "trait" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "recursiveGen", "tail" : "(deeper: GenK[F])(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.AsyncGenerators.recursiveGen", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#recursiveGen[A](deeper:cats.effect.kernel.testkit.GenK[F])(implicitevidence$56:org.scalacheck.Arbitrary[A],implicitevidence$57:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "baseGen", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.SyncGenerators.baseGen", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#baseGen[A](implicitevidence$34:org.scalacheck.Arbitrary[A],implicitevidence$35:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "generators", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.Generators1.generators", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#generators[A](implicitevidence$11:org.scalacheck.Arbitrary[A],implicitevidence$12:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "def"}, {"label" : "maxDepth", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.Generators1.maxDepth", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#maxDepth:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cogenFU", "tail" : ": Cogen[F[Unit]]", "member" : "cats.effect.kernel.testkit.AsyncGenerators.cogenFU", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#cogenFU:org.scalacheck.Cogen[F[Unit]]", "kind" : "implicit abstract val"}, {"label" : "arbitraryEC", "tail" : ": Arbitrary[ExecutionContext]", "member" : "cats.effect.kernel.testkit.AsyncGenerators.arbitraryEC", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#arbitraryEC:org.scalacheck.Arbitrary[scala.concurrent.ExecutionContext]", "kind" : "implicit abstract val"}, {"label" : "F", "tail" : ": Async[F]", "member" : "cats.effect.kernel.testkit.AsyncGenerators.F", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#F:cats.effect.kernel.Async[F]", "kind" : "implicit abstract val"}, {"label" : "arbitraryFD", "tail" : ": Arbitrary[FiniteDuration]", "member" : "cats.effect.kernel.testkit.ClockGenerators.arbitraryFD", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#arbitraryFD:org.scalacheck.Arbitrary[scala.concurrent.duration.FiniteDuration]", "kind" : "implicit abstract val"}, {"label" : "cogenE", "tail" : ": Cogen[Throwable]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.cogenE", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#cogenE:org.scalacheck.Cogen[E]", "kind" : "implicit abstract val"}, {"label" : "arbitraryE", "tail" : ": Arbitrary[Throwable]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.arbitraryE", "link" : "cats\/effect\/kernel\/testkit\/AsyncGenerators.html#arbitraryE:org.scalacheck.Arbitrary[E]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.ClockGenerators", "trait" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "baseGen", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.ClockGenerators.baseGen", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#baseGen[A](implicitevidence$30:org.scalacheck.Arbitrary[A],implicitevidence$31:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "generators", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.Generators1.generators", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#generators[A](implicitevidence$11:org.scalacheck.Arbitrary[A],implicitevidence$12:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "def"}, {"label" : "recursiveGen", "tail" : "(deeper: GenK[F])(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.Generators1.recursiveGen", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#recursiveGen[A](deeper:cats.effect.kernel.testkit.GenK[F])(implicitevidence$5:org.scalacheck.Arbitrary[A],implicitevidence$6:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "maxDepth", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.Generators1.maxDepth", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#maxDepth:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "arbitraryFD", "tail" : ": Arbitrary[FiniteDuration]", "member" : "cats.effect.kernel.testkit.ClockGenerators.arbitraryFD", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#arbitraryFD:org.scalacheck.Arbitrary[scala.concurrent.duration.FiniteDuration]", "kind" : "implicit abstract val"}, {"label" : "F", "tail" : ": Clock[F]", "member" : "cats.effect.kernel.testkit.ClockGenerators.F", "link" : "cats\/effect\/kernel\/testkit\/ClockGenerators.html#F:cats.effect.kernel.Clock[F]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.freeEval", "shortDescription" : "", "object" : "cats\/effect\/kernel\/testkit\/freeEval$.html", "members_object" : [{"label" : "syncForFreeT", "tail" : "(F: MonadError[F, Throwable]): Sync[[γ$1$]FreeT[Eval, F, γ$1$]]", "member" : "cats.effect.kernel.testkit.freeEval.syncForFreeT", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#syncForFreeT[F[_]](implicitF:cats.MonadError[F,Throwable]):cats.effect.kernel.Sync[[γ$1$]cats.free.FreeT[cats.Eval,F,γ$1$]]", "kind" : "implicit def"}, {"label" : "FreeEitherSync", "tail" : "", "member" : "cats.effect.kernel.testkit.freeEval.FreeEitherSync", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#FreeEitherSync[A]=cats.effect.kernel.testkit.freeEval.FreeSync[[β$0$]scala.util.Either[Throwable,β$0$],A]", "kind" : "type"}, {"label" : "FreeSync", "tail" : "", "member" : "cats.effect.kernel.testkit.freeEval.FreeSync", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#FreeSync[F[_],A]=cats.free.FreeT[cats.Eval,F,A]", "kind" : "type"}, {"label" : "eqFreeSync", "tail" : "(arg0: Monad[F], F: Eq[F[A]]): Eq[FreeT[Eval, F, A]]", "member" : "cats.effect.kernel.testkit.FreeSyncEq.eqFreeSync", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#eqFreeSync[F[_],A](implicitevidence$2:cats.Monad[F],implicitF:cats.Eq[F[A]]):cats.Eq[cats.free.FreeT[cats.Eval,F,A]]", "kind" : "implicit def"}, {"label" : "run", "tail" : "(ft: FreeT[Eval, F, A])(arg0: Monad[F]): F[A]", "member" : "cats.effect.kernel.testkit.FreeSyncEq.run", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#run[F[_],A](ft:cats.free.FreeT[cats.Eval,F,A])(implicitevidence$1:cats.Monad[F]):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/freeEval$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.testkit.FreeSyncEq", "trait" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html", "kind" : "trait", "members_trait" : [{"label" : "eqFreeSync", "tail" : "(arg0: Monad[F], F: Eq[F[A]]): Eq[FreeT[Eval, F, A]]", "member" : "cats.effect.kernel.testkit.FreeSyncEq.eqFreeSync", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#eqFreeSync[F[_],A](implicitevidence$2:cats.Monad[F],implicitF:cats.Eq[F[A]]):cats.Eq[cats.free.FreeT[cats.Eval,F,A]]", "kind" : "implicit def"}, {"label" : "run", "tail" : "(ft: FreeT[Eval, F, A])(arg0: Monad[F]): F[A]", "member" : "cats.effect.kernel.testkit.FreeSyncEq.run", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#run[F[_],A](ft:cats.free.FreeT[cats.Eval,F,A])(implicitevidence$1:cats.Monad[F]):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncEq.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.FreeSyncGenerators", "shortDescription" : "", "object" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html", "members_object" : [{"label" : "arbitraryFreeSync", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A], F: MonadError[F, Throwable]): Arbitrary[FreeT[Eval, F, A]]", "member" : "cats.effect.kernel.testkit.FreeSyncGenerators.arbitraryFreeSync", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#arbitraryFreeSync[F[_],A](implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicitF:cats.MonadError[F,Throwable]):org.scalacheck.Arbitrary[cats.free.FreeT[cats.Eval,F,A]]", "kind" : "implicit def"}, {"label" : "generators", "tail" : "(F0: MonadError[F, Throwable]): SyncGenerators[[γ$0$]FreeT[Eval, F, γ$0$]]", "member" : "cats.effect.kernel.testkit.FreeSyncGenerators.generators", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#generators[F[_]](implicitF0:cats.MonadError[F,Throwable]):cats.effect.kernel.testkit.SyncGenerators[[γ$0$]cats.free.FreeT[cats.Eval,F,γ$0$]]", "kind" : "def"}, {"label" : "cogenFreeSync", "tail" : "(arg0: Monad[F], C: Cogen[F[A]]): Cogen[FreeT[Eval, F, A]]", "member" : "cats.effect.kernel.testkit.FreeSyncGenerators.cogenFreeSync", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#cogenFreeSync[F[_],A](implicitevidence$1:cats.Monad[F],implicitC:org.scalacheck.Cogen[F[A]]):org.scalacheck.Cogen[cats.free.FreeT[cats.Eval,F,A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/FreeSyncGenerators$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.testkit.Generators1", "trait" : "cats\/effect\/kernel\/testkit\/Generators1.html", "kind" : "trait", "members_trait" : [{"label" : "generators", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.Generators1.generators", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#generators[A](implicitevidence$11:org.scalacheck.Arbitrary[A],implicitevidence$12:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "def"}, {"label" : "recursiveGen", "tail" : "(deeper: GenK[F])(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.Generators1.recursiveGen", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#recursiveGen[A](deeper:cats.effect.kernel.testkit.GenK[F])(implicitevidence$5:org.scalacheck.Arbitrary[A],implicitevidence$6:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "baseGen", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.Generators1.baseGen", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#baseGen[A](implicitevidence$3:org.scalacheck.Arbitrary[A],implicitevidence$4:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "maxDepth", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.Generators1.maxDepth", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#maxDepth:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/Generators1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.GenK", "trait" : "cats\/effect\/kernel\/testkit\/GenK.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/GenK.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.GenK.apply", "link" : "cats\/effect\/kernel\/testkit\/GenK.html#apply[A](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.GenSpawnGenerators", "trait" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "recursiveGen", "tail" : "(deeper: GenK[F])(AA: Arbitrary[A], AC: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.GenSpawnGenerators.recursiveGen", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#recursiveGen[A](deeper:cats.effect.kernel.testkit.GenK[F])(implicitAA:org.scalacheck.Arbitrary[A],implicitAC:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "baseGen", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.GenSpawnGenerators.baseGen", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#baseGen[A](implicitevidence$45:org.scalacheck.Arbitrary[A],implicitevidence$46:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "generators", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.Generators1.generators", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#generators[A](implicitevidence$11:org.scalacheck.Arbitrary[A],implicitevidence$12:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "def"}, {"label" : "maxDepth", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.Generators1.maxDepth", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#maxDepth:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": GenSpawn[F, E]", "member" : "cats.effect.kernel.testkit.GenSpawnGenerators.F", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#F:cats.effect.kernel.GenSpawn[F,E]", "kind" : "implicit abstract val"}, {"label" : "cogenE", "tail" : ": Cogen[E]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.cogenE", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#cogenE:org.scalacheck.Cogen[E]", "kind" : "implicit abstract val"}, {"label" : "arbitraryE", "tail" : ": Arbitrary[E]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.arbitraryE", "link" : "cats\/effect\/kernel\/testkit\/GenSpawnGenerators.html#arbitraryE:org.scalacheck.Arbitrary[E]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.GenTemporalGenerators", "trait" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "baseGen", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.GenTemporalGenerators.baseGen", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#baseGen[A](implicitevidence$53:org.scalacheck.Arbitrary[A],implicitevidence$54:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "recursiveGen", "tail" : "(deeper: GenK[F])(AA: Arbitrary[A], AC: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.GenSpawnGenerators.recursiveGen", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#recursiveGen[A](deeper:cats.effect.kernel.testkit.GenK[F])(implicitAA:org.scalacheck.Arbitrary[A],implicitAC:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "generators", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.Generators1.generators", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#generators[A](implicitevidence$11:org.scalacheck.Arbitrary[A],implicitevidence$12:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "def"}, {"label" : "maxDepth", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.Generators1.maxDepth", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#maxDepth:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": GenTemporal[F, E]", "member" : "cats.effect.kernel.testkit.GenTemporalGenerators.F", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#F:cats.effect.kernel.GenTemporal[F,E]", "kind" : "implicit abstract val"}, {"label" : "arbitraryFD", "tail" : ": Arbitrary[FiniteDuration]", "member" : "cats.effect.kernel.testkit.ClockGenerators.arbitraryFD", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#arbitraryFD:org.scalacheck.Arbitrary[scala.concurrent.duration.FiniteDuration]", "kind" : "implicit abstract val"}, {"label" : "cogenE", "tail" : ": Cogen[E]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.cogenE", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#cogenE:org.scalacheck.Cogen[E]", "kind" : "implicit abstract val"}, {"label" : "arbitraryE", "tail" : ": Arbitrary[E]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.arbitraryE", "link" : "cats\/effect\/kernel\/testkit\/GenTemporalGenerators.html#arbitraryE:org.scalacheck.Arbitrary[E]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.MonadCancelGenerators", "trait" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "recursiveGen", "tail" : "(deeper: GenK[F])(AA: Arbitrary[A], AC: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.MonadCancelGenerators.recursiveGen", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#recursiveGen[A](deeper:cats.effect.kernel.testkit.GenK[F])(implicitAA:org.scalacheck.Arbitrary[A],implicitAC:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "baseGen", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.MonadCancelGenerators.baseGen", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#baseGen[A](implicitevidence$36:org.scalacheck.Arbitrary[A],implicitevidence$37:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "generators", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.Generators1.generators", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#generators[A](implicitevidence$11:org.scalacheck.Arbitrary[A],implicitevidence$12:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "def"}, {"label" : "maxDepth", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.Generators1.maxDepth", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#maxDepth:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": MonadCancel[F, E]", "member" : "cats.effect.kernel.testkit.MonadCancelGenerators.F", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#F:cats.effect.kernel.MonadCancel[F,E]", "kind" : "implicit abstract val"}, {"label" : "cogenE", "tail" : ": Cogen[E]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.cogenE", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#cogenE:org.scalacheck.Cogen[E]", "kind" : "implicit abstract val"}, {"label" : "arbitraryE", "tail" : ": Arbitrary[E]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.arbitraryE", "link" : "cats\/effect\/kernel\/testkit\/MonadCancelGenerators.html#arbitraryE:org.scalacheck.Arbitrary[E]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.MonadErrorGenerators", "trait" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "recursiveGen", "tail" : "(deeper: GenK[F])(AA: Arbitrary[A], AC: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.recursiveGen", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#recursiveGen[A](deeper:cats.effect.kernel.testkit.GenK[F])(implicitAA:org.scalacheck.Arbitrary[A],implicitAC:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "baseGen", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.baseGen", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#baseGen[A](implicitevidence$26:org.scalacheck.Arbitrary[A],implicitevidence$27:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "generators", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.Generators1.generators", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#generators[A](implicitevidence$11:org.scalacheck.Arbitrary[A],implicitevidence$12:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "def"}, {"label" : "maxDepth", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.Generators1.maxDepth", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#maxDepth:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": MonadError[F, E]", "member" : "cats.effect.kernel.testkit.MonadErrorGenerators.F", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#F:cats.MonadError[F,E]", "kind" : "implicit abstract val"}, {"label" : "cogenE", "tail" : ": Cogen[E]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.cogenE", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#cogenE:org.scalacheck.Cogen[E]", "kind" : "implicit abstract val"}, {"label" : "arbitraryE", "tail" : ": Arbitrary[E]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.arbitraryE", "link" : "cats\/effect\/kernel\/testkit\/MonadErrorGenerators.html#arbitraryE:org.scalacheck.Arbitrary[E]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.MonadGenerators", "trait" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "recursiveGen", "tail" : "(deeper: GenK[F])(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.MonadGenerators.recursiveGen", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#recursiveGen[A](deeper:cats.effect.kernel.testkit.GenK[F])(implicitevidence$22:org.scalacheck.Arbitrary[A],implicitevidence$23:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "baseGen", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.ApplicativeGenerators.baseGen", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#baseGen[A](implicitevidence$13:org.scalacheck.Arbitrary[A],implicitevidence$14:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "generators", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.Generators1.generators", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#generators[A](implicitevidence$11:org.scalacheck.Arbitrary[A],implicitevidence$12:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "def"}, {"label" : "maxDepth", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.Generators1.maxDepth", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#maxDepth:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": Monad[F]", "member" : "cats.effect.kernel.testkit.MonadGenerators.F", "link" : "cats\/effect\/kernel\/testkit\/MonadGenerators.html#F:cats.Monad[F]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.OutcomeGenerators", "object" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html", "members_object" : [{"label" : "cogenOutcome", "tail" : "(arg0: Cogen[E], A: Cogen[F[A]]): Cogen[Outcome[F, E, A]]", "member" : "cats.effect.kernel.testkit.OutcomeGenerators.cogenOutcome", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#cogenOutcome[F[_],E,A](implicitevidence$71:org.scalacheck.Cogen[E],implicitA:org.scalacheck.Cogen[F[A]]):org.scalacheck.Cogen[cats.effect.kernel.Outcome[F,E,A]]", "kind" : "implicit def"}, {"label" : "arbitraryOutcome", "tail" : "(arg0: Applicative[F], arg1: Arbitrary[E], arg2: Cogen[E], arg3: Arbitrary[A], arg4: Cogen[A]): Arbitrary[Outcome[F, E, A]]", "member" : "cats.effect.kernel.testkit.OutcomeGenerators.arbitraryOutcome", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#arbitraryOutcome[F[_],E,A](implicitevidence$66:cats.Applicative[F],implicitevidence$67:org.scalacheck.Arbitrary[E],implicitevidence$68:org.scalacheck.Cogen[E],implicitevidence$69:org.scalacheck.Arbitrary[A],implicitevidence$70:org.scalacheck.Cogen[A]):org.scalacheck.Arbitrary[cats.effect.kernel.Outcome[F,E,A]]", "kind" : "implicit def"}, {"label" : "outcomeGenerators", "tail" : "(arg0: Applicative[F], arg1: Arbitrary[E], arg2: Cogen[E]): ApplicativeErrorGenerators[[γ$0$]Outcome[F, E, γ$0$], E]", "member" : "cats.effect.kernel.testkit.OutcomeGenerators.outcomeGenerators", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#outcomeGenerators[F[_],E](implicitevidence$61:cats.Applicative[F],implicitevidence$62:org.scalacheck.Arbitrary[E],implicitevidence$63:org.scalacheck.Cogen[E]):cats.effect.kernel.testkit.ApplicativeErrorGenerators[[γ$0$]cats.effect.kernel.Outcome[F,E,γ$0$],E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "cogenOutcome", "tail" : "(arg0: Cogen[E], A: Cogen[F[A]]): Cogen[Outcome[F, E, A]]", "member" : "cats.effect.kernel.testkit.OutcomeGenerators.cogenOutcome", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#cogenOutcome[F[_],E,A](implicitevidence$71:org.scalacheck.Cogen[E],implicitA:org.scalacheck.Cogen[F[A]]):org.scalacheck.Cogen[cats.effect.kernel.Outcome[F,E,A]]", "kind" : "implicit def"}, {"label" : "arbitraryOutcome", "tail" : "(arg0: Applicative[F], arg1: Arbitrary[E], arg2: Cogen[E], arg3: Arbitrary[A], arg4: Cogen[A]): Arbitrary[Outcome[F, E, A]]", "member" : "cats.effect.kernel.testkit.OutcomeGenerators.arbitraryOutcome", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#arbitraryOutcome[F[_],E,A](implicitevidence$66:cats.Applicative[F],implicitevidence$67:org.scalacheck.Arbitrary[E],implicitevidence$68:org.scalacheck.Cogen[E],implicitevidence$69:org.scalacheck.Arbitrary[A],implicitevidence$70:org.scalacheck.Cogen[A]):org.scalacheck.Arbitrary[cats.effect.kernel.Outcome[F,E,A]]", "kind" : "implicit def"}, {"label" : "outcomeGenerators", "tail" : "(arg0: Applicative[F], arg1: Arbitrary[E], arg2: Cogen[E]): ApplicativeErrorGenerators[[γ$0$]Outcome[F, E, γ$0$], E]", "member" : "cats.effect.kernel.testkit.OutcomeGenerators.outcomeGenerators", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#outcomeGenerators[F[_],E](implicitevidence$61:cats.Applicative[F],implicitevidence$62:org.scalacheck.Arbitrary[E],implicitevidence$63:org.scalacheck.Cogen[E]):cats.effect.kernel.testkit.ApplicativeErrorGenerators[[γ$0$]cats.effect.kernel.Outcome[F,E,γ$0$],E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/OutcomeGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.ParallelFGenerators", "object" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html", "members_object" : [{"label" : "eqParallelF", "tail" : "(EqF: Eq[F[A]]): Eq[ParallelF[F, A]]", "member" : "cats.effect.kernel.testkit.ParallelFGenerators.eqParallelF", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#eqParallelF[F[_],A](implicitEqF:cats.Eq[F[A]]):cats.Eq[cats.effect.kernel.ParallelF[F,A]]", "kind" : "implicit def"}, {"label" : "arbitraryParallelF", "tail" : "(ArbF: Arbitrary[F[A]]): Arbitrary[ParallelF[F, A]]", "member" : "cats.effect.kernel.testkit.ParallelFGenerators.arbitraryParallelF", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#arbitraryParallelF[F[_],A](implicitArbF:org.scalacheck.Arbitrary[F[A]]):org.scalacheck.Arbitrary[cats.effect.kernel.ParallelF[F,A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "eqParallelF", "tail" : "(EqF: Eq[F[A]]): Eq[ParallelF[F, A]]", "member" : "cats.effect.kernel.testkit.ParallelFGenerators.eqParallelF", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#eqParallelF[F[_],A](implicitEqF:cats.Eq[F[A]]):cats.Eq[cats.effect.kernel.ParallelF[F,A]]", "kind" : "implicit def"}, {"label" : "arbitraryParallelF", "tail" : "(ArbF: Arbitrary[F[A]]): Arbitrary[ParallelF[F, A]]", "member" : "cats.effect.kernel.testkit.ParallelFGenerators.arbitraryParallelF", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#arbitraryParallelF[F[_],A](implicitArbF:org.scalacheck.Arbitrary[F[A]]):org.scalacheck.Arbitrary[cats.effect.kernel.ParallelF[F,A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/ParallelFGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.pure", "shortDescription" : "", "object" : "cats\/effect\/kernel\/testkit\/pure$.html", "members_object" : [{"label" : "PureFiber", "tail" : "", "member" : "cats.effect.kernel.testkit.pure.PureFiber", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#PureFiber[E,A]extendsFiber[[β$60$]cats.data.Kleisli[[β$2$]cats.free.FreeT[coop.ThreadF,[β$1$]cats.data.Kleisli[[β$0$]cats.effect.kernel.Outcome[[A]A,E,β$0$],cats.effect.kernel.testkit.pure.FiberCtx[E],β$1$],β$2$],coop.UnsafeRef[scala.collection.immutable.Map[coop.MVar[Any],Any]],β$60$],E,A]", "kind" : "final class"}, {"label" : "showPureConc", "tail" : "(arg0: Show[E], arg1: Show[A]): Show[PureConc[E, A]]", "member" : "cats.effect.kernel.testkit.pure.showPureConc", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#showPureConc[E,A](implicitevidence$5:cats.Show[E],implicitevidence$6:cats.Show[A]):cats.Show[cats.effect.kernel.testkit.pure.PureConc[E,A]]", "kind" : "implicit def"}, {"label" : "eqPureConc", "tail" : "(arg0: Eq[E], arg1: Eq[A]): Eq[PureConc[E, A]]", "member" : "cats.effect.kernel.testkit.pure.eqPureConc", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#eqPureConc[E,A](implicitevidence$3:cats.Eq[E],implicitevidence$4:cats.Eq[A]):cats.Eq[cats.effect.kernel.testkit.pure.PureConc[E,A]]", "kind" : "implicit def"}, {"label" : "allocateForPureConc", "tail" : "(): GenConcurrent[[β$23$]Kleisli[[β$2$]FreeT[ThreadF, [β$1$]Kleisli[[β$0$]Outcome[[A]A, E, β$0$], FiberCtx[E], β$1$], β$2$], UnsafeRef[Map[MVar[Any], Any]], β$23$], E]", "member" : "cats.effect.kernel.testkit.pure.allocateForPureConc", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#allocateForPureConc[E]:cats.effect.kernel.GenConcurrent[[β$23$]cats.data.Kleisli[[β$2$]cats.free.FreeT[coop.ThreadF,[β$1$]cats.data.Kleisli[[β$0$]cats.effect.kernel.Outcome[[A]A,E,β$0$],cats.effect.kernel.testkit.pure.FiberCtx[E],β$1$],β$2$],coop.UnsafeRef[scala.collection.immutable.Map[coop.MVar[Any],Any]],β$23$],E]", "kind" : "implicit def"}, {"label" : "orderForPureConc", "tail" : "(arg0: Order[E], arg1: Order[A]): Order[PureConc[E, A]]", "member" : "cats.effect.kernel.testkit.pure.orderForPureConc", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#orderForPureConc[E,A](implicitevidence$1:cats.Order[E],implicitevidence$2:cats.Order[A]):cats.Order[cats.effect.kernel.testkit.pure.PureConc[E,A]]", "kind" : "implicit def"}, {"label" : "run", "tail" : "(pc: PureConc[E, A]): Outcome[Option, E, A]", "member" : "cats.effect.kernel.testkit.pure.run", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#run[E,A](pc:cats.effect.kernel.testkit.pure.PureConc[E,A]):cats.effect.kernel.Outcome[Option,E,A]", "kind" : "def"}, {"label" : "resolveMain", "tail" : "(pc: PureConc[E, A]): ResolvedPC[E, IdOC[E, A]]", "member" : "cats.effect.kernel.testkit.pure.resolveMain", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#resolveMain[E,A](pc:cats.effect.kernel.testkit.pure.PureConc[E,A]):cats.effect.kernel.testkit.pure.ResolvedPC[E,cats.effect.kernel.testkit.pure.IdOC[E,A]]", "kind" : "def"}, {"label" : "monadErrorIdOC", "tail" : "(): MonadError[[β$4$]Outcome[[A]A, E, β$4$], E]", "member" : "cats.effect.kernel.testkit.pure.monadErrorIdOC", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#monadErrorIdOC[E]:cats.MonadError[[β$4$]cats.effect.kernel.Outcome[[A]A,E,β$4$],E]", "kind" : "implicit def"}, {"label" : "ResolvedPC", "tail" : "", "member" : "cats.effect.kernel.testkit.pure.ResolvedPC", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#ResolvedPC[E,A]=coop.ThreadT[[β$3$]cats.effect.kernel.Outcome[[A]A,E,β$3$],A]", "kind" : "type"}, {"label" : "FiberCtx", "tail" : "", "member" : "cats.effect.kernel.testkit.pure.FiberCtx", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#FiberCtx[E]extendsProductwithSerializable", "kind" : "final case class"}, {"label" : "MaskId", "tail" : "", "member" : "cats.effect.kernel.testkit.pure.MaskId", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#MaskId", "kind" : "object"}, {"label" : "MaskId", "tail" : "", "member" : "cats.effect.kernel.testkit.pure.MaskId", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#MaskIdextendsAnyRef", "kind" : "final class"}, {"label" : "Finalizer", "tail" : "", "member" : "cats.effect.kernel.testkit.pure.Finalizer", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#Finalizer[E]=cats.effect.kernel.testkit.pure.PureConc[E,Unit]", "kind" : "type"}, {"label" : "PureConc", "tail" : "", "member" : "cats.effect.kernel.testkit.pure.PureConc", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#PureConc[E,A]=cats.effect.kernel.testkit.pure.MVarR[[β$2$]cats.free.FreeT[coop.ThreadF,[β$1$]cats.data.Kleisli[[β$0$]cats.effect.kernel.Outcome[[A]A,E,β$0$],cats.effect.kernel.testkit.pure.FiberCtx[E],β$1$],β$2$],A]", "kind" : "type"}, {"label" : "MVarR", "tail" : "", "member" : "cats.effect.kernel.testkit.pure.MVarR", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#MVarR[F[_],A]=cats.data.Kleisli[F,coop.MVar.Universe,A]", "kind" : "type"}, {"label" : "FiberR", "tail" : "", "member" : "cats.effect.kernel.testkit.pure.FiberR", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#FiberR[E,A]=cats.data.Kleisli[[β$0$]cats.effect.kernel.Outcome[[A]A,E,β$0$],cats.effect.kernel.testkit.pure.FiberCtx[E],A]", "kind" : "type"}, {"label" : "IdOC", "tail" : "", "member" : "cats.effect.kernel.testkit.pure.IdOC", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#IdOC[E,A]=cats.effect.kernel.Outcome[cats.Id,E,A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/pure$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/pure$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.testkit.PureConcGenerators", "shortDescription" : "", "object" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html", "members_object" : [{"label" : "arbitraryPureConc", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E], arg2: Arbitrary[A], arg3: Cogen[A]): Arbitrary[PureConc[E, A]]", "member" : "cats.effect.kernel.testkit.PureConcGenerators.arbitraryPureConc", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#arbitraryPureConc[E,A](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitevidence$9:org.scalacheck.Cogen[E],implicitevidence$10:org.scalacheck.Arbitrary[A],implicitevidence$11:org.scalacheck.Cogen[A]):org.scalacheck.Arbitrary[cats.effect.kernel.testkit.pure.PureConc[E,A]]", "kind" : "implicit def"}, {"label" : "generators", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[E]): GenSpawnGenerators[[β$0$]Kleisli[[β$2$]FreeT[ThreadF, [β$1$]Kleisli[[β$0$]Outcome[[A]A, E, β$0$], FiberCtx[E], β$1$], β$2$], UnsafeRef[Map[MVar[Any], Any]], β$0$], E] { def cogenCase[A](implicit evidence$5: org.scalacheck.Cogen[A]): org.scalacheck.Cogen[cats.effect.kernel.Outcome[[β$2$]cats.data.Kleisli[[β$2$]cats.free.FreeT[coop.ThreadF,[β$1$]cats.data.Kleisli[[β$0$]cats.effect.kernel.Outcome[[A]A,E,β$0$],cats.effect.kernel.testkit.pure.FiberCtx[E],β$1$],β$2$],coop.UnsafeRef[scala.collection.immutable.Map[coop.MVar[Any],Any]],β$2$],E,A]] }", "member" : "cats.effect.kernel.testkit.PureConcGenerators.generators", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#generators[E](implicitevidence$3:org.scalacheck.Arbitrary[E],implicitevidence$4:org.scalacheck.Cogen[E]):cats.effect.kernel.testkit.GenSpawnGenerators[[β$0$]cats.data.Kleisli[[β$2$]cats.free.FreeT[coop.ThreadF,[β$1$]cats.data.Kleisli[[β$0$]cats.effect.kernel.Outcome[[A]A,E,β$0$],cats.effect.kernel.testkit.pure.FiberCtx[E],β$1$],β$2$],coop.UnsafeRef[scala.collection.immutable.Map[coop.MVar[Any],Any]],β$0$],E]{defcogenCase[A](implicitevidence$5:org.scalacheck.Cogen[A]):org.scalacheck.Cogen[cats.effect.kernel.Outcome[[β$2$]cats.data.Kleisli[[β$2$]cats.free.FreeT[coop.ThreadF,[β$1$]cats.data.Kleisli[[β$0$]cats.effect.kernel.Outcome[[A]A,E,β$0$],cats.effect.kernel.testkit.pure.FiberCtx[E],β$1$],β$2$],coop.UnsafeRef[scala.collection.immutable.Map[coop.MVar[Any],Any]],β$2$],E,A]]}", "kind" : "def"}, {"label" : "cogenPureConc", "tail" : "(arg0: Cogen[E], arg1: Cogen[A]): Cogen[PureConc[E, A]]", "member" : "cats.effect.kernel.testkit.PureConcGenerators.cogenPureConc", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#cogenPureConc[E,A](implicitevidence$1:org.scalacheck.Cogen[E],implicitevidence$2:org.scalacheck.Cogen[A]):org.scalacheck.Cogen[cats.effect.kernel.testkit.pure.PureConc[E,A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/PureConcGenerators$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.testkit.SyncGenerators", "trait" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "baseGen", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.SyncGenerators.baseGen", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#baseGen[A](implicitevidence$34:org.scalacheck.Arbitrary[A],implicitevidence$35:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "recursiveGen", "tail" : "(deeper: GenK[F])(AA: Arbitrary[A], AC: Cogen[A]): List[(String, Gen[F[A]])]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.recursiveGen", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#recursiveGen[A](deeper:cats.effect.kernel.testkit.GenK[F])(implicitAA:org.scalacheck.Arbitrary[A],implicitAC:org.scalacheck.Cogen[A]):List[(String,org.scalacheck.Gen[F[A]])]", "kind" : "def"}, {"label" : "generators", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Gen[F[A]]", "member" : "cats.effect.kernel.testkit.Generators1.generators", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#generators[A](implicitevidence$11:org.scalacheck.Arbitrary[A],implicitevidence$12:org.scalacheck.Cogen[A]):org.scalacheck.Gen[F[A]]", "kind" : "def"}, {"label" : "maxDepth", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.Generators1.maxDepth", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#maxDepth:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": Sync[F]", "member" : "cats.effect.kernel.testkit.SyncGenerators.F", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#F:cats.effect.kernel.Sync[F]", "kind" : "implicit abstract val"}, {"label" : "arbitraryFD", "tail" : ": Arbitrary[FiniteDuration]", "member" : "cats.effect.kernel.testkit.ClockGenerators.arbitraryFD", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#arbitraryFD:org.scalacheck.Arbitrary[scala.concurrent.duration.FiniteDuration]", "kind" : "implicit abstract val"}, {"label" : "cogenE", "tail" : ": Cogen[Throwable]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.cogenE", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#cogenE:org.scalacheck.Cogen[E]", "kind" : "implicit abstract val"}, {"label" : "arbitraryE", "tail" : ": Arbitrary[Throwable]", "member" : "cats.effect.kernel.testkit.ApplicativeErrorGenerators.arbitraryE", "link" : "cats\/effect\/kernel\/testkit\/SyncGenerators.html#arbitraryE:org.scalacheck.Arbitrary[E]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.SyncTypeGenerators", "object" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html", "members_object" : [{"label" : "cogenSyncType", "tail" : ": Cogen[Type]", "member" : "cats.effect.kernel.testkit.SyncTypeGenerators.cogenSyncType", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#cogenSyncType:org.scalacheck.Cogen[cats.effect.kernel.Sync.Type]", "kind" : "implicit val"}, {"label" : "arbitrarySyncType", "tail" : ": Arbitrary[Type]", "member" : "cats.effect.kernel.testkit.SyncTypeGenerators.arbitrarySyncType", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#arbitrarySyncType:org.scalacheck.Arbitrary[cats.effect.kernel.Sync.Type]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "cogenSyncType", "tail" : ": Cogen[Type]", "member" : "cats.effect.kernel.testkit.SyncTypeGenerators.cogenSyncType", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#cogenSyncType:org.scalacheck.Cogen[cats.effect.kernel.Sync.Type]", "kind" : "implicit val"}, {"label" : "arbitrarySyncType", "tail" : ": Arbitrary[Type]", "member" : "cats.effect.kernel.testkit.SyncTypeGenerators.arbitrarySyncType", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#arbitrarySyncType:org.scalacheck.Arbitrary[cats.effect.kernel.Sync.Type]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/SyncTypeGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.testkit.TestContext", "shortDescription" : "A scala.concurrent.ExecutionContext implementation and a providerof cats.effect.Timer instances, that can simulate async boundariesand time passage, useful for testing purposes.", "object" : "cats\/effect\/kernel\/testkit\/TestContext$.html", "members_class" : [{"label" : "now", "tail" : "(): FiniteDuration", "member" : "cats.effect.kernel.testkit.TestContext.now", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#now():scala.concurrent.duration.FiniteDuration", "kind" : "def"}, {"label" : "derive", "tail" : "(): ExecutionContext", "member" : "cats.effect.kernel.testkit.TestContext.derive", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#derive():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "schedule", "tail" : "(delay: FiniteDuration, r: Runnable): () => Unit", "member" : "cats.effect.kernel.testkit.TestContext.schedule", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#schedule(delay:scala.concurrent.duration.FiniteDuration,r:Runnable):()=>Unit", "kind" : "def"}, {"label" : "tickAll", "tail" : "(time: FiniteDuration): Unit", "member" : "cats.effect.kernel.testkit.TestContext.tickAll", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#tickAll(time:scala.concurrent.duration.FiniteDuration):Unit", "kind" : "def"}, {"label" : "tick", "tail" : "(time: FiniteDuration): Unit", "member" : "cats.effect.kernel.testkit.TestContext.tick", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#tick(time:scala.concurrent.duration.FiniteDuration):Unit", "kind" : "def"}, {"label" : "tickOne", "tail" : "(): Boolean", "member" : "cats.effect.kernel.testkit.TestContext.tickOne", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#tickOne():Boolean", "kind" : "def"}, {"label" : "state", "tail" : "(): State", "member" : "cats.effect.kernel.testkit.TestContext.state", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#state:cats.effect.kernel.testkit.TestContext.State", "kind" : "def"}, {"label" : "reportFailure", "tail" : "(cause: Throwable): Unit", "member" : "cats.effect.kernel.testkit.TestContext.reportFailure", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#reportFailure(cause:Throwable):Unit", "kind" : "def"}, {"label" : "execute", "tail" : "(r: Runnable): Unit", "member" : "cats.effect.kernel.testkit.TestContext.execute", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#execute(r:Runnable):Unit", "kind" : "def"}, {"label" : "prepare", "tail" : "(): ExecutionContext", "member" : "scala.concurrent.ExecutionContext.prepare", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#prepare():scala.concurrent.ExecutionContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/TestContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Task", "tail" : "", "member" : "cats.effect.kernel.testkit.TestContext.Task", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#TaskextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "State", "tail" : "", "member" : "cats.effect.kernel.testkit.TestContext.State", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#StateextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "apply", "tail" : "(): TestContext", "member" : "cats.effect.kernel.testkit.TestContext.apply", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#apply():cats.effect.kernel.testkit.TestContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/TestContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/testkit\/TestContext.html", "kind" : "class"}, {"name" : "cats.effect.kernel.testkit.TestException", "shortDescription" : "", "members_case class" : [{"member" : "cats.effect.kernel.testkit.TestException#<init>", "error" : "unsupported entity"}, {"label" : "i", "tail" : ": Int", "member" : "cats.effect.kernel.testkit.TestException.i", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#i:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/testkit\/TestException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/testkit\/TestException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cats\/effect\/kernel\/testkit\/TestException.html", "kind" : "case class"}], "cats" : [], "cats.effect.kernel" : [{"name" : "cats.effect.kernel.Async", "object" : "cats\/effect\/kernel\/Async$.html", "members_object" : [{"label" : "asyncForKleisli", "tail" : "(F0: Async[F]): Async[[γ$4$]Kleisli[F, R, γ$4$]]", "member" : "cats.effect.kernel.Async.asyncForKleisli", "link" : "cats\/effect\/kernel\/Async$.html#asyncForKleisli[F[_],R](implicitF0:cats.effect.kernel.Async[F]):cats.effect.kernel.Async[[γ$4$]cats.data.Kleisli[F,R,γ$4$]]", "kind" : "implicit def"}, {"label" : "asyncForWriterT", "tail" : "(F0: Async[F], L0: Monoid[L]): Async[[γ$3$]WriterT[F, L, γ$3$]]", "member" : "cats.effect.kernel.Async.asyncForWriterT", "link" : "cats\/effect\/kernel\/Async$.html#asyncForWriterT[F[_],L](implicitF0:cats.effect.kernel.Async[F],implicitL0:cats.Monoid[L]):cats.effect.kernel.Async[[γ$3$]cats.data.WriterT[F,L,γ$3$]]", "kind" : "implicit def"}, {"label" : "asyncForIorT", "tail" : "(F0: Async[F], L0: Semigroup[L]): Async[[γ$2$]IorT[F, L, γ$2$]]", "member" : "cats.effect.kernel.Async.asyncForIorT", "link" : "cats\/effect\/kernel\/Async$.html#asyncForIorT[F[_],L](implicitF0:cats.effect.kernel.Async[F],implicitL0:cats.Semigroup[L]):cats.effect.kernel.Async[[γ$2$]cats.data.IorT[F,L,γ$2$]]", "kind" : "implicit def"}, {"label" : "asyncForEitherT", "tail" : "(F0: Async[F]): Async[[γ$1$]EitherT[F, E, γ$1$]]", "member" : "cats.effect.kernel.Async.asyncForEitherT", "link" : "cats\/effect\/kernel\/Async$.html#asyncForEitherT[F[_],E](implicitF0:cats.effect.kernel.Async[F]):cats.effect.kernel.Async[[γ$1$]cats.data.EitherT[F,E,γ$1$]]", "kind" : "implicit def"}, {"label" : "asyncForOptionT", "tail" : "(F0: Async[F]): Async[[β$0$]OptionT[F, β$0$]]", "member" : "cats.effect.kernel.Async.asyncForOptionT", "link" : "cats\/effect\/kernel\/Async$.html#asyncForOptionT[F[_]](implicitF0:cats.effect.kernel.Async[F]):cats.effect.kernel.Async[[β$0$]cats.data.OptionT[F,β$0$]]", "kind" : "implicit def"}, {"label" : "defaultCont", "tail" : "(body: Cont[F, K, R])(F: Async[F]): F[R]", "member" : "cats.effect.kernel.Async.defaultCont", "link" : "cats\/effect\/kernel\/Async$.html#defaultCont[F[_],K,R](body:cats.effect.kernel.Cont[F,K,R])(implicitF:cats.effect.kernel.Async[F]):F[R]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: Async[F]): F.type", "member" : "cats.effect.kernel.Async.apply", "link" : "cats\/effect\/kernel\/Async$.html#apply[F[_]](implicitF:cats.effect.kernel.Async[F]):F.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Async$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Async$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Async$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Async$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Async$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Async$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Async$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Async$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Async$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Async$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Async$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Async$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Async$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Async$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Async$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Async$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Async$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Async$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Async$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/Async.html", "kind" : "trait", "members_trait" : [{"label" : "fromFuture", "tail" : "(fut: F[Future[A]]): F[A]", "member" : "cats.effect.kernel.Async.fromFuture", "link" : "cats\/effect\/kernel\/Async.html#fromFuture[A](fut:F[scala.concurrent.Future[A]]):F[A]", "kind" : "def"}, {"label" : "backgroundOn", "tail" : "(fa: F[A], ec: ExecutionContext): Resource[F, F[Outcome[F, Throwable, A]]]", "member" : "cats.effect.kernel.Async.backgroundOn", "link" : "cats\/effect\/kernel\/Async.html#backgroundOn[A](fa:F[A],ec:scala.concurrent.ExecutionContext):cats.effect.kernel.Resource[F,F[cats.effect.kernel.Outcome[F,Throwable,A]]]", "kind" : "def"}, {"label" : "startOn", "tail" : "(fa: F[A], ec: ExecutionContext): F[Fiber[F, Throwable, A]]", "member" : "cats.effect.kernel.Async.startOn", "link" : "cats\/effect\/kernel\/Async.html#startOn[A](fa:F[A],ec:scala.concurrent.ExecutionContext):F[cats.effect.kernel.Fiber[F,Throwable,A]]", "kind" : "def"}, {"label" : "evalOnK", "tail" : "(ec: ExecutionContext): ~>[F, F]", "member" : "cats.effect.kernel.Async.evalOnK", "link" : "cats\/effect\/kernel\/Async.html#evalOnK(ec:scala.concurrent.ExecutionContext):F~>F", "kind" : "def"}, {"label" : "never", "tail" : "(): F[A]", "member" : "cats.effect.kernel.Async.never", "link" : "cats\/effect\/kernel\/Async.html#never[A]:F[A]", "kind" : "def"}, {"label" : "async_", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): F[A]", "member" : "cats.effect.kernel.Async.async_", "link" : "cats\/effect\/kernel\/Async.html#async_[A](k:(Either[Throwable,A]=>Unit)=>Unit):F[A]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => F[Option[F[Unit]]]): F[A]", "member" : "cats.effect.kernel.Async.async", "link" : "cats\/effect\/kernel\/Async.html#async[A](k:(Either[Throwable,A]=>Unit)=>F[Option[F[Unit]]]):F[A]", "kind" : "def"}, {"label" : "timeout", "tail" : "(fa: F[A], duration: FiniteDuration)(ev: <:<[TimeoutException, Throwable]): F[A]", "member" : "cats.effect.kernel.GenTemporal.timeout", "link" : "cats\/effect\/kernel\/Async.html#timeout[A](fa:F[A],duration:scala.concurrent.duration.FiniteDuration)(implicitev:concurrent.TimeoutException<:<E):F[A]", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(fa: F[A], duration: FiniteDuration, fallback: F[A]): F[A]", "member" : "cats.effect.kernel.GenTemporal.timeoutTo", "link" : "cats\/effect\/kernel\/Async.html#timeoutTo[A](fa:F[A],duration:scala.concurrent.duration.FiniteDuration,fallback:F[A]):F[A]", "kind" : "def"}, {"label" : "andWait", "tail" : "(fa: F[A], time: FiniteDuration): F[A]", "member" : "cats.effect.kernel.GenTemporal.andWait", "link" : "cats\/effect\/kernel\/Async.html#andWait[A](fa:F[A],time:scala.concurrent.duration.FiniteDuration):F[A]", "kind" : "def"}, {"label" : "delayBy", "tail" : "(fa: F[A], time: FiniteDuration): F[A]", "member" : "cats.effect.kernel.GenTemporal.delayBy", "link" : "cats\/effect\/kernel\/Async.html#delayBy[A](fa:F[A],time:scala.concurrent.duration.FiniteDuration):F[A]", "kind" : "def"}, {"label" : "applicative", "tail" : "(): Applicative[F]", "member" : "cats.effect.kernel.GenTemporal.applicative", "link" : "cats\/effect\/kernel\/Async.html#applicative:cats.Applicative[F]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: F[A], fb: F[B]): F[Either[(Outcome[F, Throwable, A], Fiber[F, Throwable, B]), (Fiber[F, Throwable, A], Outcome[F, Throwable, B])]]", "member" : "cats.effect.kernel.GenConcurrent.racePair", "link" : "cats\/effect\/kernel\/Async.html#racePair[A,B](fa:F[A],fb:F[B]):F[Either[(cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Fiber[F,E,B]),(cats.effect.kernel.Fiber[F,E,A],cats.effect.kernel.Outcome[F,E,B])]]", "kind" : "def"}, {"label" : "parTraverseN", "tail" : "(n: Int)(ta: T[A])(f: (A) => F[B])(arg0: Traverse[T]): F[T[B]]", "member" : "cats.effect.kernel.GenConcurrent.parTraverseN", "link" : "cats\/effect\/kernel\/Async.html#parTraverseN[T[_],A,B](n:Int)(ta:T[A])(f:A=>F[B])(implicitevidence$2:cats.Traverse[T]):F[T[B]]", "kind" : "def"}, {"label" : "parSequenceN", "tail" : "(n: Int)(tma: T[F[A]])(arg0: Traverse[T]): F[T[A]]", "member" : "cats.effect.kernel.GenConcurrent.parSequenceN", "link" : "cats\/effect\/kernel\/Async.html#parSequenceN[T[_],A](n:Int)(tma:T[F[A]])(implicitevidence$1:cats.Traverse[T]):F[T[A]]", "kind" : "def"}, {"label" : "memoize", "tail" : "(fa: F[A]): F[F[A]]", "member" : "cats.effect.kernel.GenConcurrent.memoize", "link" : "cats\/effect\/kernel\/Async.html#memoize[A](fa:F[A]):F[F[A]]", "kind" : "def"}, {"label" : "both", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.effect.kernel.GenSpawn.both", "link" : "cats\/effect\/kernel\/Async.html#both[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "bothOutcome", "tail" : "(fa: F[A], fb: F[B]): F[(Outcome[F, Throwable, A], Outcome[F, Throwable, B])]", "member" : "cats.effect.kernel.GenSpawn.bothOutcome", "link" : "cats\/effect\/kernel\/Async.html#bothOutcome[A,B](fa:F[A],fb:F[B]):F[(cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Outcome[F,E,B])]", "kind" : "def"}, {"label" : "race", "tail" : "(fa: F[A], fb: F[B]): F[Either[A, B]]", "member" : "cats.effect.kernel.GenSpawn.race", "link" : "cats\/effect\/kernel\/Async.html#race[A,B](fa:F[A],fb:F[B]):F[Either[A,B]]", "kind" : "def"}, {"label" : "raceOutcome", "tail" : "(fa: F[A], fb: F[B]): F[Either[Outcome[F, Throwable, A], Outcome[F, Throwable, B]]]", "member" : "cats.effect.kernel.GenSpawn.raceOutcome", "link" : "cats\/effect\/kernel\/Async.html#raceOutcome[A,B](fa:F[A],fb:F[B]):F[Either[cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Outcome[F,E,B]]]", "kind" : "def"}, {"label" : "background", "tail" : "(fa: F[A]): Resource[F, F[Outcome[F, Throwable, A]]]", "member" : "cats.effect.kernel.GenSpawn.background", "link" : "cats\/effect\/kernel\/Async.html#background[A](fa:F[A]):cats.effect.kernel.Resource[F,F[cats.effect.kernel.Outcome[F,E,A]]]", "kind" : "def"}, {"label" : "rootCancelScope", "tail" : "(): CancelScope", "member" : "cats.effect.kernel.GenSpawn.rootCancelScope", "link" : "cats\/effect\/kernel\/Async.html#rootCancelScope:cats.effect.kernel.CancelScope", "kind" : "final def"}, {"label" : "interruptible", "tail" : "(many: Boolean)(thunk: => A): F[A]", "member" : "cats.effect.kernel.Sync.interruptible", "link" : "cats\/effect\/kernel\/Async.html#interruptible[A](many:Boolean)(thunk:=>A):F[A]", "kind" : "def"}, {"label" : "blocking", "tail" : "(thunk: => A): F[A]", "member" : "cats.effect.kernel.Sync.blocking", "link" : "cats\/effect\/kernel\/Async.html#blocking[A](thunk:=>A):F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(thunk: => F[A]): F[A]", "member" : "cats.effect.kernel.Sync.defer", "link" : "cats\/effect\/kernel\/Async.html#defer[A](thunk:=>F[A]):F[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): F[A]", "member" : "cats.effect.kernel.Sync.delay", "link" : "cats\/effect\/kernel\/Async.html#delay[A](thunk:=>A):F[A]", "kind" : "def"}, {"label" : "unique", "tail" : "(): F[Token]", "member" : "cats.effect.kernel.Sync.unique", "link" : "cats\/effect\/kernel\/Async.html#unique:F[cats.effect.kernel.Unique.Token]", "kind" : "def"}, {"label" : "fix", "tail" : "(fn: (F[A]) => F[A]): F[A]", "member" : "cats.Defer.fix", "link" : "cats\/effect\/kernel\/Async.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "timed", "tail" : "(fa: F[A]): F[(FiniteDuration, A)]", "member" : "cats.effect.kernel.Clock.timed", "link" : "cats\/effect\/kernel\/Async.html#timed[A](fa:F[A]):F[(scala.concurrent.duration.FiniteDuration,A)]", "kind" : "def"}, {"label" : "realTimeInstant", "tail" : "(): F[Instant]", "member" : "cats.effect.kernel.ClockPlatform.realTimeInstant", "link" : "cats\/effect\/kernel\/Async.html#realTimeInstant:F[java.time.Instant]", "kind" : "def"}, {"label" : "bracketFull", "tail" : "(acquire: (Poll[F]) => F[A])(use: (A) => F[B])(release: (A, Outcome[F, Throwable, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketFull", "link" : "cats\/effect\/kernel\/Async.html#bracketFull[A,B](acquire:cats.effect.kernel.Poll[F]=>F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A, Outcome[F, Throwable, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketCase", "link" : "cats\/effect\/kernel\/Async.html#bracketCase[A,B](acquire:F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracket", "link" : "cats\/effect\/kernel\/Async.html#bracket[A,B](acquire:F[A])(use:A=>F[B])(release:A=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: F[A])(fin: (Outcome[F, Throwable, A]) => F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guaranteeCase", "link" : "cats\/effect\/kernel\/Async.html#guaranteeCase[A](fa:F[A])(fin:cats.effect.kernel.Outcome[F,E,A]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guarantee", "link" : "cats\/effect\/kernel\/Async.html#guarantee[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: F[A])(pf: PartialFunction[Throwable, Throwable]): F[A]", "member" : "cats.MonadError.adaptError", "link" : "cats\/effect\/kernel\/Async.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: F[A])(f: (Either[Throwable, A]) => F[B]): F[A]", "member" : "cats.MonadError.attemptTap", "link" : "cats\/effect\/kernel\/Async.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: F[A])(recover: (Throwable) => F[B], bind: (A) => F[B]): F[B]", "member" : "cats.MonadError.redeemWith", "link" : "cats\/effect\/kernel\/Async.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: F[Either[EE, A]]): F[A]", "member" : "cats.MonadError.rethrow", "link" : "cats\/effect\/kernel\/Async.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: F[A])(error: (A) => Throwable)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensureOr", "link" : "cats\/effect\/kernel\/Async.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: F[A])(error: => Throwable)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensure", "link" : "cats\/effect\/kernel\/Async.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (F[Boolean], F[A])*)(els: F[A]): F[A]", "member" : "cats.Monad.ifElseM", "link" : "cats\/effect\/kernel\/Async.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntilM", "link" : "cats\/effect\/kernel\/Async.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhileM", "link" : "cats\/effect\/kernel\/Async.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntil", "link" : "cats\/effect\/kernel\/Async.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhile", "link" : "cats\/effect\/kernel\/Async.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: F[A])(cond: => F[Boolean]): F[Unit]", "member" : "cats.Monad.untilM_", "link" : "cats\/effect\/kernel\/Async.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: F[A])(cond: => F[Boolean])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.untilM", "link" : "cats\/effect\/kernel\/Async.html#untilM[G[_],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: F[Boolean])(body: => F[A]): F[Unit]", "member" : "cats.Monad.whileM_", "link" : "cats\/effect\/kernel\/Async.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: F[Boolean])(body: => F[A])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.whileM", "link" : "cats\/effect\/kernel\/Async.html#whileM[G[_],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Monad.map", "link" : "cats\/effect\/kernel\/Async.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: F[Option[A]]): F[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "cats\/effect\/kernel\/Async.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => F[A]): F[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "cats\/effect\/kernel\/Async.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: F[A]): F[B]", "member" : "cats.FlatMap.foreverM", "link" : "cats\/effect\/kernel\/Async.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[A]", "member" : "cats.FlatMap.flatTap", "link" : "cats\/effect\/kernel\/Async.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: F[Boolean])(ifTrue: => F[B], ifFalse: => F[B]): F[B]", "member" : "cats.FlatMap.ifM", "link" : "cats\/effect\/kernel\/Async.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: F[A])(f: (A) => F[B]): F[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "cats\/effect\/kernel\/Async.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.FlatMap.productL", "link" : "cats\/effect\/kernel\/Async.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.FlatMap.productR", "link" : "cats\/effect\/kernel\/Async.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "cats.FlatMap.map2", "link" : "cats\/effect\/kernel\/Async.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "cats.FlatMap.ap2", "link" : "cats\/effect\/kernel\/Async.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.FlatMap.product", "link" : "cats\/effect\/kernel\/Async.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.FlatMap.ap", "link" : "cats\/effect\/kernel\/Async.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[A]", "member" : "cats.FlatMap.productLEval", "link" : "cats\/effect\/kernel\/Async.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[B]", "member" : "cats.FlatMap.productREval", "link" : "cats\/effect\/kernel\/Async.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: F[F[A]]): F[A]", "member" : "cats.FlatMap.flatten", "link" : "cats\/effect\/kernel\/Async.html#flatten[A](ffa:F[F[A]]):F[A]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): F[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "cats\/effect\/kernel\/Async.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): F[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "cats\/effect\/kernel\/Async.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): F[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "cats\/effect\/kernel\/Async.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): F[A]", "member" : "cats.ApplicativeError.fromTry", "link" : "cats\/effect\/kernel\/Async.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, F, Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "cats\/effect\/kernel\/Async.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): F[A]", "member" : "cats.ApplicativeError.catchNonFatalEval", "link" : "cats\/effect\/kernel\/Async.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): F[A]", "member" : "cats.ApplicativeError.catchNonFatal", "link" : "cats\/effect\/kernel\/Async.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: F[A])(pf: PartialFunction[Throwable, F[Unit]]): F[A]", "member" : "cats.ApplicativeError.onError", "link" : "cats\/effect\/kernel\/Async.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: F[A])(recover: (Throwable) => B, f: (A) => B): F[B]", "member" : "cats.ApplicativeError.redeem", "link" : "cats\/effect\/kernel\/Async.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: F[A])(pf: PartialFunction[Throwable, F[A]]): F[A]", "member" : "cats.ApplicativeError.recoverWith", "link" : "cats\/effect\/kernel\/Async.html#recoverWith[A](fa:F[A])(pf:PartialFunction[E,F[A]]):F[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: F[A])(pf: PartialFunction[Throwable, A]): F[A]", "member" : "cats.ApplicativeError.recover", "link" : "cats\/effect\/kernel\/Async.html#recover[A](fa:F[A])(pf:PartialFunction[E,A]):F[A]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: F[A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): F[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "cats\/effect\/kernel\/Async.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: F[A]): EitherT[F, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "cats\/effect\/kernel\/Async.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: F[A]): F[Either[Throwable, A]]", "member" : "cats.ApplicativeError.attempt", "link" : "cats\/effect\/kernel\/Async.html#attempt[A](fa:F[A]):F[Either[E,A]]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: F[A])(f: (Throwable) => A): F[A]", "member" : "cats.ApplicativeError.handleError", "link" : "cats\/effect\/kernel\/Async.html#handleError[A](fa:F[A])(f:E=>A):F[A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.whenA", "link" : "cats\/effect\/kernel\/Async.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.unlessA", "link" : "cats\/effect\/kernel\/Async.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]F[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "cats\/effect\/kernel\/Async.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]F[G[α]]]", "member" : "cats.Applicative.compose", "link" : "cats\/effect\/kernel\/Async.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: F[A]): F[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "cats\/effect\/kernel\/Async.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "cats.Applicative.unit", "link" : "cats\/effect\/kernel\/Async.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): F[A]", "member" : "cats.InvariantMonoidal.point", "link" : "cats\/effect\/kernel\/Async.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "cats\/effect\/kernel\/Async.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "cats\/effect\/kernel\/Async.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "cats.Apply.map2Eval", "link" : "cats\/effect\/kernel\/Async.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "cats\/effect\/kernel\/Async.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "cats\/effect\/kernel\/Async.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "cats\/effect\/kernel\/Async.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "cats\/effect\/kernel\/Async.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "cats\/effect\/kernel\/Async.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "cats\/effect\/kernel\/Async.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "cats\/effect\/kernel\/Async.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "cats\/effect\/kernel\/Async.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "cats\/effect\/kernel\/Async.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "cats\/effect\/kernel\/Async.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "cats\/effect\/kernel\/Async.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "cats\/effect\/kernel\/Async.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "cats\/effect\/kernel\/Async.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "cats\/effect\/kernel\/Async.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "cats\/effect\/kernel\/Async.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "cats\/effect\/kernel\/Async.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "cats\/effect\/kernel\/Async.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "cats\/effect\/kernel\/Async.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "cats\/effect\/kernel\/Async.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "cats\/effect\/kernel\/Async.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "cats\/effect\/kernel\/Async.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "cats\/effect\/kernel\/Async.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "cats\/effect\/kernel\/Async.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "cats\/effect\/kernel\/Async.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "cats\/effect\/kernel\/Async.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "cats\/effect\/kernel\/Async.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "cats\/effect\/kernel\/Async.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "cats\/effect\/kernel\/Async.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "cats\/effect\/kernel\/Async.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "cats\/effect\/kernel\/Async.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "cats\/effect\/kernel\/Async.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "cats\/effect\/kernel\/Async.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "cats\/effect\/kernel\/Async.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "cats\/effect\/kernel\/Async.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "cats\/effect\/kernel\/Async.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "cats\/effect\/kernel\/Async.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "cats\/effect\/kernel\/Async.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "cats\/effect\/kernel\/Async.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "cats\/effect\/kernel\/Async.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "cats\/effect\/kernel\/Async.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "cats\/effect\/kernel\/Async.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "cats\/effect\/kernel\/Async.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "cats\/effect\/kernel\/Async.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "cats\/effect\/kernel\/Async.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "cats\/effect\/kernel\/Async.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "cats\/effect\/kernel\/Async.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "cats\/effect\/kernel\/Async.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "cats\/effect\/kernel\/Async.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "cats\/effect\/kernel\/Async.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "cats\/effect\/kernel\/Async.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "cats\/effect\/kernel\/Async.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "cats\/effect\/kernel\/Async.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "cats\/effect\/kernel\/Async.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "cats\/effect\/kernel\/Async.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "cats\/effect\/kernel\/Async.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "cats\/effect\/kernel\/Async.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "cats\/effect\/kernel\/Async.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "cats\/effect\/kernel\/Async.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "cats\/effect\/kernel\/Async.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "cats\/effect\/kernel\/Async.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "cats\/effect\/kernel\/Async.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "cats\/effect\/kernel\/Async.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "cats\/effect\/kernel\/Async.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "cats\/effect\/kernel\/Async.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "cats\/effect\/kernel\/Async.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "cats\/effect\/kernel\/Async.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]F[G[α]]]", "member" : "cats.Functor.compose", "link" : "cats\/effect\/kernel\/Async.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "cats\/effect\/kernel\/Async.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "cats\/effect\/kernel\/Async.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "cats\/effect\/kernel\/Async.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "cats\/effect\/kernel\/Async.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "cats.Functor.as", "link" : "cats\/effect\/kernel\/Async.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: F[A])(f: (A) => B): F[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "cats\/effect\/kernel\/Async.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "cats\/effect\/kernel\/Async.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "cats.Functor.void", "link" : "cats\/effect\/kernel\/Async.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "cats.Functor.lift", "link" : "cats\/effect\/kernel\/Async.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Functor.widen", "link" : "cats\/effect\/kernel\/Async.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "cats\/effect\/kernel\/Async.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Functor.imap", "link" : "cats\/effect\/kernel\/Async.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "cats\/effect\/kernel\/Async.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "cats\/effect\/kernel\/Async.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "fromCompletableFuture", "tail" : "(fut: F[CompletableFuture[A]]): F[A]", "member" : "cats.effect.kernel.AsyncPlatform.fromCompletableFuture", "link" : "cats\/effect\/kernel\/Async.html#fromCompletableFuture[A](fut:F[java.util.concurrent.CompletableFuture[A]]):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Async.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Async.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Async.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Async.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Async.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Async.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Async.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Async.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Async.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Async.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Async.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Async.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Async.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Async.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Async.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Async.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Async.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Async.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Async.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cont", "tail" : "(body: Cont[F, K, R]): F[R]", "member" : "cats.effect.kernel.Async.cont", "link" : "cats\/effect\/kernel\/Async.html#cont[K,R](body:cats.effect.kernel.Cont[F,K,R]):F[R]", "kind" : "abstract def"}, {"label" : "executionContext", "tail" : "(): F[ExecutionContext]", "member" : "cats.effect.kernel.Async.executionContext", "link" : "cats\/effect\/kernel\/Async.html#executionContext:F[scala.concurrent.ExecutionContext]", "kind" : "abstract def"}, {"label" : "evalOn", "tail" : "(fa: F[A], ec: ExecutionContext): F[A]", "member" : "cats.effect.kernel.Async.evalOn", "link" : "cats\/effect\/kernel\/Async.html#evalOn[A](fa:F[A],ec:scala.concurrent.ExecutionContext):F[A]", "kind" : "abstract def"}, {"label" : "sleep", "tail" : "(time: FiniteDuration): F[Unit]", "member" : "cats.effect.kernel.GenTemporal.sleep", "link" : "cats\/effect\/kernel\/Async.html#sleep(time:scala.concurrent.duration.FiniteDuration):F[Unit]", "kind" : "abstract def"}, {"label" : "deferred", "tail" : "(): F[Deferred[F, A]]", "member" : "cats.effect.kernel.GenConcurrent.deferred", "link" : "cats\/effect\/kernel\/Async.html#deferred[A]:F[cats.effect.kernel.Deferred[F,A]]", "kind" : "abstract def"}, {"label" : "ref", "tail" : "(a: A): F[Ref[F, A]]", "member" : "cats.effect.kernel.GenConcurrent.ref", "link" : "cats\/effect\/kernel\/Async.html#ref[A](a:A):F[cats.effect.kernel.Ref[F,A]]", "kind" : "abstract def"}, {"label" : "cede", "tail" : "(): F[Unit]", "member" : "cats.effect.kernel.GenSpawn.cede", "link" : "cats\/effect\/kernel\/Async.html#cede:F[Unit]", "kind" : "abstract def"}, {"label" : "start", "tail" : "(fa: F[A]): F[Fiber[F, Throwable, A]]", "member" : "cats.effect.kernel.GenSpawn.start", "link" : "cats\/effect\/kernel\/Async.html#start[A](fa:F[A]):F[cats.effect.kernel.Fiber[F,E,A]]", "kind" : "abstract def"}, {"label" : "suspend", "tail" : "(hint: Type)(thunk: => A): F[A]", "member" : "cats.effect.kernel.Sync.suspend", "link" : "cats\/effect\/kernel\/Async.html#suspend[A](hint:cats.effect.kernel.Sync.Type)(thunk:=>A):F[A]", "kind" : "abstract def"}, {"label" : "realTime", "tail" : "(): F[FiniteDuration]", "member" : "cats.effect.kernel.Clock.realTime", "link" : "cats\/effect\/kernel\/Async.html#realTime:F[scala.concurrent.duration.FiniteDuration]", "kind" : "abstract def"}, {"label" : "monotonic", "tail" : "(): F[FiniteDuration]", "member" : "cats.effect.kernel.Clock.monotonic", "link" : "cats\/effect\/kernel\/Async.html#monotonic:F[scala.concurrent.duration.FiniteDuration]", "kind" : "abstract def"}, {"label" : "onCancel", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.onCancel", "link" : "cats\/effect\/kernel\/Async.html#onCancel[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "abstract def"}, {"label" : "canceled", "tail" : "(): F[Unit]", "member" : "cats.effect.kernel.MonadCancel.canceled", "link" : "cats\/effect\/kernel\/Async.html#canceled:F[Unit]", "kind" : "abstract def"}, {"label" : "uncancelable", "tail" : "(body: (Poll[F]) => F[A]): F[A]", "member" : "cats.effect.kernel.MonadCancel.uncancelable", "link" : "cats\/effect\/kernel\/Async.html#uncancelable[A](body:cats.effect.kernel.Poll[F]=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "forceR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.effect.kernel.MonadCancel.forceR", "link" : "cats\/effect\/kernel\/Async.html#forceR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "abstract def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => F[Either[A, B]]): F[B]", "member" : "cats.FlatMap.tailRecM", "link" : "cats\/effect\/kernel\/Async.html#tailRecM[A,B](a:A)(f:A=>F[Either[A,B]]):F[B]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[B]", "member" : "cats.FlatMap.flatMap", "link" : "cats\/effect\/kernel\/Async.html#flatMap[A,B](fa:F[A])(f:A=>F[B]):F[B]", "kind" : "abstract def"}, {"label" : "handleErrorWith", "tail" : "(fa: F[A])(f: (Throwable) => F[A]): F[A]", "member" : "cats.ApplicativeError.handleErrorWith", "link" : "cats\/effect\/kernel\/Async.html#handleErrorWith[A](fa:F[A])(f:E=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "raiseError", "tail" : "(e: Throwable): F[A]", "member" : "cats.ApplicativeError.raiseError", "link" : "cats\/effect\/kernel\/Async.html#raiseError[A](e:E):F[A]", "kind" : "abstract def"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "cats.Applicative.pure", "link" : "cats\/effect\/kernel\/Async.html#pure[A](x:A):F[A]", "kind" : "abstract def"}], "shortDescription" : "A typeclass that encodes the notion of suspending asynchronousside effects in the F[_] context"}, {"name" : "cats.effect.kernel.CancelScope", "object" : "cats\/effect\/kernel\/CancelScope$.html", "members_object" : [{"label" : "Uncancelable", "tail" : "", "member" : "cats.effect.kernel.CancelScope.Uncancelable", "link" : "cats\/effect\/kernel\/CancelScope$.html#Uncancelable", "kind" : "case object"}, {"label" : "Cancelable", "tail" : "", "member" : "cats.effect.kernel.CancelScope.Cancelable", "link" : "cats\/effect\/kernel\/CancelScope$.html#Cancelable", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/CancelScope$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/CancelScope$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/CancelScope$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/CancelScope$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/CancelScope$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/CancelScope$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/CancelScope$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/CancelScope$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/CancelScope$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/CancelScope$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/CancelScope$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/CancelScope$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/CancelScope$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/CancelScope$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/CancelScope$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/CancelScope$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/CancelScope$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/CancelScope$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/CancelScope$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/CancelScope.html", "kind" : "trait", "members_trait" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cats\/effect\/kernel\/CancelScope.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "cats\/effect\/kernel\/CancelScope.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "cats\/effect\/kernel\/CancelScope.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "cats\/effect\/kernel\/CancelScope.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/CancelScope.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/CancelScope.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/CancelScope.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/CancelScope.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/CancelScope.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/CancelScope.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/CancelScope.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/CancelScope.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/CancelScope.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/CancelScope.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/CancelScope.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/CancelScope.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/CancelScope.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/CancelScope.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/CancelScope.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/CancelScope.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/CancelScope.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/CancelScope.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/CancelScope.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "cats\/effect\/kernel\/CancelScope.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "cats\/effect\/kernel\/CancelScope.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "cats\/effect\/kernel\/CancelScope.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.Clock", "object" : "cats\/effect\/kernel\/Clock$.html", "members_object" : [{"label" : "clockForReaderWriterStateT", "tail" : "(F0: Monad[F], C0: Clock[F], L0: kernel.Monoid[L]): Clock[[ε$7$]IndexedReaderWriterStateT[F, R, L, S, S, ε$7$]]", "member" : "cats.effect.kernel.Clock.clockForReaderWriterStateT", "link" : "cats\/effect\/kernel\/Clock$.html#clockForReaderWriterStateT[F[_],R,L,S](implicitF0:cats.Monad[F],implicitC0:cats.effect.kernel.Clock[F],implicitL0:cats.kernel.Monoid[L]):cats.effect.kernel.Clock[[ε$7$]cats.data.IndexedReaderWriterStateT[F,R,L,S,S,ε$7$]]", "kind" : "implicit def"}, {"label" : "clockForContT", "tail" : "(F0: Monad[F], C0: Clock[F], D0: Defer[F]): Clock[[γ$6$]ContT[F, R, γ$6$]]", "member" : "cats.effect.kernel.Clock.clockForContT", "link" : "cats\/effect\/kernel\/Clock$.html#clockForContT[F[_],R](implicitF0:cats.Monad[F],implicitC0:cats.effect.kernel.Clock[F],implicitD0:cats.Defer[F]):cats.effect.kernel.Clock[[γ$6$]cats.data.ContT[F,R,γ$6$]]", "kind" : "implicit def"}, {"label" : "clockForKleisli", "tail" : "(F0: Monad[F], C0: Clock[F]): Clock[[γ$5$]Kleisli[F, R, γ$5$]]", "member" : "cats.effect.kernel.Clock.clockForKleisli", "link" : "cats\/effect\/kernel\/Clock$.html#clockForKleisli[F[_],R](implicitF0:cats.Monad[F],implicitC0:cats.effect.kernel.Clock[F]):cats.effect.kernel.Clock[[γ$5$]cats.data.Kleisli[F,R,γ$5$]]", "kind" : "implicit def"}, {"label" : "clockForIorT", "tail" : "(F0: Monad[F], C0: Clock[F], L0: kernel.Semigroup[L]): Clock[[γ$4$]IorT[F, L, γ$4$]]", "member" : "cats.effect.kernel.Clock.clockForIorT", "link" : "cats\/effect\/kernel\/Clock$.html#clockForIorT[F[_],L](implicitF0:cats.Monad[F],implicitC0:cats.effect.kernel.Clock[F],implicitL0:cats.kernel.Semigroup[L]):cats.effect.kernel.Clock[[γ$4$]cats.data.IorT[F,L,γ$4$]]", "kind" : "implicit def"}, {"label" : "clockForWriterT", "tail" : "(F0: Monad[F], C0: Clock[F], L0: kernel.Monoid[L]): Clock[[γ$3$]WriterT[F, L, γ$3$]]", "member" : "cats.effect.kernel.Clock.clockForWriterT", "link" : "cats\/effect\/kernel\/Clock$.html#clockForWriterT[F[_],L](implicitF0:cats.Monad[F],implicitC0:cats.effect.kernel.Clock[F],implicitL0:cats.kernel.Monoid[L]):cats.effect.kernel.Clock[[γ$3$]cats.data.WriterT[F,L,γ$3$]]", "kind" : "implicit def"}, {"label" : "clockForStateT", "tail" : "(F0: Monad[F], C0: Clock[F]): Clock[[γ$2$]IndexedStateT[F, S, S, γ$2$]]", "member" : "cats.effect.kernel.Clock.clockForStateT", "link" : "cats\/effect\/kernel\/Clock$.html#clockForStateT[F[_],S](implicitF0:cats.Monad[F],implicitC0:cats.effect.kernel.Clock[F]):cats.effect.kernel.Clock[[γ$2$]cats.data.IndexedStateT[F,S,S,γ$2$]]", "kind" : "implicit def"}, {"label" : "clockForEitherT", "tail" : "(F0: Monad[F], C0: Clock[F]): Clock[[γ$1$]EitherT[F, E, γ$1$]]", "member" : "cats.effect.kernel.Clock.clockForEitherT", "link" : "cats\/effect\/kernel\/Clock$.html#clockForEitherT[F[_],E](implicitF0:cats.Monad[F],implicitC0:cats.effect.kernel.Clock[F]):cats.effect.kernel.Clock[[γ$1$]cats.data.EitherT[F,E,γ$1$]]", "kind" : "implicit def"}, {"label" : "clockForOptionT", "tail" : "(F0: Monad[F], C0: Clock[F]): Clock[[β$0$]OptionT[F, β$0$]]", "member" : "cats.effect.kernel.Clock.clockForOptionT", "link" : "cats\/effect\/kernel\/Clock$.html#clockForOptionT[F[_]](implicitF0:cats.Monad[F],implicitC0:cats.effect.kernel.Clock[F]):cats.effect.kernel.Clock[[β$0$]cats.data.OptionT[F,β$0$]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(F: Clock[F]): F.type", "member" : "cats.effect.kernel.Clock.apply", "link" : "cats\/effect\/kernel\/Clock$.html#apply[F[_]](implicitF:cats.effect.kernel.Clock[F]):F.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Clock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Clock$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Clock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Clock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Clock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Clock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Clock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Clock$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Clock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Clock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Clock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Clock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Clock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Clock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Clock$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Clock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Clock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Clock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Clock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/Clock.html", "kind" : "trait", "members_trait" : [{"label" : "timed", "tail" : "(fa: F[A]): F[(FiniteDuration, A)]", "member" : "cats.effect.kernel.Clock.timed", "link" : "cats\/effect\/kernel\/Clock.html#timed[A](fa:F[A]):F[(scala.concurrent.duration.FiniteDuration,A)]", "kind" : "def"}, {"label" : "realTimeInstant", "tail" : "(): F[Instant]", "member" : "cats.effect.kernel.ClockPlatform.realTimeInstant", "link" : "cats\/effect\/kernel\/Clock.html#realTimeInstant:F[java.time.Instant]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Clock.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Clock.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Clock.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Clock.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Clock.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Clock.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Clock.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Clock.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Clock.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Clock.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Clock.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Clock.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Clock.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Clock.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Clock.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Clock.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Clock.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Clock.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Clock.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "realTime", "tail" : "(): F[FiniteDuration]", "member" : "cats.effect.kernel.Clock.realTime", "link" : "cats\/effect\/kernel\/Clock.html#realTime:F[scala.concurrent.duration.FiniteDuration]", "kind" : "abstract def"}, {"label" : "monotonic", "tail" : "(): F[FiniteDuration]", "member" : "cats.effect.kernel.Clock.monotonic", "link" : "cats\/effect\/kernel\/Clock.html#monotonic:F[scala.concurrent.duration.FiniteDuration]", "kind" : "abstract def"}, {"label" : "applicative", "tail" : "(): Applicative[F]", "member" : "cats.effect.kernel.Clock.applicative", "link" : "cats\/effect\/kernel\/Clock.html#applicative:cats.Applicative[F]", "kind" : "abstract def"}], "shortDescription" : "A typeclass which encodes various notions of time."}, {"name" : "cats.effect.kernel.Cont", "trait" : "cats\/effect\/kernel\/Cont.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Cont.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Cont.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Cont.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Cont.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Cont.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Cont.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Cont.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Cont.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Cont.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Cont.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Cont.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Cont.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Cont.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Cont.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Cont.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Cont.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Cont.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Cont.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Cont.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(G: MonadCancel[G, Throwable]): ((Either[Throwable, K]) => Unit, G[K], ~>[F, G]) => G[R]", "member" : "cats.effect.kernel.Cont.apply", "link" : "cats\/effect\/kernel\/Cont.html#apply[G[_]](implicitG:cats.effect.kernel.MonadCancel[G,Throwable]):(Either[Throwable,K]=>Unit,G[K],F~>G)=>G[R]", "kind" : "abstract def"}], "shortDescription" : "This construction supports  Async.conttrait Async[F[_]] { ..."}, {"name" : "cats.effect.kernel.Deferred", "shortDescription" : "A purely functional synchronization primitive which represents a single valuewhich may not yet be available.", "object" : "cats\/effect\/kernel\/Deferred$.html", "members_class" : [{"label" : "mapK", "tail" : "(f: ~>[F, G]): Deferred[G, A]", "member" : "cats.effect.kernel.Deferred.mapK", "link" : "cats\/effect\/kernel\/Deferred.html#mapK[G[_]](f:F~>G):cats.effect.kernel.Deferred[G,A]", "kind" : "def"}, {"member" : "cats.effect.kernel.Deferred#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Deferred.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Deferred.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Deferred.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Deferred.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Deferred.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Deferred.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Deferred.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Deferred.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Deferred.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Deferred.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Deferred.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Deferred.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Deferred.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Deferred.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Deferred.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Deferred.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Deferred.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Deferred.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Deferred.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "complete", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.kernel.DeferredSink.complete", "link" : "cats\/effect\/kernel\/Deferred.html#complete(a:A):F[Boolean]", "kind" : "abstract def"}, {"label" : "tryGet", "tail" : "(): F[Option[A]]", "member" : "cats.effect.kernel.DeferredSource.tryGet", "link" : "cats\/effect\/kernel\/Deferred.html#tryGet:F[Option[A]]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): F[A]", "member" : "cats.effect.kernel.DeferredSource.get", "link" : "cats\/effect\/kernel\/Deferred.html#get:F[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "catsInvariantForDeferred", "tail" : "(arg0: Functor[F]): Invariant[[β$0$]Deferred[F, β$0$]]", "member" : "cats.effect.kernel.Deferred.catsInvariantForDeferred", "link" : "cats\/effect\/kernel\/Deferred$.html#catsInvariantForDeferred[F[_]](implicitevidence$2:cats.Functor[F]):cats.Invariant[[β$0$]cats.effect.kernel.Deferred[F,β$0$]]", "kind" : "implicit def"}, {"label" : "AsyncDeferred", "tail" : "", "member" : "cats.effect.kernel.Deferred.AsyncDeferred", "link" : "cats\/effect\/kernel\/Deferred$.html#AsyncDeferred[F[_],A]extendsDeferred[F,A]", "kind" : "final class"}, {"label" : "in", "tail" : "(F: Sync[F], G: Async[G]): F[Deferred[G, A]]", "member" : "cats.effect.kernel.Deferred.in", "link" : "cats\/effect\/kernel\/Deferred$.html#in[F[_],G[_],A](implicitF:cats.effect.kernel.Sync[F],implicitG:cats.effect.kernel.Async[G]):F[cats.effect.kernel.Deferred[G,A]]", "kind" : "def"}, {"label" : "unsafe", "tail" : "(arg0: Async[F]): Deferred[F, A]", "member" : "cats.effect.kernel.Deferred.unsafe", "link" : "cats\/effect\/kernel\/Deferred$.html#unsafe[F[_],A](implicitevidence$1:cats.effect.kernel.Async[F]):cats.effect.kernel.Deferred[F,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(F: GenConcurrent[F, _]): F[Deferred[F, A]]", "member" : "cats.effect.kernel.Deferred.apply", "link" : "cats\/effect\/kernel\/Deferred$.html#apply[F[_],A](implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[cats.effect.kernel.Deferred[F,A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Deferred$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Deferred$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Deferred$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Deferred$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Deferred$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Deferred$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Deferred$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Deferred$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Deferred$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Deferred$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Deferred$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Deferred$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Deferred$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Deferred$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Deferred$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Deferred$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Deferred$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Deferred$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Deferred$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/Deferred.html", "kind" : "class"}, {"name" : "cats.effect.kernel.DeferredSink", "object" : "cats\/effect\/kernel\/DeferredSink$.html", "members_object" : [{"label" : "catsContravariantForDeferredSink", "tail" : "(): Contravariant[[β$4$]DeferredSink[F, β$4$]]", "member" : "cats.effect.kernel.DeferredSink.catsContravariantForDeferredSink", "link" : "cats\/effect\/kernel\/DeferredSink$.html#catsContravariantForDeferredSink[F[_]]:cats.Contravariant[[β$4$]cats.effect.kernel.DeferredSink[F,β$4$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/DeferredSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/DeferredSink$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/DeferredSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/DeferredSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/DeferredSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/DeferredSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/DeferredSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/DeferredSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/DeferredSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/DeferredSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/DeferredSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/DeferredSink$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/DeferredSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/DeferredSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/DeferredSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/DeferredSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/DeferredSink.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/DeferredSink.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/DeferredSink.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/DeferredSink.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/DeferredSink.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/DeferredSink.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/DeferredSink.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/DeferredSink.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSink.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSink.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSink.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/DeferredSink.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/DeferredSink.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/DeferredSink.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/DeferredSink.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/DeferredSink.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/DeferredSink.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/DeferredSink.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/DeferredSink.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/DeferredSink.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "complete", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.kernel.DeferredSink.complete", "link" : "cats\/effect\/kernel\/DeferredSink.html#complete(a:A):F[Boolean]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.DeferredSource", "object" : "cats\/effect\/kernel\/DeferredSource$.html", "members_object" : [{"label" : "catsFunctorForDeferredSource", "tail" : "(arg0: Functor[F]): Functor[[β$2$]DeferredSource[F, β$2$]]", "member" : "cats.effect.kernel.DeferredSource.catsFunctorForDeferredSource", "link" : "cats\/effect\/kernel\/DeferredSource$.html#catsFunctorForDeferredSource[F[_]](implicitevidence$3:cats.Functor[F]):cats.Functor[[β$2$]cats.effect.kernel.DeferredSource[F,β$2$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/DeferredSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/DeferredSource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/DeferredSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/DeferredSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/DeferredSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/DeferredSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/DeferredSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/DeferredSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/DeferredSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/DeferredSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/DeferredSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/DeferredSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/DeferredSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/DeferredSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/DeferredSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/DeferredSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/DeferredSource.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/DeferredSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/DeferredSource.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/DeferredSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/DeferredSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/DeferredSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/DeferredSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/DeferredSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/DeferredSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/DeferredSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/DeferredSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/DeferredSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/DeferredSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/DeferredSource.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/DeferredSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/DeferredSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/DeferredSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/DeferredSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryGet", "tail" : "(): F[Option[A]]", "member" : "cats.effect.kernel.DeferredSource.tryGet", "link" : "cats\/effect\/kernel\/DeferredSource.html#tryGet:F[Option[A]]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): F[A]", "member" : "cats.effect.kernel.DeferredSource.get", "link" : "cats\/effect\/kernel\/DeferredSource.html#get:F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.Fiber", "trait" : "cats\/effect\/kernel\/Fiber.html", "kind" : "trait", "members_trait" : [{"label" : "joinWithNever", "tail" : "(F: GenSpawn[F, E]): F[A]", "member" : "cats.effect.kernel.Fiber.joinWithNever", "link" : "cats\/effect\/kernel\/Fiber.html#joinWithNever(implicitF:cats.effect.kernel.GenSpawn[F,E]):F[A]", "kind" : "def"}, {"label" : "joinWith", "tail" : "(onCancel: F[A])(F: MonadCancel[F, E]): F[A]", "member" : "cats.effect.kernel.Fiber.joinWith", "link" : "cats\/effect\/kernel\/Fiber.html#joinWith(onCancel:F[A])(implicitF:cats.effect.kernel.MonadCancel[F,E]):F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Fiber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Fiber.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Fiber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Fiber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Fiber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Fiber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Fiber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Fiber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Fiber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Fiber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Fiber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Fiber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Fiber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Fiber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Fiber.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Fiber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Fiber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Fiber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Fiber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "join", "tail" : "(): F[Outcome[F, E, A]]", "member" : "cats.effect.kernel.Fiber.join", "link" : "cats\/effect\/kernel\/Fiber.html#join:F[cats.effect.kernel.Outcome[F,E,A]]", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): F[Unit]", "member" : "cats.effect.kernel.Fiber.cancel", "link" : "cats\/effect\/kernel\/Fiber.html#cancel:F[Unit]", "kind" : "abstract def"}], "shortDescription" : "A datatype that represents a handle to a fiber and allows for waiting andcancelation against that fiber."}, {"name" : "cats.effect.kernel.GenConcurrent", "object" : "cats\/effect\/kernel\/GenConcurrent$.html", "members_object" : [{"label" : "genConcurrentForWriterT", "tail" : "(F0: GenConcurrent[F, E], L0: Monoid[L]): GenConcurrent[[γ$4$]WriterT[F, L, γ$4$], E]", "member" : "cats.effect.kernel.GenConcurrent.genConcurrentForWriterT", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#genConcurrentForWriterT[F[_],L,E](implicitF0:cats.effect.kernel.GenConcurrent[F,E],implicitL0:cats.Monoid[L]):cats.effect.kernel.GenConcurrent[[γ$4$]cats.data.WriterT[F,L,γ$4$],E]", "kind" : "implicit def"}, {"label" : "genConcurrentForIorT", "tail" : "(F0: GenConcurrent[F, E], L0: Semigroup[L]): GenConcurrent[[γ$3$]IorT[F, L, γ$3$], E]", "member" : "cats.effect.kernel.GenConcurrent.genConcurrentForIorT", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#genConcurrentForIorT[F[_],L,E](implicitF0:cats.effect.kernel.GenConcurrent[F,E],implicitL0:cats.Semigroup[L]):cats.effect.kernel.GenConcurrent[[γ$3$]cats.data.IorT[F,L,γ$3$],E]", "kind" : "implicit def"}, {"label" : "genConcurrentForKleisli", "tail" : "(F0: GenConcurrent[F, E]): GenConcurrent[[γ$2$]Kleisli[F, R, γ$2$], E]", "member" : "cats.effect.kernel.GenConcurrent.genConcurrentForKleisli", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#genConcurrentForKleisli[F[_],R,E](implicitF0:cats.effect.kernel.GenConcurrent[F,E]):cats.effect.kernel.GenConcurrent[[γ$2$]cats.data.Kleisli[F,R,γ$2$],E]", "kind" : "implicit def"}, {"label" : "genConcurrentForEitherT", "tail" : "(F0: GenConcurrent[F, E]): GenConcurrent[[γ$1$]EitherT[F, E0, γ$1$], E]", "member" : "cats.effect.kernel.GenConcurrent.genConcurrentForEitherT", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#genConcurrentForEitherT[F[_],E0,E](implicitF0:cats.effect.kernel.GenConcurrent[F,E]):cats.effect.kernel.GenConcurrent[[γ$1$]cats.data.EitherT[F,E0,γ$1$],E]", "kind" : "implicit def"}, {"label" : "genConcurrentForOptionT", "tail" : "(F0: GenConcurrent[F, E]): GenConcurrent[[β$0$]OptionT[F, β$0$], E]", "member" : "cats.effect.kernel.GenConcurrent.genConcurrentForOptionT", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#genConcurrentForOptionT[F[_],E](implicitF0:cats.effect.kernel.GenConcurrent[F,E]):cats.effect.kernel.GenConcurrent[[β$0$]cats.data.OptionT[F,β$0$],E]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(F: GenConcurrent[F, _], d: DummyImplicit): F.type", "member" : "cats.effect.kernel.GenConcurrent.apply", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#apply[F[_]](implicitF:cats.effect.kernel.GenConcurrent[F,_],implicitd:DummyImplicit):F.type", "kind" : "def"}, {"label" : "apply", "tail" : "(F: GenConcurrent[F, E]): F.type", "member" : "cats.effect.kernel.GenConcurrent.apply", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#apply[F[_],E](implicitF:cats.effect.kernel.GenConcurrent[F,E]):F.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/GenConcurrent$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/GenConcurrent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/GenConcurrent.html", "kind" : "trait", "members_trait" : [{"label" : "racePair", "tail" : "(fa: F[A], fb: F[B]): F[Either[(Outcome[F, E, A], Fiber[F, E, B]), (Fiber[F, E, A], Outcome[F, E, B])]]", "member" : "cats.effect.kernel.GenConcurrent.racePair", "link" : "cats\/effect\/kernel\/GenConcurrent.html#racePair[A,B](fa:F[A],fb:F[B]):F[Either[(cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Fiber[F,E,B]),(cats.effect.kernel.Fiber[F,E,A],cats.effect.kernel.Outcome[F,E,B])]]", "kind" : "def"}, {"label" : "parTraverseN", "tail" : "(n: Int)(ta: T[A])(f: (A) => F[B])(arg0: Traverse[T]): F[T[B]]", "member" : "cats.effect.kernel.GenConcurrent.parTraverseN", "link" : "cats\/effect\/kernel\/GenConcurrent.html#parTraverseN[T[_],A,B](n:Int)(ta:T[A])(f:A=>F[B])(implicitevidence$2:cats.Traverse[T]):F[T[B]]", "kind" : "def"}, {"label" : "parSequenceN", "tail" : "(n: Int)(tma: T[F[A]])(arg0: Traverse[T]): F[T[A]]", "member" : "cats.effect.kernel.GenConcurrent.parSequenceN", "link" : "cats\/effect\/kernel\/GenConcurrent.html#parSequenceN[T[_],A](n:Int)(tma:T[F[A]])(implicitevidence$1:cats.Traverse[T]):F[T[A]]", "kind" : "def"}, {"label" : "memoize", "tail" : "(fa: F[A]): F[F[A]]", "member" : "cats.effect.kernel.GenConcurrent.memoize", "link" : "cats\/effect\/kernel\/GenConcurrent.html#memoize[A](fa:F[A]):F[F[A]]", "kind" : "def"}, {"label" : "both", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.effect.kernel.GenSpawn.both", "link" : "cats\/effect\/kernel\/GenConcurrent.html#both[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "bothOutcome", "tail" : "(fa: F[A], fb: F[B]): F[(Outcome[F, E, A], Outcome[F, E, B])]", "member" : "cats.effect.kernel.GenSpawn.bothOutcome", "link" : "cats\/effect\/kernel\/GenConcurrent.html#bothOutcome[A,B](fa:F[A],fb:F[B]):F[(cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Outcome[F,E,B])]", "kind" : "def"}, {"label" : "race", "tail" : "(fa: F[A], fb: F[B]): F[Either[A, B]]", "member" : "cats.effect.kernel.GenSpawn.race", "link" : "cats\/effect\/kernel\/GenConcurrent.html#race[A,B](fa:F[A],fb:F[B]):F[Either[A,B]]", "kind" : "def"}, {"label" : "raceOutcome", "tail" : "(fa: F[A], fb: F[B]): F[Either[Outcome[F, E, A], Outcome[F, E, B]]]", "member" : "cats.effect.kernel.GenSpawn.raceOutcome", "link" : "cats\/effect\/kernel\/GenConcurrent.html#raceOutcome[A,B](fa:F[A],fb:F[B]):F[Either[cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Outcome[F,E,B]]]", "kind" : "def"}, {"label" : "background", "tail" : "(fa: F[A]): Resource[F, F[Outcome[F, E, A]]]", "member" : "cats.effect.kernel.GenSpawn.background", "link" : "cats\/effect\/kernel\/GenConcurrent.html#background[A](fa:F[A]):cats.effect.kernel.Resource[F,F[cats.effect.kernel.Outcome[F,E,A]]]", "kind" : "def"}, {"label" : "rootCancelScope", "tail" : "(): CancelScope", "member" : "cats.effect.kernel.GenSpawn.rootCancelScope", "link" : "cats\/effect\/kernel\/GenConcurrent.html#rootCancelScope:cats.effect.kernel.CancelScope", "kind" : "final def"}, {"label" : "applicative", "tail" : "(): Applicative[F]", "member" : "cats.effect.kernel.GenSpawn.applicative", "link" : "cats\/effect\/kernel\/GenConcurrent.html#applicative:cats.Applicative[F]", "kind" : "def"}, {"label" : "bracketFull", "tail" : "(acquire: (Poll[F]) => F[A])(use: (A) => F[B])(release: (A, Outcome[F, E, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketFull", "link" : "cats\/effect\/kernel\/GenConcurrent.html#bracketFull[A,B](acquire:cats.effect.kernel.Poll[F]=>F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A, Outcome[F, E, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketCase", "link" : "cats\/effect\/kernel\/GenConcurrent.html#bracketCase[A,B](acquire:F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracket", "link" : "cats\/effect\/kernel\/GenConcurrent.html#bracket[A,B](acquire:F[A])(use:A=>F[B])(release:A=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: F[A])(fin: (Outcome[F, E, A]) => F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guaranteeCase", "link" : "cats\/effect\/kernel\/GenConcurrent.html#guaranteeCase[A](fa:F[A])(fin:cats.effect.kernel.Outcome[F,E,A]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guarantee", "link" : "cats\/effect\/kernel\/GenConcurrent.html#guarantee[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: F[A])(pf: PartialFunction[E, E]): F[A]", "member" : "cats.MonadError.adaptError", "link" : "cats\/effect\/kernel\/GenConcurrent.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: F[A])(f: (Either[E, A]) => F[B]): F[A]", "member" : "cats.MonadError.attemptTap", "link" : "cats\/effect\/kernel\/GenConcurrent.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: F[A])(recover: (E) => F[B], bind: (A) => F[B]): F[B]", "member" : "cats.MonadError.redeemWith", "link" : "cats\/effect\/kernel\/GenConcurrent.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: F[Either[EE, A]]): F[A]", "member" : "cats.MonadError.rethrow", "link" : "cats\/effect\/kernel\/GenConcurrent.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: F[A])(error: (A) => E)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensureOr", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: F[A])(error: => E)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensure", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (F[Boolean], F[A])*)(els: F[A]): F[A]", "member" : "cats.Monad.ifElseM", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntilM", "link" : "cats\/effect\/kernel\/GenConcurrent.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhileM", "link" : "cats\/effect\/kernel\/GenConcurrent.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntil", "link" : "cats\/effect\/kernel\/GenConcurrent.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhile", "link" : "cats\/effect\/kernel\/GenConcurrent.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: F[A])(cond: => F[Boolean]): F[Unit]", "member" : "cats.Monad.untilM_", "link" : "cats\/effect\/kernel\/GenConcurrent.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: F[A])(cond: => F[Boolean])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.untilM", "link" : "cats\/effect\/kernel\/GenConcurrent.html#untilM[G[_],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: F[Boolean])(body: => F[A]): F[Unit]", "member" : "cats.Monad.whileM_", "link" : "cats\/effect\/kernel\/GenConcurrent.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: F[Boolean])(body: => F[A])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.whileM", "link" : "cats\/effect\/kernel\/GenConcurrent.html#whileM[G[_],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Monad.map", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: F[Option[A]]): F[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "cats\/effect\/kernel\/GenConcurrent.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => F[A]): F[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "cats\/effect\/kernel\/GenConcurrent.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: F[A]): F[B]", "member" : "cats.FlatMap.foreverM", "link" : "cats\/effect\/kernel\/GenConcurrent.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[A]", "member" : "cats.FlatMap.flatTap", "link" : "cats\/effect\/kernel\/GenConcurrent.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: F[Boolean])(ifTrue: => F[B], ifFalse: => F[B]): F[B]", "member" : "cats.FlatMap.ifM", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: F[A])(f: (A) => F[B]): F[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "cats\/effect\/kernel\/GenConcurrent.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.FlatMap.productL", "link" : "cats\/effect\/kernel\/GenConcurrent.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.FlatMap.productR", "link" : "cats\/effect\/kernel\/GenConcurrent.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "cats.FlatMap.map2", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "cats.FlatMap.ap2", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.FlatMap.product", "link" : "cats\/effect\/kernel\/GenConcurrent.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.FlatMap.ap", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[A]", "member" : "cats.FlatMap.productLEval", "link" : "cats\/effect\/kernel\/GenConcurrent.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[B]", "member" : "cats.FlatMap.productREval", "link" : "cats\/effect\/kernel\/GenConcurrent.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: F[F[A]]): F[A]", "member" : "cats.FlatMap.flatten", "link" : "cats\/effect\/kernel\/GenConcurrent.html#flatten[A](ffa:F[F[A]]):F[A]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[E, A]): F[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "cats\/effect\/kernel\/GenConcurrent.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => E): F[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "cats\/effect\/kernel\/GenConcurrent.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[E, A]): F[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "cats\/effect\/kernel\/GenConcurrent.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.fromTry", "link" : "cats\/effect\/kernel\/GenConcurrent.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, F, E]", "member" : "cats.ApplicativeError.catchOnly", "link" : "cats\/effect\/kernel\/GenConcurrent.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.catchNonFatalEval", "link" : "cats\/effect\/kernel\/GenConcurrent.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.catchNonFatal", "link" : "cats\/effect\/kernel\/GenConcurrent.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: F[A])(pf: PartialFunction[E, F[Unit]]): F[A]", "member" : "cats.ApplicativeError.onError", "link" : "cats\/effect\/kernel\/GenConcurrent.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: F[A])(recover: (E) => B, f: (A) => B): F[B]", "member" : "cats.ApplicativeError.redeem", "link" : "cats\/effect\/kernel\/GenConcurrent.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: F[A])(pf: PartialFunction[E, F[A]]): F[A]", "member" : "cats.ApplicativeError.recoverWith", "link" : "cats\/effect\/kernel\/GenConcurrent.html#recoverWith[A](fa:F[A])(pf:PartialFunction[E,F[A]]):F[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: F[A])(pf: PartialFunction[E, A]): F[A]", "member" : "cats.ApplicativeError.recover", "link" : "cats\/effect\/kernel\/GenConcurrent.html#recover[A](fa:F[A])(pf:PartialFunction[E,A]):F[A]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: F[A])(tag: ClassTag[EE], ev: <:<[EE, E]): F[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "cats\/effect\/kernel\/GenConcurrent.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: F[A]): EitherT[F, E, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "cats\/effect\/kernel\/GenConcurrent.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: F[A]): F[Either[E, A]]", "member" : "cats.ApplicativeError.attempt", "link" : "cats\/effect\/kernel\/GenConcurrent.html#attempt[A](fa:F[A]):F[Either[E,A]]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: F[A])(f: (E) => A): F[A]", "member" : "cats.ApplicativeError.handleError", "link" : "cats\/effect\/kernel\/GenConcurrent.html#handleError[A](fa:F[A])(f:E=>A):F[A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.whenA", "link" : "cats\/effect\/kernel\/GenConcurrent.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.unlessA", "link" : "cats\/effect\/kernel\/GenConcurrent.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]F[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "cats\/effect\/kernel\/GenConcurrent.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]F[G[α]]]", "member" : "cats.Applicative.compose", "link" : "cats\/effect\/kernel\/GenConcurrent.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: F[A]): F[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "cats\/effect\/kernel\/GenConcurrent.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "cats.Applicative.unit", "link" : "cats\/effect\/kernel\/GenConcurrent.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): F[A]", "member" : "cats.InvariantMonoidal.point", "link" : "cats\/effect\/kernel\/GenConcurrent.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "cats\/effect\/kernel\/GenConcurrent.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "cats.Apply.map2Eval", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "cats\/effect\/kernel\/GenConcurrent.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "cats\/effect\/kernel\/GenConcurrent.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "cats\/effect\/kernel\/GenConcurrent.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "cats\/effect\/kernel\/GenConcurrent.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "cats\/effect\/kernel\/GenConcurrent.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "cats\/effect\/kernel\/GenConcurrent.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]F[G[α]]]", "member" : "cats.Functor.compose", "link" : "cats\/effect\/kernel\/GenConcurrent.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "cats\/effect\/kernel\/GenConcurrent.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "cats.Functor.as", "link" : "cats\/effect\/kernel\/GenConcurrent.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: F[A])(f: (A) => B): F[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "cats\/effect\/kernel\/GenConcurrent.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "cats\/effect\/kernel\/GenConcurrent.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "cats.Functor.void", "link" : "cats\/effect\/kernel\/GenConcurrent.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "cats.Functor.lift", "link" : "cats\/effect\/kernel\/GenConcurrent.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Functor.widen", "link" : "cats\/effect\/kernel\/GenConcurrent.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "cats\/effect\/kernel\/GenConcurrent.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Functor.imap", "link" : "cats\/effect\/kernel\/GenConcurrent.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "cats\/effect\/kernel\/GenConcurrent.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "cats\/effect\/kernel\/GenConcurrent.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/GenConcurrent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/GenConcurrent.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/GenConcurrent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/GenConcurrent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/GenConcurrent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/GenConcurrent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenConcurrent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenConcurrent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenConcurrent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/GenConcurrent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/GenConcurrent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/GenConcurrent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/GenConcurrent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/GenConcurrent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/GenConcurrent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/GenConcurrent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/GenConcurrent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/GenConcurrent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deferred", "tail" : "(): F[Deferred[F, A]]", "member" : "cats.effect.kernel.GenConcurrent.deferred", "link" : "cats\/effect\/kernel\/GenConcurrent.html#deferred[A]:F[cats.effect.kernel.Deferred[F,A]]", "kind" : "abstract def"}, {"label" : "ref", "tail" : "(a: A): F[Ref[F, A]]", "member" : "cats.effect.kernel.GenConcurrent.ref", "link" : "cats\/effect\/kernel\/GenConcurrent.html#ref[A](a:A):F[cats.effect.kernel.Ref[F,A]]", "kind" : "abstract def"}, {"label" : "cede", "tail" : "(): F[Unit]", "member" : "cats.effect.kernel.GenSpawn.cede", "link" : "cats\/effect\/kernel\/GenConcurrent.html#cede:F[Unit]", "kind" : "abstract def"}, {"label" : "never", "tail" : "(): F[A]", "member" : "cats.effect.kernel.GenSpawn.never", "link" : "cats\/effect\/kernel\/GenConcurrent.html#never[A]:F[A]", "kind" : "abstract def"}, {"label" : "start", "tail" : "(fa: F[A]): F[Fiber[F, E, A]]", "member" : "cats.effect.kernel.GenSpawn.start", "link" : "cats\/effect\/kernel\/GenConcurrent.html#start[A](fa:F[A]):F[cats.effect.kernel.Fiber[F,E,A]]", "kind" : "abstract def"}, {"label" : "unique", "tail" : "(): F[Token]", "member" : "cats.effect.kernel.Unique.unique", "link" : "cats\/effect\/kernel\/GenConcurrent.html#unique:F[cats.effect.kernel.Unique.Token]", "kind" : "abstract def"}, {"label" : "onCancel", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.onCancel", "link" : "cats\/effect\/kernel\/GenConcurrent.html#onCancel[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "abstract def"}, {"label" : "canceled", "tail" : "(): F[Unit]", "member" : "cats.effect.kernel.MonadCancel.canceled", "link" : "cats\/effect\/kernel\/GenConcurrent.html#canceled:F[Unit]", "kind" : "abstract def"}, {"label" : "uncancelable", "tail" : "(body: (Poll[F]) => F[A]): F[A]", "member" : "cats.effect.kernel.MonadCancel.uncancelable", "link" : "cats\/effect\/kernel\/GenConcurrent.html#uncancelable[A](body:cats.effect.kernel.Poll[F]=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "forceR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.effect.kernel.MonadCancel.forceR", "link" : "cats\/effect\/kernel\/GenConcurrent.html#forceR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "abstract def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => F[Either[A, B]]): F[B]", "member" : "cats.FlatMap.tailRecM", "link" : "cats\/effect\/kernel\/GenConcurrent.html#tailRecM[A,B](a:A)(f:A=>F[Either[A,B]]):F[B]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[B]", "member" : "cats.FlatMap.flatMap", "link" : "cats\/effect\/kernel\/GenConcurrent.html#flatMap[A,B](fa:F[A])(f:A=>F[B]):F[B]", "kind" : "abstract def"}, {"label" : "handleErrorWith", "tail" : "(fa: F[A])(f: (E) => F[A]): F[A]", "member" : "cats.ApplicativeError.handleErrorWith", "link" : "cats\/effect\/kernel\/GenConcurrent.html#handleErrorWith[A](fa:F[A])(f:E=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "raiseError", "tail" : "(e: E): F[A]", "member" : "cats.ApplicativeError.raiseError", "link" : "cats\/effect\/kernel\/GenConcurrent.html#raiseError[A](e:E):F[A]", "kind" : "abstract def"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "cats.Applicative.pure", "link" : "cats\/effect\/kernel\/GenConcurrent.html#pure[A](x:A):F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.GenSpawn", "object" : "cats\/effect\/kernel\/GenSpawn$.html", "members_object" : [{"label" : "genSpawnForWriterT", "tail" : "(F0: GenSpawn[F, E], L0: Monoid[L]): GenSpawn[[γ$4$]WriterT[F, L, γ$4$], E]", "member" : "cats.effect.kernel.GenSpawn.genSpawnForWriterT", "link" : "cats\/effect\/kernel\/GenSpawn$.html#genSpawnForWriterT[F[_],L,E](implicitF0:cats.effect.kernel.GenSpawn[F,E],implicitL0:cats.Monoid[L]):cats.effect.kernel.GenSpawn[[γ$4$]cats.data.WriterT[F,L,γ$4$],E]", "kind" : "implicit def"}, {"label" : "genSpawnForIorT", "tail" : "(F0: GenSpawn[F, E], L0: Semigroup[L]): GenSpawn[[γ$3$]IorT[F, L, γ$3$], E]", "member" : "cats.effect.kernel.GenSpawn.genSpawnForIorT", "link" : "cats\/effect\/kernel\/GenSpawn$.html#genSpawnForIorT[F[_],L,E](implicitF0:cats.effect.kernel.GenSpawn[F,E],implicitL0:cats.Semigroup[L]):cats.effect.kernel.GenSpawn[[γ$3$]cats.data.IorT[F,L,γ$3$],E]", "kind" : "implicit def"}, {"label" : "genSpawnForKleisli", "tail" : "(F0: GenSpawn[F, E]): GenSpawn[[γ$2$]Kleisli[F, R, γ$2$], E]", "member" : "cats.effect.kernel.GenSpawn.genSpawnForKleisli", "link" : "cats\/effect\/kernel\/GenSpawn$.html#genSpawnForKleisli[F[_],R,E](implicitF0:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.GenSpawn[[γ$2$]cats.data.Kleisli[F,R,γ$2$],E]", "kind" : "implicit def"}, {"label" : "genSpawnForEitherT", "tail" : "(F0: GenSpawn[F, E]): GenSpawn[[γ$1$]EitherT[F, E0, γ$1$], E]", "member" : "cats.effect.kernel.GenSpawn.genSpawnForEitherT", "link" : "cats\/effect\/kernel\/GenSpawn$.html#genSpawnForEitherT[F[_],E0,E](implicitF0:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.GenSpawn[[γ$1$]cats.data.EitherT[F,E0,γ$1$],E]", "kind" : "implicit def"}, {"label" : "genSpawnForOptionT", "tail" : "(F0: GenSpawn[F, E]): GenSpawn[[β$0$]OptionT[F, β$0$], E]", "member" : "cats.effect.kernel.GenSpawn.genSpawnForOptionT", "link" : "cats\/effect\/kernel\/GenSpawn$.html#genSpawnForOptionT[F[_],E](implicitF0:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.GenSpawn[[β$0$]cats.data.OptionT[F,β$0$],E]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(F: GenSpawn[F, _], d: DummyImplicit): F.type", "member" : "cats.effect.kernel.GenSpawn.apply", "link" : "cats\/effect\/kernel\/GenSpawn$.html#apply[F[_]](implicitF:cats.effect.kernel.GenSpawn[F,_],implicitd:DummyImplicit):F.type", "kind" : "def"}, {"label" : "apply", "tail" : "(F: GenSpawn[F, E]): F.type", "member" : "cats.effect.kernel.GenSpawn.apply", "link" : "cats\/effect\/kernel\/GenSpawn$.html#apply[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):F.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/GenSpawn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/GenSpawn$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/GenSpawn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/GenSpawn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/GenSpawn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/GenSpawn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/GenSpawn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenSpawn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenSpawn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenSpawn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/GenSpawn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/GenSpawn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/GenSpawn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/GenSpawn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/GenSpawn$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/GenSpawn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/GenSpawn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/GenSpawn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/GenSpawn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/GenSpawn.html", "kind" : "trait", "members_trait" : [{"label" : "both", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.effect.kernel.GenSpawn.both", "link" : "cats\/effect\/kernel\/GenSpawn.html#both[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "bothOutcome", "tail" : "(fa: F[A], fb: F[B]): F[(Outcome[F, E, A], Outcome[F, E, B])]", "member" : "cats.effect.kernel.GenSpawn.bothOutcome", "link" : "cats\/effect\/kernel\/GenSpawn.html#bothOutcome[A,B](fa:F[A],fb:F[B]):F[(cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Outcome[F,E,B])]", "kind" : "def"}, {"label" : "race", "tail" : "(fa: F[A], fb: F[B]): F[Either[A, B]]", "member" : "cats.effect.kernel.GenSpawn.race", "link" : "cats\/effect\/kernel\/GenSpawn.html#race[A,B](fa:F[A],fb:F[B]):F[Either[A,B]]", "kind" : "def"}, {"label" : "raceOutcome", "tail" : "(fa: F[A], fb: F[B]): F[Either[Outcome[F, E, A], Outcome[F, E, B]]]", "member" : "cats.effect.kernel.GenSpawn.raceOutcome", "link" : "cats\/effect\/kernel\/GenSpawn.html#raceOutcome[A,B](fa:F[A],fb:F[B]):F[Either[cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Outcome[F,E,B]]]", "kind" : "def"}, {"label" : "background", "tail" : "(fa: F[A]): Resource[F, F[Outcome[F, E, A]]]", "member" : "cats.effect.kernel.GenSpawn.background", "link" : "cats\/effect\/kernel\/GenSpawn.html#background[A](fa:F[A]):cats.effect.kernel.Resource[F,F[cats.effect.kernel.Outcome[F,E,A]]]", "kind" : "def"}, {"label" : "rootCancelScope", "tail" : "(): CancelScope", "member" : "cats.effect.kernel.GenSpawn.rootCancelScope", "link" : "cats\/effect\/kernel\/GenSpawn.html#rootCancelScope:cats.effect.kernel.CancelScope", "kind" : "final def"}, {"label" : "applicative", "tail" : "(): Applicative[F]", "member" : "cats.effect.kernel.GenSpawn.applicative", "link" : "cats\/effect\/kernel\/GenSpawn.html#applicative:cats.Applicative[F]", "kind" : "def"}, {"label" : "bracketFull", "tail" : "(acquire: (Poll[F]) => F[A])(use: (A) => F[B])(release: (A, Outcome[F, E, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketFull", "link" : "cats\/effect\/kernel\/GenSpawn.html#bracketFull[A,B](acquire:cats.effect.kernel.Poll[F]=>F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A, Outcome[F, E, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketCase", "link" : "cats\/effect\/kernel\/GenSpawn.html#bracketCase[A,B](acquire:F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracket", "link" : "cats\/effect\/kernel\/GenSpawn.html#bracket[A,B](acquire:F[A])(use:A=>F[B])(release:A=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: F[A])(fin: (Outcome[F, E, A]) => F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guaranteeCase", "link" : "cats\/effect\/kernel\/GenSpawn.html#guaranteeCase[A](fa:F[A])(fin:cats.effect.kernel.Outcome[F,E,A]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guarantee", "link" : "cats\/effect\/kernel\/GenSpawn.html#guarantee[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: F[A])(pf: PartialFunction[E, E]): F[A]", "member" : "cats.MonadError.adaptError", "link" : "cats\/effect\/kernel\/GenSpawn.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: F[A])(f: (Either[E, A]) => F[B]): F[A]", "member" : "cats.MonadError.attemptTap", "link" : "cats\/effect\/kernel\/GenSpawn.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: F[A])(recover: (E) => F[B], bind: (A) => F[B]): F[B]", "member" : "cats.MonadError.redeemWith", "link" : "cats\/effect\/kernel\/GenSpawn.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: F[Either[EE, A]]): F[A]", "member" : "cats.MonadError.rethrow", "link" : "cats\/effect\/kernel\/GenSpawn.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: F[A])(error: (A) => E)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensureOr", "link" : "cats\/effect\/kernel\/GenSpawn.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: F[A])(error: => E)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensure", "link" : "cats\/effect\/kernel\/GenSpawn.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (F[Boolean], F[A])*)(els: F[A]): F[A]", "member" : "cats.Monad.ifElseM", "link" : "cats\/effect\/kernel\/GenSpawn.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntilM", "link" : "cats\/effect\/kernel\/GenSpawn.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhileM", "link" : "cats\/effect\/kernel\/GenSpawn.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntil", "link" : "cats\/effect\/kernel\/GenSpawn.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhile", "link" : "cats\/effect\/kernel\/GenSpawn.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: F[A])(cond: => F[Boolean]): F[Unit]", "member" : "cats.Monad.untilM_", "link" : "cats\/effect\/kernel\/GenSpawn.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: F[A])(cond: => F[Boolean])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.untilM", "link" : "cats\/effect\/kernel\/GenSpawn.html#untilM[G[_],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: F[Boolean])(body: => F[A]): F[Unit]", "member" : "cats.Monad.whileM_", "link" : "cats\/effect\/kernel\/GenSpawn.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: F[Boolean])(body: => F[A])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.whileM", "link" : "cats\/effect\/kernel\/GenSpawn.html#whileM[G[_],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Monad.map", "link" : "cats\/effect\/kernel\/GenSpawn.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: F[Option[A]]): F[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "cats\/effect\/kernel\/GenSpawn.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => F[A]): F[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "cats\/effect\/kernel\/GenSpawn.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: F[A]): F[B]", "member" : "cats.FlatMap.foreverM", "link" : "cats\/effect\/kernel\/GenSpawn.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[A]", "member" : "cats.FlatMap.flatTap", "link" : "cats\/effect\/kernel\/GenSpawn.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: F[Boolean])(ifTrue: => F[B], ifFalse: => F[B]): F[B]", "member" : "cats.FlatMap.ifM", "link" : "cats\/effect\/kernel\/GenSpawn.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: F[A])(f: (A) => F[B]): F[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "cats\/effect\/kernel\/GenSpawn.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.FlatMap.productL", "link" : "cats\/effect\/kernel\/GenSpawn.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.FlatMap.productR", "link" : "cats\/effect\/kernel\/GenSpawn.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "cats.FlatMap.map2", "link" : "cats\/effect\/kernel\/GenSpawn.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "cats.FlatMap.ap2", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.FlatMap.product", "link" : "cats\/effect\/kernel\/GenSpawn.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.FlatMap.ap", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[A]", "member" : "cats.FlatMap.productLEval", "link" : "cats\/effect\/kernel\/GenSpawn.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[B]", "member" : "cats.FlatMap.productREval", "link" : "cats\/effect\/kernel\/GenSpawn.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: F[F[A]]): F[A]", "member" : "cats.FlatMap.flatten", "link" : "cats\/effect\/kernel\/GenSpawn.html#flatten[A](ffa:F[F[A]]):F[A]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[E, A]): F[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "cats\/effect\/kernel\/GenSpawn.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => E): F[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "cats\/effect\/kernel\/GenSpawn.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[E, A]): F[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "cats\/effect\/kernel\/GenSpawn.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.fromTry", "link" : "cats\/effect\/kernel\/GenSpawn.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, F, E]", "member" : "cats.ApplicativeError.catchOnly", "link" : "cats\/effect\/kernel\/GenSpawn.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.catchNonFatalEval", "link" : "cats\/effect\/kernel\/GenSpawn.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.catchNonFatal", "link" : "cats\/effect\/kernel\/GenSpawn.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: F[A])(pf: PartialFunction[E, F[Unit]]): F[A]", "member" : "cats.ApplicativeError.onError", "link" : "cats\/effect\/kernel\/GenSpawn.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: F[A])(recover: (E) => B, f: (A) => B): F[B]", "member" : "cats.ApplicativeError.redeem", "link" : "cats\/effect\/kernel\/GenSpawn.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: F[A])(pf: PartialFunction[E, F[A]]): F[A]", "member" : "cats.ApplicativeError.recoverWith", "link" : "cats\/effect\/kernel\/GenSpawn.html#recoverWith[A](fa:F[A])(pf:PartialFunction[E,F[A]]):F[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: F[A])(pf: PartialFunction[E, A]): F[A]", "member" : "cats.ApplicativeError.recover", "link" : "cats\/effect\/kernel\/GenSpawn.html#recover[A](fa:F[A])(pf:PartialFunction[E,A]):F[A]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: F[A])(tag: ClassTag[EE], ev: <:<[EE, E]): F[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "cats\/effect\/kernel\/GenSpawn.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: F[A]): EitherT[F, E, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "cats\/effect\/kernel\/GenSpawn.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: F[A]): F[Either[E, A]]", "member" : "cats.ApplicativeError.attempt", "link" : "cats\/effect\/kernel\/GenSpawn.html#attempt[A](fa:F[A]):F[Either[E,A]]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: F[A])(f: (E) => A): F[A]", "member" : "cats.ApplicativeError.handleError", "link" : "cats\/effect\/kernel\/GenSpawn.html#handleError[A](fa:F[A])(f:E=>A):F[A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.whenA", "link" : "cats\/effect\/kernel\/GenSpawn.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.unlessA", "link" : "cats\/effect\/kernel\/GenSpawn.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]F[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "cats\/effect\/kernel\/GenSpawn.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]F[G[α]]]", "member" : "cats.Applicative.compose", "link" : "cats\/effect\/kernel\/GenSpawn.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: F[A]): F[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "cats\/effect\/kernel\/GenSpawn.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "cats.Applicative.unit", "link" : "cats\/effect\/kernel\/GenSpawn.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): F[A]", "member" : "cats.InvariantMonoidal.point", "link" : "cats\/effect\/kernel\/GenSpawn.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "cats\/effect\/kernel\/GenSpawn.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "cats\/effect\/kernel\/GenSpawn.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "cats.Apply.map2Eval", "link" : "cats\/effect\/kernel\/GenSpawn.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "cats\/effect\/kernel\/GenSpawn.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "cats\/effect\/kernel\/GenSpawn.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "cats\/effect\/kernel\/GenSpawn.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "cats\/effect\/kernel\/GenSpawn.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "cats\/effect\/kernel\/GenSpawn.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "cats\/effect\/kernel\/GenSpawn.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "cats\/effect\/kernel\/GenSpawn.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "cats\/effect\/kernel\/GenSpawn.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "cats\/effect\/kernel\/GenSpawn.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "cats\/effect\/kernel\/GenSpawn.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "cats\/effect\/kernel\/GenSpawn.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "cats\/effect\/kernel\/GenSpawn.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "cats\/effect\/kernel\/GenSpawn.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "cats\/effect\/kernel\/GenSpawn.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "cats\/effect\/kernel\/GenSpawn.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "cats\/effect\/kernel\/GenSpawn.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "cats\/effect\/kernel\/GenSpawn.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "cats\/effect\/kernel\/GenSpawn.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "cats\/effect\/kernel\/GenSpawn.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "cats\/effect\/kernel\/GenSpawn.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "cats\/effect\/kernel\/GenSpawn.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "cats\/effect\/kernel\/GenSpawn.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "cats\/effect\/kernel\/GenSpawn.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "cats\/effect\/kernel\/GenSpawn.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "cats\/effect\/kernel\/GenSpawn.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "cats\/effect\/kernel\/GenSpawn.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "cats\/effect\/kernel\/GenSpawn.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]F[G[α]]]", "member" : "cats.Functor.compose", "link" : "cats\/effect\/kernel\/GenSpawn.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "cats\/effect\/kernel\/GenSpawn.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "cats\/effect\/kernel\/GenSpawn.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "cats\/effect\/kernel\/GenSpawn.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "cats\/effect\/kernel\/GenSpawn.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "cats.Functor.as", "link" : "cats\/effect\/kernel\/GenSpawn.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: F[A])(f: (A) => B): F[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "cats\/effect\/kernel\/GenSpawn.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "cats\/effect\/kernel\/GenSpawn.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "cats.Functor.void", "link" : "cats\/effect\/kernel\/GenSpawn.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "cats.Functor.lift", "link" : "cats\/effect\/kernel\/GenSpawn.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Functor.widen", "link" : "cats\/effect\/kernel\/GenSpawn.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "cats\/effect\/kernel\/GenSpawn.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Functor.imap", "link" : "cats\/effect\/kernel\/GenSpawn.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "cats\/effect\/kernel\/GenSpawn.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "cats\/effect\/kernel\/GenSpawn.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/GenSpawn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/GenSpawn.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/GenSpawn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/GenSpawn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/GenSpawn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/GenSpawn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/GenSpawn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenSpawn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenSpawn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenSpawn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/GenSpawn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/GenSpawn.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/GenSpawn.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/GenSpawn.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/GenSpawn.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/GenSpawn.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/GenSpawn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/GenSpawn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/GenSpawn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "racePair", "tail" : "(fa: F[A], fb: F[B]): F[Either[(Outcome[F, E, A], Fiber[F, E, B]), (Fiber[F, E, A], Outcome[F, E, B])]]", "member" : "cats.effect.kernel.GenSpawn.racePair", "link" : "cats\/effect\/kernel\/GenSpawn.html#racePair[A,B](fa:F[A],fb:F[B]):F[Either[(cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Fiber[F,E,B]),(cats.effect.kernel.Fiber[F,E,A],cats.effect.kernel.Outcome[F,E,B])]]", "kind" : "abstract def"}, {"label" : "cede", "tail" : "(): F[Unit]", "member" : "cats.effect.kernel.GenSpawn.cede", "link" : "cats\/effect\/kernel\/GenSpawn.html#cede:F[Unit]", "kind" : "abstract def"}, {"label" : "never", "tail" : "(): F[A]", "member" : "cats.effect.kernel.GenSpawn.never", "link" : "cats\/effect\/kernel\/GenSpawn.html#never[A]:F[A]", "kind" : "abstract def"}, {"label" : "start", "tail" : "(fa: F[A]): F[Fiber[F, E, A]]", "member" : "cats.effect.kernel.GenSpawn.start", "link" : "cats\/effect\/kernel\/GenSpawn.html#start[A](fa:F[A]):F[cats.effect.kernel.Fiber[F,E,A]]", "kind" : "abstract def"}, {"label" : "unique", "tail" : "(): F[Token]", "member" : "cats.effect.kernel.Unique.unique", "link" : "cats\/effect\/kernel\/GenSpawn.html#unique:F[cats.effect.kernel.Unique.Token]", "kind" : "abstract def"}, {"label" : "onCancel", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.onCancel", "link" : "cats\/effect\/kernel\/GenSpawn.html#onCancel[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "abstract def"}, {"label" : "canceled", "tail" : "(): F[Unit]", "member" : "cats.effect.kernel.MonadCancel.canceled", "link" : "cats\/effect\/kernel\/GenSpawn.html#canceled:F[Unit]", "kind" : "abstract def"}, {"label" : "uncancelable", "tail" : "(body: (Poll[F]) => F[A]): F[A]", "member" : "cats.effect.kernel.MonadCancel.uncancelable", "link" : "cats\/effect\/kernel\/GenSpawn.html#uncancelable[A](body:cats.effect.kernel.Poll[F]=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "forceR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.effect.kernel.MonadCancel.forceR", "link" : "cats\/effect\/kernel\/GenSpawn.html#forceR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "abstract def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => F[Either[A, B]]): F[B]", "member" : "cats.FlatMap.tailRecM", "link" : "cats\/effect\/kernel\/GenSpawn.html#tailRecM[A,B](a:A)(f:A=>F[Either[A,B]]):F[B]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[B]", "member" : "cats.FlatMap.flatMap", "link" : "cats\/effect\/kernel\/GenSpawn.html#flatMap[A,B](fa:F[A])(f:A=>F[B]):F[B]", "kind" : "abstract def"}, {"label" : "handleErrorWith", "tail" : "(fa: F[A])(f: (E) => F[A]): F[A]", "member" : "cats.ApplicativeError.handleErrorWith", "link" : "cats\/effect\/kernel\/GenSpawn.html#handleErrorWith[A](fa:F[A])(f:E=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "raiseError", "tail" : "(e: E): F[A]", "member" : "cats.ApplicativeError.raiseError", "link" : "cats\/effect\/kernel\/GenSpawn.html#raiseError[A](e:E):F[A]", "kind" : "abstract def"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "cats.Applicative.pure", "link" : "cats\/effect\/kernel\/GenSpawn.html#pure[A](x:A):F[A]", "kind" : "abstract def"}], "shortDescription" : "A typeclass that characterizes monads which support spawning and racing offibers."}, {"name" : "cats.effect.kernel.GenTemporal", "object" : "cats\/effect\/kernel\/GenTemporal$.html", "members_object" : [{"label" : "genTemporalForWriterT", "tail" : "(F0: GenTemporal[F, E], L0: Monoid[L]): GenTemporal[[γ$4$]WriterT[F, L, γ$4$], E]", "member" : "cats.effect.kernel.GenTemporal.genTemporalForWriterT", "link" : "cats\/effect\/kernel\/GenTemporal$.html#genTemporalForWriterT[F[_],L,E](implicitF0:cats.effect.kernel.GenTemporal[F,E],implicitL0:cats.Monoid[L]):cats.effect.kernel.GenTemporal[[γ$4$]cats.data.WriterT[F,L,γ$4$],E]", "kind" : "implicit def"}, {"label" : "genTemporalForIorT", "tail" : "(F0: GenTemporal[F, E], L0: Semigroup[L]): GenTemporal[[γ$3$]IorT[F, L, γ$3$], E]", "member" : "cats.effect.kernel.GenTemporal.genTemporalForIorT", "link" : "cats\/effect\/kernel\/GenTemporal$.html#genTemporalForIorT[F[_],L,E](implicitF0:cats.effect.kernel.GenTemporal[F,E],implicitL0:cats.Semigroup[L]):cats.effect.kernel.GenTemporal[[γ$3$]cats.data.IorT[F,L,γ$3$],E]", "kind" : "implicit def"}, {"label" : "genTemporalForKleisli", "tail" : "(F0: GenTemporal[F, E]): GenTemporal[[γ$2$]Kleisli[F, R, γ$2$], E]", "member" : "cats.effect.kernel.GenTemporal.genTemporalForKleisli", "link" : "cats\/effect\/kernel\/GenTemporal$.html#genTemporalForKleisli[F[_],R,E](implicitF0:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.GenTemporal[[γ$2$]cats.data.Kleisli[F,R,γ$2$],E]", "kind" : "implicit def"}, {"label" : "genTemporalForEitherT", "tail" : "(F0: GenTemporal[F, E]): GenTemporal[[γ$1$]EitherT[F, E0, γ$1$], E]", "member" : "cats.effect.kernel.GenTemporal.genTemporalForEitherT", "link" : "cats\/effect\/kernel\/GenTemporal$.html#genTemporalForEitherT[F[_],E0,E](implicitF0:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.GenTemporal[[γ$1$]cats.data.EitherT[F,E0,γ$1$],E]", "kind" : "implicit def"}, {"label" : "genTemporalForOptionT", "tail" : "(F0: GenTemporal[F, E]): GenTemporal[[β$0$]OptionT[F, β$0$], E]", "member" : "cats.effect.kernel.GenTemporal.genTemporalForOptionT", "link" : "cats\/effect\/kernel\/GenTemporal$.html#genTemporalForOptionT[F[_],E](implicitF0:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.GenTemporal[[β$0$]cats.data.OptionT[F,β$0$],E]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(F: GenTemporal[F, _], d: DummyImplicit): F.type", "member" : "cats.effect.kernel.GenTemporal.apply", "link" : "cats\/effect\/kernel\/GenTemporal$.html#apply[F[_]](implicitF:cats.effect.kernel.GenTemporal[F,_],implicitd:DummyImplicit):F.type", "kind" : "def"}, {"label" : "apply", "tail" : "(F: GenTemporal[F, E]): F.type", "member" : "cats.effect.kernel.GenTemporal.apply", "link" : "cats\/effect\/kernel\/GenTemporal$.html#apply[F[_],E](implicitF:cats.effect.kernel.GenTemporal[F,E]):F.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/GenTemporal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/GenTemporal$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/GenTemporal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/GenTemporal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/GenTemporal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/GenTemporal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/GenTemporal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenTemporal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenTemporal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenTemporal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/GenTemporal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/GenTemporal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/GenTemporal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/GenTemporal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/GenTemporal$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/GenTemporal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/GenTemporal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/GenTemporal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/GenTemporal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/GenTemporal.html", "kind" : "trait", "members_trait" : [{"label" : "timeout", "tail" : "(fa: F[A], duration: FiniteDuration)(ev: <:<[TimeoutException, E]): F[A]", "member" : "cats.effect.kernel.GenTemporal.timeout", "link" : "cats\/effect\/kernel\/GenTemporal.html#timeout[A](fa:F[A],duration:scala.concurrent.duration.FiniteDuration)(implicitev:concurrent.TimeoutException<:<E):F[A]", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(fa: F[A], duration: FiniteDuration, fallback: F[A]): F[A]", "member" : "cats.effect.kernel.GenTemporal.timeoutTo", "link" : "cats\/effect\/kernel\/GenTemporal.html#timeoutTo[A](fa:F[A],duration:scala.concurrent.duration.FiniteDuration,fallback:F[A]):F[A]", "kind" : "def"}, {"label" : "andWait", "tail" : "(fa: F[A], time: FiniteDuration): F[A]", "member" : "cats.effect.kernel.GenTemporal.andWait", "link" : "cats\/effect\/kernel\/GenTemporal.html#andWait[A](fa:F[A],time:scala.concurrent.duration.FiniteDuration):F[A]", "kind" : "def"}, {"label" : "delayBy", "tail" : "(fa: F[A], time: FiniteDuration): F[A]", "member" : "cats.effect.kernel.GenTemporal.delayBy", "link" : "cats\/effect\/kernel\/GenTemporal.html#delayBy[A](fa:F[A],time:scala.concurrent.duration.FiniteDuration):F[A]", "kind" : "def"}, {"label" : "applicative", "tail" : "(): Applicative[F]", "member" : "cats.effect.kernel.GenTemporal.applicative", "link" : "cats\/effect\/kernel\/GenTemporal.html#applicative:cats.Applicative[F]", "kind" : "def"}, {"label" : "timed", "tail" : "(fa: F[A]): F[(FiniteDuration, A)]", "member" : "cats.effect.kernel.Clock.timed", "link" : "cats\/effect\/kernel\/GenTemporal.html#timed[A](fa:F[A]):F[(scala.concurrent.duration.FiniteDuration,A)]", "kind" : "def"}, {"label" : "realTimeInstant", "tail" : "(): F[Instant]", "member" : "cats.effect.kernel.ClockPlatform.realTimeInstant", "link" : "cats\/effect\/kernel\/GenTemporal.html#realTimeInstant:F[java.time.Instant]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: F[A], fb: F[B]): F[Either[(Outcome[F, E, A], Fiber[F, E, B]), (Fiber[F, E, A], Outcome[F, E, B])]]", "member" : "cats.effect.kernel.GenConcurrent.racePair", "link" : "cats\/effect\/kernel\/GenTemporal.html#racePair[A,B](fa:F[A],fb:F[B]):F[Either[(cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Fiber[F,E,B]),(cats.effect.kernel.Fiber[F,E,A],cats.effect.kernel.Outcome[F,E,B])]]", "kind" : "def"}, {"label" : "parTraverseN", "tail" : "(n: Int)(ta: T[A])(f: (A) => F[B])(arg0: Traverse[T]): F[T[B]]", "member" : "cats.effect.kernel.GenConcurrent.parTraverseN", "link" : "cats\/effect\/kernel\/GenTemporal.html#parTraverseN[T[_],A,B](n:Int)(ta:T[A])(f:A=>F[B])(implicitevidence$2:cats.Traverse[T]):F[T[B]]", "kind" : "def"}, {"label" : "parSequenceN", "tail" : "(n: Int)(tma: T[F[A]])(arg0: Traverse[T]): F[T[A]]", "member" : "cats.effect.kernel.GenConcurrent.parSequenceN", "link" : "cats\/effect\/kernel\/GenTemporal.html#parSequenceN[T[_],A](n:Int)(tma:T[F[A]])(implicitevidence$1:cats.Traverse[T]):F[T[A]]", "kind" : "def"}, {"label" : "memoize", "tail" : "(fa: F[A]): F[F[A]]", "member" : "cats.effect.kernel.GenConcurrent.memoize", "link" : "cats\/effect\/kernel\/GenTemporal.html#memoize[A](fa:F[A]):F[F[A]]", "kind" : "def"}, {"label" : "both", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.effect.kernel.GenSpawn.both", "link" : "cats\/effect\/kernel\/GenTemporal.html#both[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "bothOutcome", "tail" : "(fa: F[A], fb: F[B]): F[(Outcome[F, E, A], Outcome[F, E, B])]", "member" : "cats.effect.kernel.GenSpawn.bothOutcome", "link" : "cats\/effect\/kernel\/GenTemporal.html#bothOutcome[A,B](fa:F[A],fb:F[B]):F[(cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Outcome[F,E,B])]", "kind" : "def"}, {"label" : "race", "tail" : "(fa: F[A], fb: F[B]): F[Either[A, B]]", "member" : "cats.effect.kernel.GenSpawn.race", "link" : "cats\/effect\/kernel\/GenTemporal.html#race[A,B](fa:F[A],fb:F[B]):F[Either[A,B]]", "kind" : "def"}, {"label" : "raceOutcome", "tail" : "(fa: F[A], fb: F[B]): F[Either[Outcome[F, E, A], Outcome[F, E, B]]]", "member" : "cats.effect.kernel.GenSpawn.raceOutcome", "link" : "cats\/effect\/kernel\/GenTemporal.html#raceOutcome[A,B](fa:F[A],fb:F[B]):F[Either[cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Outcome[F,E,B]]]", "kind" : "def"}, {"label" : "background", "tail" : "(fa: F[A]): Resource[F, F[Outcome[F, E, A]]]", "member" : "cats.effect.kernel.GenSpawn.background", "link" : "cats\/effect\/kernel\/GenTemporal.html#background[A](fa:F[A]):cats.effect.kernel.Resource[F,F[cats.effect.kernel.Outcome[F,E,A]]]", "kind" : "def"}, {"label" : "rootCancelScope", "tail" : "(): CancelScope", "member" : "cats.effect.kernel.GenSpawn.rootCancelScope", "link" : "cats\/effect\/kernel\/GenTemporal.html#rootCancelScope:cats.effect.kernel.CancelScope", "kind" : "final def"}, {"label" : "bracketFull", "tail" : "(acquire: (Poll[F]) => F[A])(use: (A) => F[B])(release: (A, Outcome[F, E, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketFull", "link" : "cats\/effect\/kernel\/GenTemporal.html#bracketFull[A,B](acquire:cats.effect.kernel.Poll[F]=>F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A, Outcome[F, E, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketCase", "link" : "cats\/effect\/kernel\/GenTemporal.html#bracketCase[A,B](acquire:F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracket", "link" : "cats\/effect\/kernel\/GenTemporal.html#bracket[A,B](acquire:F[A])(use:A=>F[B])(release:A=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: F[A])(fin: (Outcome[F, E, A]) => F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guaranteeCase", "link" : "cats\/effect\/kernel\/GenTemporal.html#guaranteeCase[A](fa:F[A])(fin:cats.effect.kernel.Outcome[F,E,A]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guarantee", "link" : "cats\/effect\/kernel\/GenTemporal.html#guarantee[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: F[A])(pf: PartialFunction[E, E]): F[A]", "member" : "cats.MonadError.adaptError", "link" : "cats\/effect\/kernel\/GenTemporal.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: F[A])(f: (Either[E, A]) => F[B]): F[A]", "member" : "cats.MonadError.attemptTap", "link" : "cats\/effect\/kernel\/GenTemporal.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: F[A])(recover: (E) => F[B], bind: (A) => F[B]): F[B]", "member" : "cats.MonadError.redeemWith", "link" : "cats\/effect\/kernel\/GenTemporal.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: F[Either[EE, A]]): F[A]", "member" : "cats.MonadError.rethrow", "link" : "cats\/effect\/kernel\/GenTemporal.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: F[A])(error: (A) => E)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensureOr", "link" : "cats\/effect\/kernel\/GenTemporal.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: F[A])(error: => E)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensure", "link" : "cats\/effect\/kernel\/GenTemporal.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (F[Boolean], F[A])*)(els: F[A]): F[A]", "member" : "cats.Monad.ifElseM", "link" : "cats\/effect\/kernel\/GenTemporal.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntilM", "link" : "cats\/effect\/kernel\/GenTemporal.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhileM", "link" : "cats\/effect\/kernel\/GenTemporal.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntil", "link" : "cats\/effect\/kernel\/GenTemporal.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhile", "link" : "cats\/effect\/kernel\/GenTemporal.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: F[A])(cond: => F[Boolean]): F[Unit]", "member" : "cats.Monad.untilM_", "link" : "cats\/effect\/kernel\/GenTemporal.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: F[A])(cond: => F[Boolean])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.untilM", "link" : "cats\/effect\/kernel\/GenTemporal.html#untilM[G[_],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: F[Boolean])(body: => F[A]): F[Unit]", "member" : "cats.Monad.whileM_", "link" : "cats\/effect\/kernel\/GenTemporal.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: F[Boolean])(body: => F[A])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.whileM", "link" : "cats\/effect\/kernel\/GenTemporal.html#whileM[G[_],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Monad.map", "link" : "cats\/effect\/kernel\/GenTemporal.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: F[Option[A]]): F[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "cats\/effect\/kernel\/GenTemporal.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => F[A]): F[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "cats\/effect\/kernel\/GenTemporal.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: F[A]): F[B]", "member" : "cats.FlatMap.foreverM", "link" : "cats\/effect\/kernel\/GenTemporal.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[A]", "member" : "cats.FlatMap.flatTap", "link" : "cats\/effect\/kernel\/GenTemporal.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: F[Boolean])(ifTrue: => F[B], ifFalse: => F[B]): F[B]", "member" : "cats.FlatMap.ifM", "link" : "cats\/effect\/kernel\/GenTemporal.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: F[A])(f: (A) => F[B]): F[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "cats\/effect\/kernel\/GenTemporal.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.FlatMap.productL", "link" : "cats\/effect\/kernel\/GenTemporal.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.FlatMap.productR", "link" : "cats\/effect\/kernel\/GenTemporal.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "cats.FlatMap.map2", "link" : "cats\/effect\/kernel\/GenTemporal.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "cats.FlatMap.ap2", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.FlatMap.product", "link" : "cats\/effect\/kernel\/GenTemporal.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.FlatMap.ap", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[A]", "member" : "cats.FlatMap.productLEval", "link" : "cats\/effect\/kernel\/GenTemporal.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[B]", "member" : "cats.FlatMap.productREval", "link" : "cats\/effect\/kernel\/GenTemporal.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: F[F[A]]): F[A]", "member" : "cats.FlatMap.flatten", "link" : "cats\/effect\/kernel\/GenTemporal.html#flatten[A](ffa:F[F[A]]):F[A]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[E, A]): F[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "cats\/effect\/kernel\/GenTemporal.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => E): F[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "cats\/effect\/kernel\/GenTemporal.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[E, A]): F[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "cats\/effect\/kernel\/GenTemporal.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.fromTry", "link" : "cats\/effect\/kernel\/GenTemporal.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, F, E]", "member" : "cats.ApplicativeError.catchOnly", "link" : "cats\/effect\/kernel\/GenTemporal.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.catchNonFatalEval", "link" : "cats\/effect\/kernel\/GenTemporal.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.catchNonFatal", "link" : "cats\/effect\/kernel\/GenTemporal.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: F[A])(pf: PartialFunction[E, F[Unit]]): F[A]", "member" : "cats.ApplicativeError.onError", "link" : "cats\/effect\/kernel\/GenTemporal.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: F[A])(recover: (E) => B, f: (A) => B): F[B]", "member" : "cats.ApplicativeError.redeem", "link" : "cats\/effect\/kernel\/GenTemporal.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: F[A])(pf: PartialFunction[E, F[A]]): F[A]", "member" : "cats.ApplicativeError.recoverWith", "link" : "cats\/effect\/kernel\/GenTemporal.html#recoverWith[A](fa:F[A])(pf:PartialFunction[E,F[A]]):F[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: F[A])(pf: PartialFunction[E, A]): F[A]", "member" : "cats.ApplicativeError.recover", "link" : "cats\/effect\/kernel\/GenTemporal.html#recover[A](fa:F[A])(pf:PartialFunction[E,A]):F[A]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: F[A])(tag: ClassTag[EE], ev: <:<[EE, E]): F[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "cats\/effect\/kernel\/GenTemporal.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: F[A]): EitherT[F, E, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "cats\/effect\/kernel\/GenTemporal.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: F[A]): F[Either[E, A]]", "member" : "cats.ApplicativeError.attempt", "link" : "cats\/effect\/kernel\/GenTemporal.html#attempt[A](fa:F[A]):F[Either[E,A]]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: F[A])(f: (E) => A): F[A]", "member" : "cats.ApplicativeError.handleError", "link" : "cats\/effect\/kernel\/GenTemporal.html#handleError[A](fa:F[A])(f:E=>A):F[A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.whenA", "link" : "cats\/effect\/kernel\/GenTemporal.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.unlessA", "link" : "cats\/effect\/kernel\/GenTemporal.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]F[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "cats\/effect\/kernel\/GenTemporal.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]F[G[α]]]", "member" : "cats.Applicative.compose", "link" : "cats\/effect\/kernel\/GenTemporal.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: F[A]): F[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "cats\/effect\/kernel\/GenTemporal.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "cats.Applicative.unit", "link" : "cats\/effect\/kernel\/GenTemporal.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): F[A]", "member" : "cats.InvariantMonoidal.point", "link" : "cats\/effect\/kernel\/GenTemporal.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "cats\/effect\/kernel\/GenTemporal.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "cats\/effect\/kernel\/GenTemporal.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "cats.Apply.map2Eval", "link" : "cats\/effect\/kernel\/GenTemporal.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "cats\/effect\/kernel\/GenTemporal.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "cats\/effect\/kernel\/GenTemporal.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "cats\/effect\/kernel\/GenTemporal.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "cats\/effect\/kernel\/GenTemporal.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "cats\/effect\/kernel\/GenTemporal.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "cats\/effect\/kernel\/GenTemporal.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "cats\/effect\/kernel\/GenTemporal.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "cats\/effect\/kernel\/GenTemporal.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "cats\/effect\/kernel\/GenTemporal.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "cats\/effect\/kernel\/GenTemporal.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "cats\/effect\/kernel\/GenTemporal.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "cats\/effect\/kernel\/GenTemporal.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "cats\/effect\/kernel\/GenTemporal.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "cats\/effect\/kernel\/GenTemporal.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "cats\/effect\/kernel\/GenTemporal.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "cats\/effect\/kernel\/GenTemporal.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "cats\/effect\/kernel\/GenTemporal.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "cats\/effect\/kernel\/GenTemporal.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "cats\/effect\/kernel\/GenTemporal.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "cats\/effect\/kernel\/GenTemporal.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "cats\/effect\/kernel\/GenTemporal.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "cats\/effect\/kernel\/GenTemporal.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "cats\/effect\/kernel\/GenTemporal.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "cats\/effect\/kernel\/GenTemporal.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "cats\/effect\/kernel\/GenTemporal.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "cats\/effect\/kernel\/GenTemporal.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "cats\/effect\/kernel\/GenTemporal.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]F[G[α]]]", "member" : "cats.Functor.compose", "link" : "cats\/effect\/kernel\/GenTemporal.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "cats\/effect\/kernel\/GenTemporal.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "cats\/effect\/kernel\/GenTemporal.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "cats\/effect\/kernel\/GenTemporal.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "cats\/effect\/kernel\/GenTemporal.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "cats.Functor.as", "link" : "cats\/effect\/kernel\/GenTemporal.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: F[A])(f: (A) => B): F[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "cats\/effect\/kernel\/GenTemporal.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "cats\/effect\/kernel\/GenTemporal.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "cats.Functor.void", "link" : "cats\/effect\/kernel\/GenTemporal.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "cats.Functor.lift", "link" : "cats\/effect\/kernel\/GenTemporal.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Functor.widen", "link" : "cats\/effect\/kernel\/GenTemporal.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "cats\/effect\/kernel\/GenTemporal.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Functor.imap", "link" : "cats\/effect\/kernel\/GenTemporal.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "cats\/effect\/kernel\/GenTemporal.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "cats\/effect\/kernel\/GenTemporal.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/GenTemporal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/GenTemporal.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/GenTemporal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/GenTemporal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/GenTemporal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/GenTemporal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/GenTemporal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenTemporal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenTemporal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/GenTemporal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/GenTemporal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/GenTemporal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/GenTemporal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/GenTemporal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/GenTemporal.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/GenTemporal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/GenTemporal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/GenTemporal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/GenTemporal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sleep", "tail" : "(time: FiniteDuration): F[Unit]", "member" : "cats.effect.kernel.GenTemporal.sleep", "link" : "cats\/effect\/kernel\/GenTemporal.html#sleep(time:scala.concurrent.duration.FiniteDuration):F[Unit]", "kind" : "abstract def"}, {"label" : "realTime", "tail" : "(): F[FiniteDuration]", "member" : "cats.effect.kernel.Clock.realTime", "link" : "cats\/effect\/kernel\/GenTemporal.html#realTime:F[scala.concurrent.duration.FiniteDuration]", "kind" : "abstract def"}, {"label" : "monotonic", "tail" : "(): F[FiniteDuration]", "member" : "cats.effect.kernel.Clock.monotonic", "link" : "cats\/effect\/kernel\/GenTemporal.html#monotonic:F[scala.concurrent.duration.FiniteDuration]", "kind" : "abstract def"}, {"label" : "deferred", "tail" : "(): F[Deferred[F, A]]", "member" : "cats.effect.kernel.GenConcurrent.deferred", "link" : "cats\/effect\/kernel\/GenTemporal.html#deferred[A]:F[cats.effect.kernel.Deferred[F,A]]", "kind" : "abstract def"}, {"label" : "ref", "tail" : "(a: A): F[Ref[F, A]]", "member" : "cats.effect.kernel.GenConcurrent.ref", "link" : "cats\/effect\/kernel\/GenTemporal.html#ref[A](a:A):F[cats.effect.kernel.Ref[F,A]]", "kind" : "abstract def"}, {"label" : "cede", "tail" : "(): F[Unit]", "member" : "cats.effect.kernel.GenSpawn.cede", "link" : "cats\/effect\/kernel\/GenTemporal.html#cede:F[Unit]", "kind" : "abstract def"}, {"label" : "never", "tail" : "(): F[A]", "member" : "cats.effect.kernel.GenSpawn.never", "link" : "cats\/effect\/kernel\/GenTemporal.html#never[A]:F[A]", "kind" : "abstract def"}, {"label" : "start", "tail" : "(fa: F[A]): F[Fiber[F, E, A]]", "member" : "cats.effect.kernel.GenSpawn.start", "link" : "cats\/effect\/kernel\/GenTemporal.html#start[A](fa:F[A]):F[cats.effect.kernel.Fiber[F,E,A]]", "kind" : "abstract def"}, {"label" : "unique", "tail" : "(): F[Token]", "member" : "cats.effect.kernel.Unique.unique", "link" : "cats\/effect\/kernel\/GenTemporal.html#unique:F[cats.effect.kernel.Unique.Token]", "kind" : "abstract def"}, {"label" : "onCancel", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.onCancel", "link" : "cats\/effect\/kernel\/GenTemporal.html#onCancel[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "abstract def"}, {"label" : "canceled", "tail" : "(): F[Unit]", "member" : "cats.effect.kernel.MonadCancel.canceled", "link" : "cats\/effect\/kernel\/GenTemporal.html#canceled:F[Unit]", "kind" : "abstract def"}, {"label" : "uncancelable", "tail" : "(body: (Poll[F]) => F[A]): F[A]", "member" : "cats.effect.kernel.MonadCancel.uncancelable", "link" : "cats\/effect\/kernel\/GenTemporal.html#uncancelable[A](body:cats.effect.kernel.Poll[F]=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "forceR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.effect.kernel.MonadCancel.forceR", "link" : "cats\/effect\/kernel\/GenTemporal.html#forceR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "abstract def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => F[Either[A, B]]): F[B]", "member" : "cats.FlatMap.tailRecM", "link" : "cats\/effect\/kernel\/GenTemporal.html#tailRecM[A,B](a:A)(f:A=>F[Either[A,B]]):F[B]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[B]", "member" : "cats.FlatMap.flatMap", "link" : "cats\/effect\/kernel\/GenTemporal.html#flatMap[A,B](fa:F[A])(f:A=>F[B]):F[B]", "kind" : "abstract def"}, {"label" : "handleErrorWith", "tail" : "(fa: F[A])(f: (E) => F[A]): F[A]", "member" : "cats.ApplicativeError.handleErrorWith", "link" : "cats\/effect\/kernel\/GenTemporal.html#handleErrorWith[A](fa:F[A])(f:E=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "raiseError", "tail" : "(e: E): F[A]", "member" : "cats.ApplicativeError.raiseError", "link" : "cats\/effect\/kernel\/GenTemporal.html#raiseError[A](e:E):F[A]", "kind" : "abstract def"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "cats.Applicative.pure", "link" : "cats\/effect\/kernel\/GenTemporal.html#pure[A](x:A):F[A]", "kind" : "abstract def"}], "shortDescription" : "A typeclass that encodes the notion of suspending fibers fora given duration."}, {"name" : "cats.effect.kernel.implicits", "shortDescription" : "", "object" : "cats\/effect\/kernel\/implicits$.html", "members_object" : [{"label" : "alignForParallelF", "tail" : "(F: GenSpawn[F, E]): Align[[β$3$]T[F, β$3$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.alignForParallelF", "link" : "cats\/effect\/kernel\/implicits$.html#alignForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.Align[[β$3$]cats.effect.kernel.Par.instance.T[F,β$3$]]", "kind" : "implicit def"}, {"label" : "commutativeApplicativeForParallelF", "tail" : "(F: GenSpawn[F, E]): CommutativeApplicative[[β$1$]T[F, β$1$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.commutativeApplicativeForParallelF", "link" : "cats\/effect\/kernel\/implicits$.html#commutativeApplicativeForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.CommutativeApplicative[[β$1$]cats.effect.kernel.Par.instance.T[F,β$1$]]", "kind" : "implicit def"}, {"label" : "parallelForGenSpawn", "tail" : "(M: GenSpawn[M, E]): Aux[M, [β$0$]T[M, β$0$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.parallelForGenSpawn", "link" : "cats\/effect\/kernel\/implicits$.html#parallelForGenSpawn[M[_],E](implicitM:cats.effect.kernel.GenSpawn[M,E]):cats.Parallel.Aux[M,[β$0$]cats.effect.kernel.Par.instance.T[M,β$0$]]", "kind" : "implicit def"}, {"label" : "clockOps", "tail" : "(wrapped: F[A]): ClockOps[F, A]", "member" : "cats.effect.kernel.syntax.ClockSyntax.clockOps", "link" : "cats\/effect\/kernel\/implicits$.html#clockOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.ClockOps[F,A]", "kind" : "implicit def"}, {"label" : "effectResourceOps", "tail" : "(wrapped: F[A]): EffectResourceOps[F, A]", "member" : "cats.effect.kernel.syntax.ResourceSyntax.effectResourceOps", "link" : "cats\/effect\/kernel\/implicits$.html#effectResourceOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.EffectResourceOps[F,A]", "kind" : "implicit def"}, {"label" : "asyncOps", "tail" : "(wrapped: F[A]): AsyncOps[F, A]", "member" : "cats.effect.kernel.syntax.AsyncSyntax.asyncOps", "link" : "cats\/effect\/kernel\/implicits$.html#asyncOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.AsyncOps[F,A]", "kind" : "implicit def"}, {"label" : "concurrentParSequenceOps", "tail" : "(wrapped: T[F[A]]): ConcurrentParSequenceNOps[T, F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParSequenceOps", "link" : "cats\/effect\/kernel\/implicits$.html#concurrentParSequenceOps[T[_],F[_],A](wrapped:T[F[A]]):cats.effect.kernel.syntax.ConcurrentParSequenceNOps[T,F,A]", "kind" : "implicit def"}, {"label" : "concurrentParTraverseOps", "tail" : "(wrapped: T[A]): ConcurrentParTraverseNOps[T, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParTraverseOps", "link" : "cats\/effect\/kernel\/implicits$.html#concurrentParTraverseOps[T[_],A](wrapped:T[A]):cats.effect.kernel.syntax.ConcurrentParTraverseNOps[T,A]", "kind" : "implicit def"}, {"label" : "genConcurrentOps_", "tail" : "(wrapped: F[A]): GenConcurrentOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.genConcurrentOps_", "link" : "cats\/effect\/kernel\/implicits$.html#genConcurrentOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenConcurrentOps_[F,A]", "kind" : "implicit def"}, {"label" : "genTemporalOps", "tail" : "(wrapped: F[A])(F: GenTemporal[F, E]): GenTemporalOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps", "link" : "cats\/effect\/kernel\/implicits$.html#genTemporalOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.syntax.GenTemporalOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genTemporalOps_", "tail" : "(wrapped: F[A]): GenTemporalOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps_", "link" : "cats\/effect\/kernel\/implicits$.html#genTemporalOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenTemporalOps_[F,A]", "kind" : "implicit def"}, {"label" : "genSpawnOps", "tail" : "(wrapped: F[A])(F: GenSpawn[F, E]): GenSpawnOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps", "link" : "cats\/effect\/kernel\/implicits$.html#genSpawnOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.syntax.GenSpawnOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genSpawnOps_", "tail" : "(wrapped: F[A]): GenSpawnOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps_", "link" : "cats\/effect\/kernel\/implicits$.html#genSpawnOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenSpawnOps_[F,A]", "kind" : "implicit def"}, {"label" : "monadCancelOps", "tail" : "(wrapped: F[A])(F: MonadCancel[F, E]): MonadCancelOps[F, A, E]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps", "link" : "cats\/effect\/kernel\/implicits$.html#monadCancelOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.syntax.MonadCancelOps[F,A,E]", "kind" : "implicit def"}, {"label" : "monadCancelOps_", "tail" : "(wrapped: F[A]): MonadCancelOps_[F, A]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps_", "link" : "cats\/effect\/kernel\/implicits$.html#monadCancelOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.MonadCancelOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/implicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/implicits$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/implicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/implicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/implicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/implicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/implicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/implicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/implicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/implicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/implicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/implicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/implicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/implicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/implicits$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/implicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/implicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/implicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/implicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.MonadCancel", "object" : "cats\/effect\/kernel\/MonadCancel$.html", "members_object" : [{"label" : "Uncancelable", "tail" : "", "member" : "cats.effect.kernel.MonadCancel.Uncancelable", "link" : "cats\/effect\/kernel\/MonadCancel$.html#Uncancelable[F[_],E]extendsAnyRef", "kind" : "trait"}, {"label" : "monadCancelForReaderWriterStateT", "tail" : "(F0: MonadCancel[F, E], L0: Monoid[L]): MonadCancel[[ε$6$]IndexedReaderWriterStateT[F, E0, L, S, S, ε$6$], E]", "member" : "cats.effect.kernel.MonadCancel.monadCancelForReaderWriterStateT", "link" : "cats\/effect\/kernel\/MonadCancel$.html#monadCancelForReaderWriterStateT[F[_],E0,L,S,E](implicitF0:cats.effect.kernel.MonadCancel[F,E],implicitL0:cats.Monoid[L]):cats.effect.kernel.MonadCancel[[ε$6$]cats.data.IndexedReaderWriterStateT[F,E0,L,S,S,ε$6$],E]", "kind" : "implicit def"}, {"label" : "monadCancelForStateT", "tail" : "(F0: MonadCancel[F, E]): MonadCancel[[γ$5$]IndexedStateT[F, S, S, γ$5$], E]", "member" : "cats.effect.kernel.MonadCancel.monadCancelForStateT", "link" : "cats\/effect\/kernel\/MonadCancel$.html#monadCancelForStateT[F[_],S,E](implicitF0:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.MonadCancel[[γ$5$]cats.data.IndexedStateT[F,S,S,γ$5$],E]", "kind" : "implicit def"}, {"label" : "monadCancelForWriterT", "tail" : "(F0: MonadCancel[F, E], L0: Monoid[L]): MonadCancel[[γ$4$]WriterT[F, L, γ$4$], E]", "member" : "cats.effect.kernel.MonadCancel.monadCancelForWriterT", "link" : "cats\/effect\/kernel\/MonadCancel$.html#monadCancelForWriterT[F[_],L,E](implicitF0:cats.effect.kernel.MonadCancel[F,E],implicitL0:cats.Monoid[L]):cats.effect.kernel.MonadCancel[[γ$4$]cats.data.WriterT[F,L,γ$4$],E]", "kind" : "implicit def"}, {"label" : "monadCancelForIorT", "tail" : "(F0: MonadCancel[F, E], L0: Semigroup[L]): MonadCancel[[γ$3$]IorT[F, L, γ$3$], E]", "member" : "cats.effect.kernel.MonadCancel.monadCancelForIorT", "link" : "cats\/effect\/kernel\/MonadCancel$.html#monadCancelForIorT[F[_],L,E](implicitF0:cats.effect.kernel.MonadCancel[F,E],implicitL0:cats.Semigroup[L]):cats.effect.kernel.MonadCancel[[γ$3$]cats.data.IorT[F,L,γ$3$],E]", "kind" : "implicit def"}, {"label" : "monadCancelForKleisli", "tail" : "(F0: MonadCancel[F, E]): MonadCancel[[γ$2$]Kleisli[F, R, γ$2$], E]", "member" : "cats.effect.kernel.MonadCancel.monadCancelForKleisli", "link" : "cats\/effect\/kernel\/MonadCancel$.html#monadCancelForKleisli[F[_],R,E](implicitF0:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.MonadCancel[[γ$2$]cats.data.Kleisli[F,R,γ$2$],E]", "kind" : "implicit def"}, {"label" : "monadCancelForEitherT", "tail" : "(F0: MonadCancel[F, E]): MonadCancel[[γ$1$]EitherT[F, E0, γ$1$], E]", "member" : "cats.effect.kernel.MonadCancel.monadCancelForEitherT", "link" : "cats\/effect\/kernel\/MonadCancel$.html#monadCancelForEitherT[F[_],E0,E](implicitF0:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.MonadCancel[[γ$1$]cats.data.EitherT[F,E0,γ$1$],E]", "kind" : "implicit def"}, {"label" : "monadCancelForOptionT", "tail" : "(F0: MonadCancel[F, E]): MonadCancel[[β$0$]OptionT[F, β$0$], E]", "member" : "cats.effect.kernel.MonadCancel.monadCancelForOptionT", "link" : "cats\/effect\/kernel\/MonadCancel$.html#monadCancelForOptionT[F[_],E](implicitF0:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.MonadCancel[[β$0$]cats.data.OptionT[F,β$0$],E]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(F: MonadCancel[F, _], d: DummyImplicit): F.type", "member" : "cats.effect.kernel.MonadCancel.apply", "link" : "cats\/effect\/kernel\/MonadCancel$.html#apply[F[_]](implicitF:cats.effect.kernel.MonadCancel[F,_],implicitd:DummyImplicit):F.type", "kind" : "def"}, {"label" : "apply", "tail" : "(F: MonadCancel[F, E]): F.type", "member" : "cats.effect.kernel.MonadCancel.apply", "link" : "cats\/effect\/kernel\/MonadCancel$.html#apply[F[_],E](implicitF:cats.effect.kernel.MonadCancel[F,E]):F.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/MonadCancel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/MonadCancel$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/MonadCancel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/MonadCancel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/MonadCancel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/MonadCancel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/MonadCancel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/MonadCancel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/MonadCancel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/MonadCancel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/MonadCancel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/MonadCancel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/MonadCancel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/MonadCancel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/MonadCancel$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/MonadCancel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/MonadCancel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/MonadCancel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/MonadCancel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/MonadCancel.html", "kind" : "trait", "members_trait" : [{"label" : "bracketFull", "tail" : "(acquire: (Poll[F]) => F[A])(use: (A) => F[B])(release: (A, Outcome[F, E, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketFull", "link" : "cats\/effect\/kernel\/MonadCancel.html#bracketFull[A,B](acquire:cats.effect.kernel.Poll[F]=>F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A, Outcome[F, E, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketCase", "link" : "cats\/effect\/kernel\/MonadCancel.html#bracketCase[A,B](acquire:F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracket", "link" : "cats\/effect\/kernel\/MonadCancel.html#bracket[A,B](acquire:F[A])(use:A=>F[B])(release:A=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: F[A])(fin: (Outcome[F, E, A]) => F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guaranteeCase", "link" : "cats\/effect\/kernel\/MonadCancel.html#guaranteeCase[A](fa:F[A])(fin:cats.effect.kernel.Outcome[F,E,A]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guarantee", "link" : "cats\/effect\/kernel\/MonadCancel.html#guarantee[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: F[A])(pf: PartialFunction[E, E]): F[A]", "member" : "cats.MonadError.adaptError", "link" : "cats\/effect\/kernel\/MonadCancel.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: F[A])(f: (Either[E, A]) => F[B]): F[A]", "member" : "cats.MonadError.attemptTap", "link" : "cats\/effect\/kernel\/MonadCancel.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: F[A])(recover: (E) => F[B], bind: (A) => F[B]): F[B]", "member" : "cats.MonadError.redeemWith", "link" : "cats\/effect\/kernel\/MonadCancel.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: F[Either[EE, A]]): F[A]", "member" : "cats.MonadError.rethrow", "link" : "cats\/effect\/kernel\/MonadCancel.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: F[A])(error: (A) => E)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensureOr", "link" : "cats\/effect\/kernel\/MonadCancel.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: F[A])(error: => E)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensure", "link" : "cats\/effect\/kernel\/MonadCancel.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (F[Boolean], F[A])*)(els: F[A]): F[A]", "member" : "cats.Monad.ifElseM", "link" : "cats\/effect\/kernel\/MonadCancel.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntilM", "link" : "cats\/effect\/kernel\/MonadCancel.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhileM", "link" : "cats\/effect\/kernel\/MonadCancel.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntil", "link" : "cats\/effect\/kernel\/MonadCancel.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhile", "link" : "cats\/effect\/kernel\/MonadCancel.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: F[A])(cond: => F[Boolean]): F[Unit]", "member" : "cats.Monad.untilM_", "link" : "cats\/effect\/kernel\/MonadCancel.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: F[A])(cond: => F[Boolean])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.untilM", "link" : "cats\/effect\/kernel\/MonadCancel.html#untilM[G[_],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: F[Boolean])(body: => F[A]): F[Unit]", "member" : "cats.Monad.whileM_", "link" : "cats\/effect\/kernel\/MonadCancel.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: F[Boolean])(body: => F[A])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.whileM", "link" : "cats\/effect\/kernel\/MonadCancel.html#whileM[G[_],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Monad.map", "link" : "cats\/effect\/kernel\/MonadCancel.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: F[Option[A]]): F[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "cats\/effect\/kernel\/MonadCancel.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => F[A]): F[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "cats\/effect\/kernel\/MonadCancel.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: F[A]): F[B]", "member" : "cats.FlatMap.foreverM", "link" : "cats\/effect\/kernel\/MonadCancel.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[A]", "member" : "cats.FlatMap.flatTap", "link" : "cats\/effect\/kernel\/MonadCancel.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: F[Boolean])(ifTrue: => F[B], ifFalse: => F[B]): F[B]", "member" : "cats.FlatMap.ifM", "link" : "cats\/effect\/kernel\/MonadCancel.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: F[A])(f: (A) => F[B]): F[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "cats\/effect\/kernel\/MonadCancel.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.FlatMap.productL", "link" : "cats\/effect\/kernel\/MonadCancel.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.FlatMap.productR", "link" : "cats\/effect\/kernel\/MonadCancel.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "cats.FlatMap.map2", "link" : "cats\/effect\/kernel\/MonadCancel.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "cats.FlatMap.ap2", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.FlatMap.product", "link" : "cats\/effect\/kernel\/MonadCancel.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.FlatMap.ap", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[A]", "member" : "cats.FlatMap.productLEval", "link" : "cats\/effect\/kernel\/MonadCancel.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[B]", "member" : "cats.FlatMap.productREval", "link" : "cats\/effect\/kernel\/MonadCancel.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: F[F[A]]): F[A]", "member" : "cats.FlatMap.flatten", "link" : "cats\/effect\/kernel\/MonadCancel.html#flatten[A](ffa:F[F[A]]):F[A]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[E, A]): F[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "cats\/effect\/kernel\/MonadCancel.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => E): F[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "cats\/effect\/kernel\/MonadCancel.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[E, A]): F[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "cats\/effect\/kernel\/MonadCancel.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.fromTry", "link" : "cats\/effect\/kernel\/MonadCancel.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, F, E]", "member" : "cats.ApplicativeError.catchOnly", "link" : "cats\/effect\/kernel\/MonadCancel.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.catchNonFatalEval", "link" : "cats\/effect\/kernel\/MonadCancel.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, E]): F[A]", "member" : "cats.ApplicativeError.catchNonFatal", "link" : "cats\/effect\/kernel\/MonadCancel.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: F[A])(pf: PartialFunction[E, F[Unit]]): F[A]", "member" : "cats.ApplicativeError.onError", "link" : "cats\/effect\/kernel\/MonadCancel.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: F[A])(recover: (E) => B, f: (A) => B): F[B]", "member" : "cats.ApplicativeError.redeem", "link" : "cats\/effect\/kernel\/MonadCancel.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: F[A])(pf: PartialFunction[E, F[A]]): F[A]", "member" : "cats.ApplicativeError.recoverWith", "link" : "cats\/effect\/kernel\/MonadCancel.html#recoverWith[A](fa:F[A])(pf:PartialFunction[E,F[A]]):F[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: F[A])(pf: PartialFunction[E, A]): F[A]", "member" : "cats.ApplicativeError.recover", "link" : "cats\/effect\/kernel\/MonadCancel.html#recover[A](fa:F[A])(pf:PartialFunction[E,A]):F[A]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: F[A])(tag: ClassTag[EE], ev: <:<[EE, E]): F[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "cats\/effect\/kernel\/MonadCancel.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: F[A]): EitherT[F, E, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "cats\/effect\/kernel\/MonadCancel.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: F[A]): F[Either[E, A]]", "member" : "cats.ApplicativeError.attempt", "link" : "cats\/effect\/kernel\/MonadCancel.html#attempt[A](fa:F[A]):F[Either[E,A]]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: F[A])(f: (E) => A): F[A]", "member" : "cats.ApplicativeError.handleError", "link" : "cats\/effect\/kernel\/MonadCancel.html#handleError[A](fa:F[A])(f:E=>A):F[A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.whenA", "link" : "cats\/effect\/kernel\/MonadCancel.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.unlessA", "link" : "cats\/effect\/kernel\/MonadCancel.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]F[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "cats\/effect\/kernel\/MonadCancel.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]F[G[α]]]", "member" : "cats.Applicative.compose", "link" : "cats\/effect\/kernel\/MonadCancel.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: F[A]): F[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "cats\/effect\/kernel\/MonadCancel.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "cats.Applicative.unit", "link" : "cats\/effect\/kernel\/MonadCancel.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): F[A]", "member" : "cats.InvariantMonoidal.point", "link" : "cats\/effect\/kernel\/MonadCancel.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "cats\/effect\/kernel\/MonadCancel.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "cats\/effect\/kernel\/MonadCancel.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "cats.Apply.map2Eval", "link" : "cats\/effect\/kernel\/MonadCancel.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "cats\/effect\/kernel\/MonadCancel.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "cats\/effect\/kernel\/MonadCancel.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "cats\/effect\/kernel\/MonadCancel.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "cats\/effect\/kernel\/MonadCancel.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "cats\/effect\/kernel\/MonadCancel.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "cats\/effect\/kernel\/MonadCancel.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "cats\/effect\/kernel\/MonadCancel.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "cats\/effect\/kernel\/MonadCancel.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "cats\/effect\/kernel\/MonadCancel.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "cats\/effect\/kernel\/MonadCancel.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "cats\/effect\/kernel\/MonadCancel.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "cats\/effect\/kernel\/MonadCancel.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "cats\/effect\/kernel\/MonadCancel.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "cats\/effect\/kernel\/MonadCancel.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "cats\/effect\/kernel\/MonadCancel.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "cats\/effect\/kernel\/MonadCancel.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "cats\/effect\/kernel\/MonadCancel.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "cats\/effect\/kernel\/MonadCancel.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "cats\/effect\/kernel\/MonadCancel.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "cats\/effect\/kernel\/MonadCancel.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "cats\/effect\/kernel\/MonadCancel.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "cats\/effect\/kernel\/MonadCancel.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "cats\/effect\/kernel\/MonadCancel.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "cats\/effect\/kernel\/MonadCancel.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "cats\/effect\/kernel\/MonadCancel.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "cats\/effect\/kernel\/MonadCancel.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "cats\/effect\/kernel\/MonadCancel.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]F[G[α]]]", "member" : "cats.Functor.compose", "link" : "cats\/effect\/kernel\/MonadCancel.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "cats\/effect\/kernel\/MonadCancel.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "cats\/effect\/kernel\/MonadCancel.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "cats\/effect\/kernel\/MonadCancel.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "cats\/effect\/kernel\/MonadCancel.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "cats.Functor.as", "link" : "cats\/effect\/kernel\/MonadCancel.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: F[A])(f: (A) => B): F[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "cats\/effect\/kernel\/MonadCancel.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "cats\/effect\/kernel\/MonadCancel.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "cats.Functor.void", "link" : "cats\/effect\/kernel\/MonadCancel.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "cats.Functor.lift", "link" : "cats\/effect\/kernel\/MonadCancel.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Functor.widen", "link" : "cats\/effect\/kernel\/MonadCancel.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "cats\/effect\/kernel\/MonadCancel.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Functor.imap", "link" : "cats\/effect\/kernel\/MonadCancel.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "cats\/effect\/kernel\/MonadCancel.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "cats\/effect\/kernel\/MonadCancel.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/MonadCancel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/MonadCancel.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/MonadCancel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/MonadCancel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/MonadCancel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/MonadCancel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/MonadCancel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/MonadCancel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/MonadCancel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/MonadCancel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/MonadCancel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/MonadCancel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/MonadCancel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/MonadCancel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/MonadCancel.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/MonadCancel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/MonadCancel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/MonadCancel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/MonadCancel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onCancel", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.onCancel", "link" : "cats\/effect\/kernel\/MonadCancel.html#onCancel[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "abstract def"}, {"label" : "canceled", "tail" : "(): F[Unit]", "member" : "cats.effect.kernel.MonadCancel.canceled", "link" : "cats\/effect\/kernel\/MonadCancel.html#canceled:F[Unit]", "kind" : "abstract def"}, {"label" : "uncancelable", "tail" : "(body: (Poll[F]) => F[A]): F[A]", "member" : "cats.effect.kernel.MonadCancel.uncancelable", "link" : "cats\/effect\/kernel\/MonadCancel.html#uncancelable[A](body:cats.effect.kernel.Poll[F]=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "forceR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.effect.kernel.MonadCancel.forceR", "link" : "cats\/effect\/kernel\/MonadCancel.html#forceR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "abstract def"}, {"label" : "rootCancelScope", "tail" : "(): CancelScope", "member" : "cats.effect.kernel.MonadCancel.rootCancelScope", "link" : "cats\/effect\/kernel\/MonadCancel.html#rootCancelScope:cats.effect.kernel.CancelScope", "kind" : "abstract def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => F[Either[A, B]]): F[B]", "member" : "cats.FlatMap.tailRecM", "link" : "cats\/effect\/kernel\/MonadCancel.html#tailRecM[A,B](a:A)(f:A=>F[Either[A,B]]):F[B]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[B]", "member" : "cats.FlatMap.flatMap", "link" : "cats\/effect\/kernel\/MonadCancel.html#flatMap[A,B](fa:F[A])(f:A=>F[B]):F[B]", "kind" : "abstract def"}, {"label" : "handleErrorWith", "tail" : "(fa: F[A])(f: (E) => F[A]): F[A]", "member" : "cats.ApplicativeError.handleErrorWith", "link" : "cats\/effect\/kernel\/MonadCancel.html#handleErrorWith[A](fa:F[A])(f:E=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "raiseError", "tail" : "(e: E): F[A]", "member" : "cats.ApplicativeError.raiseError", "link" : "cats\/effect\/kernel\/MonadCancel.html#raiseError[A](e:E):F[A]", "kind" : "abstract def"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "cats.Applicative.pure", "link" : "cats\/effect\/kernel\/MonadCancel.html#pure[A](x:A):F[A]", "kind" : "abstract def"}], "shortDescription" : "A typeclass that characterizes monads which support safe cancelation,masking, and finalization."}, {"name" : "cats.effect.kernel.Outcome", "object" : "cats\/effect\/kernel\/Outcome$.html", "members_object" : [{"label" : "OutcomeApplicativeError", "tail" : "", "member" : "cats.effect.kernel.LowPriorityImplicits.OutcomeApplicativeError", "link" : "cats\/effect\/kernel\/Outcome$.html#OutcomeApplicativeError[F[_],E]extendsApplicativeError[[γ$1$]cats.effect.kernel.Outcome[F,E,γ$1$],E]withBifunctor[[β$2$,γ$3$]cats.effect.kernel.Outcome[F,β$2$,γ$3$]]", "kind" : "class"}, {"label" : "Canceled", "tail" : "", "member" : "cats.effect.kernel.Outcome.Canceled", "link" : "cats\/effect\/kernel\/Outcome$.html#Canceled[F[_],E,A]extendsOutcome[F,E,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Errored", "tail" : "", "member" : "cats.effect.kernel.Outcome.Errored", "link" : "cats\/effect\/kernel\/Outcome$.html#Errored[F[_],E,A]extendsOutcome[F,E,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Succeeded", "tail" : "", "member" : "cats.effect.kernel.Outcome.Succeeded", "link" : "cats\/effect\/kernel\/Outcome$.html#Succeeded[F[_],E,A]extendsOutcome[F,E,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "monadError", "tail" : "(F: Monad[F], FT: Traverse[F]): MonadError[[γ$4$]Outcome[F, E, γ$4$], E]", "member" : "cats.effect.kernel.Outcome.monadError", "link" : "cats\/effect\/kernel\/Outcome$.html#monadError[F[_],E](implicitF:cats.Monad[F],implicitFT:cats.Traverse[F]):cats.MonadError[[γ$4$]cats.effect.kernel.Outcome[F,E,γ$4$],E]", "kind" : "implicit def"}, {"label" : "show", "tail" : "(FA: Show[F[A]], E: Show[E]): Show[Outcome[F, E, A]]", "member" : "cats.effect.kernel.Outcome.show", "link" : "cats\/effect\/kernel\/Outcome$.html#show[F[_],E,A](implicitFA:cats.Show[F[A]],implicitE:cats.Show[E]):cats.Show[cats.effect.kernel.Outcome[F,E,A]]", "kind" : "implicit def"}, {"label" : "order", "tail" : "(arg0: Order[E], FA: Order[F[A]]): Order[Outcome[F, E, A]]", "member" : "cats.effect.kernel.Outcome.order", "link" : "cats\/effect\/kernel\/Outcome$.html#order[F[_],E,A](implicitevidence$4:cats.Order[E],implicitFA:cats.Order[F[A]]):cats.Order[cats.effect.kernel.Outcome[F,E,A]]", "kind" : "implicit def"}, {"label" : "fromEither", "tail" : "(either: Either[E, A])(arg0: Applicative[F]): Outcome[F, E, A]", "member" : "cats.effect.kernel.Outcome.fromEither", "link" : "cats\/effect\/kernel\/Outcome$.html#fromEither[F[_],E,A](either:scala.util.Either[E,A])(implicitevidence$3:cats.Applicative[F]):cats.effect.kernel.Outcome[F,E,A]", "kind" : "def"}, {"label" : "canceled", "tail" : "(): Outcome[F, E, A]", "member" : "cats.effect.kernel.Outcome.canceled", "link" : "cats\/effect\/kernel\/Outcome$.html#canceled[F[_],E,A]:cats.effect.kernel.Outcome[F,E,A]", "kind" : "def"}, {"label" : "errored", "tail" : "(e: E): Outcome[F, E, A]", "member" : "cats.effect.kernel.Outcome.errored", "link" : "cats\/effect\/kernel\/Outcome$.html#errored[F[_],E,A](e:E):cats.effect.kernel.Outcome[F,E,A]", "kind" : "def"}, {"label" : "succeeded", "tail" : "(fa: F[A]): Outcome[F, E, A]", "member" : "cats.effect.kernel.Outcome.succeeded", "link" : "cats\/effect\/kernel\/Outcome$.html#succeeded[F[_],E,A](fa:F[A]):cats.effect.kernel.Outcome[F,E,A]", "kind" : "def"}, {"label" : "applicativeError", "tail" : "(F: Applicative[F]): ApplicativeError[[γ$0$]Outcome[F, E, γ$0$], E]", "member" : "cats.effect.kernel.LowPriorityImplicits.applicativeError", "link" : "cats\/effect\/kernel\/Outcome$.html#applicativeError[F[_],E](implicitF:cats.Applicative[F]):cats.ApplicativeError[[γ$0$]cats.effect.kernel.Outcome[F,E,γ$0$],E]", "kind" : "implicit def"}, {"label" : "eq", "tail" : "(arg0: Eq[E], FA: Eq[F[A]]): Eq[Outcome[F, E, A]]", "member" : "cats.effect.kernel.LowPriorityImplicits.eq", "link" : "cats\/effect\/kernel\/Outcome$.html#eq[F[_],E,A](implicitevidence$1:cats.Eq[E],implicitFA:cats.Eq[F[A]]):cats.Eq[cats.effect.kernel.Outcome[F,E,A]]", "kind" : "implicit def"}, {"label" : "showUnknown", "tail" : "(E: Show[E]): Show[Outcome[F, E, A]]", "member" : "cats.effect.kernel.LowPriorityImplicits.showUnknown", "link" : "cats\/effect\/kernel\/Outcome$.html#showUnknown[F[_],E,A](implicitE:cats.Show[E]):cats.Show[cats.effect.kernel.Outcome[F,E,A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Outcome$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Outcome$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Outcome$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Outcome$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Outcome$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Outcome$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Outcome$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Outcome$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Outcome$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Outcome$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Outcome$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Outcome$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Outcome$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Outcome$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Outcome$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Outcome$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Outcome$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Outcome$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Outcome$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/Outcome.html", "kind" : "trait", "members_trait" : [{"label" : "mapK", "tail" : "(f: ~>[F, G]): Outcome[G, E, A]", "member" : "cats.effect.kernel.Outcome.mapK", "link" : "cats\/effect\/kernel\/Outcome.html#mapK[G[_]](f:F~>G):cats.effect.kernel.Outcome[G,E,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(canceled: => B, errored: (E) => B, completed: (F[A]) => B): B", "member" : "cats.effect.kernel.Outcome.fold", "link" : "cats\/effect\/kernel\/Outcome.html#fold[B](canceled:=>B,errored:E=>B,completed:F[A]=>B):B", "kind" : "def"}, {"label" : "embedNever", "tail" : "(F: GenSpawn[F, E]): F[A]", "member" : "cats.effect.kernel.Outcome.embedNever", "link" : "cats\/effect\/kernel\/Outcome.html#embedNever(implicitF:cats.effect.kernel.GenSpawn[F,E]):F[A]", "kind" : "def"}, {"label" : "embed", "tail" : "(onCancel: F[A])(F: MonadCancel[F, E]): F[A]", "member" : "cats.effect.kernel.Outcome.embed", "link" : "cats\/effect\/kernel\/Outcome.html#embed(onCancel:F[A])(implicitF:cats.effect.kernel.MonadCancel[F,E]):F[A]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cats\/effect\/kernel\/Outcome.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "cats\/effect\/kernel\/Outcome.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "cats\/effect\/kernel\/Outcome.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "cats\/effect\/kernel\/Outcome.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Outcome.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Outcome.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Outcome.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Outcome.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Outcome.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Outcome.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Outcome.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Outcome.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Outcome.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Outcome.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Outcome.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Outcome.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Outcome.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Outcome.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Outcome.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Outcome.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Outcome.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Outcome.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Outcome.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "cats\/effect\/kernel\/Outcome.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "cats\/effect\/kernel\/Outcome.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "cats\/effect\/kernel\/Outcome.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.Par", "shortDescription" : "", "object" : "cats\/effect\/kernel\/Par$.html", "members_object" : [{"label" : "instance", "tail" : ": ParallelFImpl", "member" : "cats.effect.kernel.Par.instance", "link" : "cats\/effect\/kernel\/Par$.html#instance:cats.effect.kernel.Par.ParallelFImpl", "kind" : "val"}, {"label" : "ParallelF", "tail" : "", "member" : "cats.effect.kernel.Par.ParallelF", "link" : "cats\/effect\/kernel\/Par$.html#ParallelF", "kind" : "object"}, {"label" : "ParallelF", "tail" : "", "member" : "cats.effect.kernel.Par.ParallelF", "link" : "cats\/effect\/kernel\/Par$.html#ParallelF[F[_],A]=cats.effect.kernel.Par.instance.T[F,A]", "kind" : "type"}, {"label" : "ParallelFImpl", "tail" : "", "member" : "cats.effect.kernel.Par.ParallelFImpl", "link" : "cats\/effect\/kernel\/Par$.html#ParallelFImplextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Par$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Par$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Par$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Par$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Par$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Par$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Par$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Par$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Par$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Par$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Par$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Par$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Par$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Par$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Par$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Par$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Par$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Par$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Par$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.Poll", "trait" : "cats\/effect\/kernel\/Poll.html", "kind" : "trait", "members_trait" : [{"label" : "narrow", "tail" : "(): FunctionK[F0, F]", "member" : "cats.arrow.FunctionK.narrow", "link" : "cats\/effect\/kernel\/Poll.html#narrow[F0[x<:<?>]<:F[x]]:cats.arrow.FunctionK[F0,G]", "kind" : "def"}, {"label" : "widen", "tail" : "(): FunctionK[F, G0]", "member" : "cats.arrow.FunctionK.widen", "link" : "cats\/effect\/kernel\/Poll.html#widen[G0[x<:<?>]>:G[x]]:cats.arrow.FunctionK[F,G0]", "kind" : "def"}, {"label" : "and", "tail" : "(h: FunctionK[F, H]): FunctionK[F, [γ$2$]Tuple2K[F, H, γ$2$]]", "member" : "cats.arrow.FunctionK.and", "link" : "cats\/effect\/kernel\/Poll.html#and[H[_<:<?>]](h:cats.arrow.FunctionK[F,H]):cats.arrow.FunctionK[F,[γ$2$]cats.data.Tuple2K[G,H,γ$2$]]", "kind" : "def"}, {"label" : "or", "tail" : "(h: FunctionK[H, F]): FunctionK[[γ$0$]EitherK[F, H, γ$0$], F]", "member" : "cats.arrow.FunctionK.or", "link" : "cats\/effect\/kernel\/Poll.html#or[H[_<:<?>]](h:cats.arrow.FunctionK[H,G]):cats.arrow.FunctionK[[γ$0$]cats.data.EitherK[F,H,γ$0$],G]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: FunctionK[F, H]): FunctionK[F, H]", "member" : "cats.arrow.FunctionK.andThen", "link" : "cats\/effect\/kernel\/Poll.html#andThen[H[_<:<?>]](f:cats.arrow.FunctionK[G,H]):cats.arrow.FunctionK[F,H]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: FunctionK[E, F]): FunctionK[E, F]", "member" : "cats.arrow.FunctionK.compose", "link" : "cats\/effect\/kernel\/Poll.html#compose[E[_<:<?>]](f:cats.arrow.FunctionK[E,F]):cats.arrow.FunctionK[E,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Poll.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Poll.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Poll.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Poll.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Poll.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Poll.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Poll.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Poll.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Poll.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Poll.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Poll.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Poll.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Poll.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Poll.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Poll.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Poll.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Poll.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Poll.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Poll.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(fa: F[A]): F[A]", "member" : "cats.arrow.FunctionK.apply", "link" : "cats\/effect\/kernel\/Poll.html#apply[A](fa:F[A]):G[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.Ref", "shortDescription" : "A thread-safe, concurrent mutable reference.", "object" : "cats\/effect\/kernel\/Ref$.html", "members_class" : [{"label" : "mapK", "tail" : "(f: ~>[F, G])(F: Functor[F]): Ref[G, A]", "member" : "cats.effect.kernel.Ref.mapK", "link" : "cats\/effect\/kernel\/Ref.html#mapK[G[_]](f:F~>G)(implicitF:cats.Functor[F]):cats.effect.kernel.Ref[G,A]", "kind" : "def"}, {"label" : "updateAndGet", "tail" : "(f: (A) => A): F[A]", "member" : "cats.effect.kernel.Ref.updateAndGet", "link" : "cats\/effect\/kernel\/Ref.html#updateAndGet(f:A=>A):F[A]", "kind" : "def"}, {"label" : "getAndSet", "tail" : "(a: A): F[A]", "member" : "cats.effect.kernel.Ref.getAndSet", "link" : "cats\/effect\/kernel\/Ref.html#getAndSet(a:A):F[A]", "kind" : "def"}, {"label" : "getAndUpdate", "tail" : "(f: (A) => A): F[A]", "member" : "cats.effect.kernel.Ref.getAndUpdate", "link" : "cats\/effect\/kernel\/Ref.html#getAndUpdate(f:A=>A):F[A]", "kind" : "def"}, {"member" : "cats.effect.kernel.Ref#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Ref.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Ref.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Ref.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Ref.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Ref.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Ref.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Ref.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Ref.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Ref.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Ref.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Ref.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Ref.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Ref.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Ref.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Ref.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Ref.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Ref.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Ref.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Ref.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "modifyState", "tail" : "(state: State[A, B]): F[B]", "member" : "cats.effect.kernel.Ref.modifyState", "link" : "cats\/effect\/kernel\/Ref.html#modifyState[B](state:cats.data.State[A,B]):F[B]", "kind" : "abstract def"}, {"label" : "tryModifyState", "tail" : "(state: State[A, B]): F[Option[B]]", "member" : "cats.effect.kernel.Ref.tryModifyState", "link" : "cats\/effect\/kernel\/Ref.html#tryModifyState[B](state:cats.data.State[A,B]):F[Option[B]]", "kind" : "abstract def"}, {"label" : "modify", "tail" : "(f: (A) => (A, B)): F[B]", "member" : "cats.effect.kernel.Ref.modify", "link" : "cats\/effect\/kernel\/Ref.html#modify[B](f:A=>(A,B)):F[B]", "kind" : "abstract def"}, {"label" : "update", "tail" : "(f: (A) => A): F[Unit]", "member" : "cats.effect.kernel.Ref.update", "link" : "cats\/effect\/kernel\/Ref.html#update(f:A=>A):F[Unit]", "kind" : "abstract def"}, {"label" : "tryModify", "tail" : "(f: (A) => (A, B)): F[Option[B]]", "member" : "cats.effect.kernel.Ref.tryModify", "link" : "cats\/effect\/kernel\/Ref.html#tryModify[B](f:A=>(A,B)):F[Option[B]]", "kind" : "abstract def"}, {"label" : "tryUpdate", "tail" : "(f: (A) => A): F[Boolean]", "member" : "cats.effect.kernel.Ref.tryUpdate", "link" : "cats\/effect\/kernel\/Ref.html#tryUpdate(f:A=>A):F[Boolean]", "kind" : "abstract def"}, {"label" : "access", "tail" : "(): F[(A, (A) => F[Boolean])]", "member" : "cats.effect.kernel.Ref.access", "link" : "cats\/effect\/kernel\/Ref.html#access:F[(A,A=>F[Boolean])]", "kind" : "abstract def"}, {"label" : "set", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.kernel.RefSink.set", "link" : "cats\/effect\/kernel\/Ref.html#set(a:A):F[Unit]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): F[A]", "member" : "cats.effect.kernel.RefSource.get", "link" : "cats\/effect\/kernel\/Ref.html#get:F[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "catsInvariantForRef", "tail" : "(arg0: Functor[F]): Invariant[[β$2$]Ref[F, β$2$]]", "member" : "cats.effect.kernel.Ref.catsInvariantForRef", "link" : "cats\/effect\/kernel\/Ref$.html#catsInvariantForRef[F[_]](implicitevidence$5:cats.Functor[F]):cats.Invariant[[β$2$]cats.effect.kernel.Ref[F,β$2$]]", "kind" : "implicit def"}, {"label" : "ApplyBuilders", "tail" : "", "member" : "cats.effect.kernel.Ref.ApplyBuilders", "link" : "cats\/effect\/kernel\/Ref$.html#ApplyBuilders[F[_]]extendsAnyVal", "kind" : "final class"}, {"label" : "lens", "tail" : "(ref: Ref[F, A])(get: (A) => B, set: (A) => (B) => A)(F: Sync[F]): Ref[F, B]", "member" : "cats.effect.kernel.Ref.lens", "link" : "cats\/effect\/kernel\/Ref$.html#lens[F[_],A,B<:AnyRef](ref:cats.effect.kernel.Ref[F,A])(get:A=>B,set:A=>(B=>A))(implicitF:cats.effect.kernel.Sync[F]):cats.effect.kernel.Ref[F,B]", "kind" : "def"}, {"label" : "in", "tail" : "(a: A)(F: Sync[F], G: Sync[G]): F[Ref[G, A]]", "member" : "cats.effect.kernel.Ref.in", "link" : "cats\/effect\/kernel\/Ref$.html#in[F[_],G[_],A](a:A)(implicitF:cats.effect.kernel.Sync[F],implicitG:cats.effect.kernel.Sync[G]):F[cats.effect.kernel.Ref[G,A]]", "kind" : "def"}, {"label" : "unsafe", "tail" : "(a: A)(F: Sync[F]): Ref[F, A]", "member" : "cats.effect.kernel.Ref.unsafe", "link" : "cats\/effect\/kernel\/Ref$.html#unsafe[F[_],A](a:A)(implicitF:cats.effect.kernel.Sync[F]):cats.effect.kernel.Ref[F,A]", "kind" : "def"}, {"label" : "ofEffect", "tail" : "(fa: F[A])(arg0: Make[F], arg1: FlatMap[F]): F[Ref[F, A]]", "member" : "cats.effect.kernel.Ref.ofEffect", "link" : "cats\/effect\/kernel\/Ref$.html#ofEffect[F[_],A](fa:F[A])(implicitevidence$3:cats.effect.kernel.Ref.Make[F],implicitevidence$4:cats.FlatMap[F]):F[cats.effect.kernel.Ref[F,A]]", "kind" : "def"}, {"label" : "copyOf", "tail" : "(source: Ref[F, A])(arg0: Make[F], arg1: FlatMap[F]): F[Ref[F, A]]", "member" : "cats.effect.kernel.Ref.copyOf", "link" : "cats\/effect\/kernel\/Ref$.html#copyOf[F[_],A](source:cats.effect.kernel.Ref[F,A])(implicitevidence$1:cats.effect.kernel.Ref.Make[F],implicitevidence$2:cats.FlatMap[F]):F[cats.effect.kernel.Ref[F,A]]", "kind" : "def"}, {"label" : "of", "tail" : "(a: A)(mk: Make[F]): F[Ref[F, A]]", "member" : "cats.effect.kernel.Ref.of", "link" : "cats\/effect\/kernel\/Ref$.html#of[F[_],A](a:A)(implicitmk:cats.effect.kernel.Ref.Make[F]):F[cats.effect.kernel.Ref[F,A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(mk: Make[F]): ApplyBuilders[F]", "member" : "cats.effect.kernel.Ref.apply", "link" : "cats\/effect\/kernel\/Ref$.html#apply[F[_]](implicitmk:cats.effect.kernel.Ref.Make[F]):cats.effect.kernel.Ref.ApplyBuilders[F]", "kind" : "def"}, {"label" : "Make", "tail" : "", "member" : "cats.effect.kernel.Ref.Make", "link" : "cats\/effect\/kernel\/Ref$.html#Make", "kind" : "object"}, {"label" : "Make", "tail" : "", "member" : "cats.effect.kernel.Ref.Make", "link" : "cats\/effect\/kernel\/Ref$.html#Make[F[_]]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Ref$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Ref$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Ref$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Ref$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Ref$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Ref$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Ref$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Ref$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Ref$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Ref$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Ref$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Ref$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Ref$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Ref$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Ref$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Ref$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Ref$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Ref$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Ref$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/Ref.html", "kind" : "class"}, {"name" : "cats.effect.kernel.RefSink", "object" : "cats\/effect\/kernel\/RefSink$.html", "members_object" : [{"label" : "catsContravariantForRefSink", "tail" : "(): Contravariant[[β$6$]RefSink[F, β$6$]]", "member" : "cats.effect.kernel.RefSink.catsContravariantForRefSink", "link" : "cats\/effect\/kernel\/RefSink$.html#catsContravariantForRefSink[F[_]]:cats.Contravariant[[β$6$]cats.effect.kernel.RefSink[F,β$6$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/RefSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/RefSink$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/RefSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/RefSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/RefSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/RefSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/RefSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/RefSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/RefSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/RefSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/RefSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/RefSink$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/RefSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/RefSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/RefSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/RefSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/RefSink.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/RefSink.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/RefSink.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/RefSink.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/RefSink.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/RefSink.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/RefSink.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/RefSink.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSink.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSink.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSink.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/RefSink.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/RefSink.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/RefSink.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/RefSink.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/RefSink.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/RefSink.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/RefSink.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/RefSink.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/RefSink.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "set", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.kernel.RefSink.set", "link" : "cats\/effect\/kernel\/RefSink.html#set(a:A):F[Unit]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.RefSource", "object" : "cats\/effect\/kernel\/RefSource$.html", "members_object" : [{"label" : "catsFunctorForRefSource", "tail" : "(arg0: Functor[F]): Functor[[β$4$]RefSource[F, β$4$]]", "member" : "cats.effect.kernel.RefSource.catsFunctorForRefSource", "link" : "cats\/effect\/kernel\/RefSource$.html#catsFunctorForRefSource[F[_]](implicitevidence$6:cats.Functor[F]):cats.Functor[[β$4$]cats.effect.kernel.RefSource[F,β$4$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/RefSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/RefSource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/RefSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/RefSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/RefSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/RefSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/RefSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/RefSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/RefSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/RefSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/RefSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/RefSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/RefSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/RefSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/RefSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/RefSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/RefSource.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/RefSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/RefSource.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/RefSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/RefSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/RefSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/RefSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/RefSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/RefSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/RefSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/RefSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/RefSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/RefSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/RefSource.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/RefSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/RefSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/RefSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/RefSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "get", "tail" : "(): F[A]", "member" : "cats.effect.kernel.RefSource.get", "link" : "cats\/effect\/kernel\/RefSource.html#get:F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.Resource", "shortDescription" : "Resource is a data structure which encodes the idea of executingan action which has an associated finalizer that needs to be runwhen the action completes.", "object" : "cats\/effect\/kernel\/Resource$.html", "members_class" : [{"label" : "surroundK", "tail" : "(F: MonadCancel[F, Throwable]): ~>[F, F]", "member" : "cats.effect.kernel.Resource.surroundK", "link" : "cats\/effect\/kernel\/Resource.html#surroundK(implicitF:cats.effect.kernel.MonadCancel[F,Throwable]):F~>F", "kind" : "def"}, {"label" : "surround", "tail" : "(gb: F[B])(F: MonadCancel[F, Throwable]): F[B]", "member" : "cats.effect.kernel.Resource.surround", "link" : "cats\/effect\/kernel\/Resource.html#surround[B](gb:F[B])(implicitF:cats.effect.kernel.MonadCancel[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "evalTap", "tail" : "(f: (A) => F[B]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.evalTap", "link" : "cats\/effect\/kernel\/Resource.html#evalTap[B](f:A=>F[B]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "evalMap", "tail" : "(f: (A) => F[B]): Resource[F, B]", "member" : "cats.effect.kernel.Resource.evalMap", "link" : "cats\/effect\/kernel\/Resource.html#evalMap[B](f:A=>F[B]):cats.effect.kernel.Resource[F,B]", "kind" : "def"}, {"label" : "allocated", "tail" : "(F: MonadCancel[F, Throwable]): F[(B, F[Unit])]", "member" : "cats.effect.kernel.Resource.allocated", "link" : "cats\/effect\/kernel\/Resource.html#allocated[B>:A](implicitF:cats.effect.kernel.MonadCancel[F,Throwable]):F[(B,F[Unit])]", "kind" : "def"}, {"label" : "onFinalizeCase", "tail" : "(f: (ExitCase) => F[Unit])(F: Applicative[F]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.onFinalizeCase", "link" : "cats\/effect\/kernel\/Resource.html#onFinalizeCase(f:cats.effect.kernel.Resource.ExitCase=>F[Unit])(implicitF:cats.Applicative[F]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "onFinalize", "tail" : "(finalizer: F[Unit])(F: Applicative[F]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.onFinalize", "link" : "cats\/effect\/kernel\/Resource.html#onFinalize(finalizer:F[Unit])(implicitF:cats.Applicative[F]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "preAllocate", "tail" : "(precede: F[Unit]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.preAllocate", "link" : "cats\/effect\/kernel\/Resource.html#preAllocate(precede:F[Unit]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "mapK", "tail" : "(f: ~>[F, G])(F: MonadCancel[F, _], G: MonadCancel[G, _]): Resource[G, A]", "member" : "cats.effect.kernel.Resource.mapK", "link" : "cats\/effect\/kernel\/Resource.html#mapK[G[_]](f:F~>G)(implicitF:cats.effect.kernel.MonadCancel[F,_],implicitG:cats.effect.kernel.MonadCancel[G,_]):cats.effect.kernel.Resource[G,A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Resource[F, B]", "member" : "cats.effect.kernel.Resource.map", "link" : "cats\/effect\/kernel\/Resource.html#map[B](f:A=>B):cats.effect.kernel.Resource[F,B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => Resource[F, B]): Resource[F, B]", "member" : "cats.effect.kernel.Resource.flatMap", "link" : "cats\/effect\/kernel\/Resource.html#flatMap[B](f:A=>cats.effect.kernel.Resource[F,B]):cats.effect.kernel.Resource[F,B]", "kind" : "def"}, {"label" : "race", "tail" : "(that: Resource[F, B])(F: Concurrent[F]): Resource[F, Either[A, B]]", "member" : "cats.effect.kernel.Resource.race", "link" : "cats\/effect\/kernel\/Resource.html#race[B](that:cats.effect.kernel.Resource[F,B])(implicitF:cats.effect.kernel.Concurrent[F]):cats.effect.kernel.Resource[F,Either[A,B]]", "kind" : "def"}, {"label" : "both", "tail" : "(that: Resource[F, B])(F: Concurrent[F]): Resource[F, (A, B)]", "member" : "cats.effect.kernel.Resource.both", "link" : "cats\/effect\/kernel\/Resource.html#both[B](that:cats.effect.kernel.Resource[F,B])(implicitF:cats.effect.kernel.Concurrent[F]):cats.effect.kernel.Resource[F,(A,B)]", "kind" : "def"}, {"label" : "useKleisliK", "tail" : "(F: MonadCancel[F, Throwable]): ~>[[γ$0$]Kleisli[F, B, γ$0$], F]", "member" : "cats.effect.kernel.Resource.useKleisliK", "link" : "cats\/effect\/kernel\/Resource.html#useKleisliK[B>:A](implicitF:cats.effect.kernel.MonadCancel[F,Throwable]):[γ$0$]cats.data.Kleisli[F,B,γ$0$]~>F", "kind" : "def"}, {"label" : "useKleisli", "tail" : "(usage: Kleisli[F, B, C])(F: MonadCancel[F, Throwable]): F[C]", "member" : "cats.effect.kernel.Resource.useKleisli", "link" : "cats\/effect\/kernel\/Resource.html#useKleisli[B>:A,C](usage:cats.data.Kleisli[F,B,C])(implicitF:cats.effect.kernel.MonadCancel[F,Throwable]):F[C]", "kind" : "def"}, {"label" : "use_", "tail" : "(F: MonadCancel[F, Throwable]): F[Unit]", "member" : "cats.effect.kernel.Resource.use_", "link" : "cats\/effect\/kernel\/Resource.html#use_(implicitF:cats.effect.kernel.MonadCancel[F,Throwable]):F[Unit]", "kind" : "def"}, {"label" : "useForever", "tail" : "(F: Spawn[F]): F[Nothing]", "member" : "cats.effect.kernel.Resource.useForever", "link" : "cats\/effect\/kernel\/Resource.html#useForever(implicitF:cats.effect.kernel.Spawn[F]):F[Nothing]", "kind" : "def"}, {"label" : "use", "tail" : "(f: (A) => F[B])(F: MonadCancel[F, Throwable]): F[B]", "member" : "cats.effect.kernel.Resource.use", "link" : "cats\/effect\/kernel\/Resource.html#use[B](f:A=>F[B])(implicitF:cats.effect.kernel.MonadCancel[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Resource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Resource.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Resource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Resource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Resource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Resource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Resource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Resource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Resource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Resource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Resource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Resource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Resource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Resource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Resource.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Resource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Resource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Resource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Resource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "parallelForResource", "tail" : "(arg0: Concurrent[F]): Aux[[β$8$]Resource[F, β$8$], [β$9$]T[[β$7$]Resource[F, β$7$], β$9$]]", "member" : "cats.effect.kernel.Resource.parallelForResource", "link" : "cats\/effect\/kernel\/Resource$.html#parallelForResource[F[_]](implicitevidence$8:cats.effect.kernel.Concurrent[F]):cats.Parallel.Aux[[β$8$]cats.effect.kernel.Resource[F,β$8$],[β$9$]cats.effect.kernel.Par.instance.T[[β$7$]cats.effect.kernel.Resource[F,β$7$],β$9$]]", "kind" : "implicit def"}, {"label" : "Par", "tail" : "", "member" : "cats.effect.kernel.Resource.Par", "link" : "cats\/effect\/kernel\/Resource$.html#Par[F[_],A]=cats.effect.kernel.ParallelF[[β$7$]cats.effect.kernel.Resource[F,β$7$],A]", "kind" : "type"}, {"label" : "NestedSyntax", "tail" : "", "member" : "cats.effect.kernel.Resource.NestedSyntax", "link" : "cats\/effect\/kernel\/Resource$.html#NestedSyntax[F[_],A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "ExitCase", "tail" : "", "member" : "cats.effect.kernel.Resource.ExitCase", "link" : "cats\/effect\/kernel\/Resource$.html#ExitCase", "kind" : "object"}, {"label" : "ExitCase", "tail" : "", "member" : "cats.effect.kernel.Resource.ExitCase", "link" : "cats\/effect\/kernel\/Resource$.html#ExitCaseextendsProductwithSerializable", "kind" : "sealed trait"}, {"label" : "Eval", "tail" : "", "member" : "cats.effect.kernel.Resource.Eval", "link" : "cats\/effect\/kernel\/Resource$.html#Eval[F[_],A]extendsResource[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Pure", "tail" : "", "member" : "cats.effect.kernel.Resource.Pure", "link" : "cats\/effect\/kernel\/Resource$.html#Pure[F[_],+A]extendsResource[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Bind", "tail" : "", "member" : "cats.effect.kernel.Resource.Bind", "link" : "cats\/effect\/kernel\/Resource$.html#Bind[F[_],S,+A]extendsResource[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Allocate", "tail" : "", "member" : "cats.effect.kernel.Resource.Allocate", "link" : "cats\/effect\/kernel\/Resource$.html#Allocate[F[_],A]extendsResource[F,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "fromAutoCloseable", "tail" : "(acquire: F[A])(F: Sync[F]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.fromAutoCloseable", "link" : "cats\/effect\/kernel\/Resource$.html#fromAutoCloseable[F[_],A<:AutoCloseable](acquire:F[A])(implicitF:cats.effect.kernel.Sync[F]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "race", "tail" : "(rfa: Resource[F, A], rfb: Resource[F, B])(arg0: Concurrent[F]): Resource[F, Either[A, B]]", "member" : "cats.effect.kernel.Resource.race", "link" : "cats\/effect\/kernel\/Resource$.html#race[F[_],A,B](rfa:cats.effect.kernel.Resource[F,A],rfb:cats.effect.kernel.Resource[F,B])(implicitevidence$4:cats.effect.kernel.Concurrent[F]):cats.effect.kernel.Resource[F,Either[A,B]]", "kind" : "def"}, {"label" : "both", "tail" : "(rfa: Resource[F, A], rfb: Resource[F, B])(arg0: Concurrent[F]): Resource[F, (A, B)]", "member" : "cats.effect.kernel.Resource.both", "link" : "cats\/effect\/kernel\/Resource$.html#both[F[_],A,B](rfa:cats.effect.kernel.Resource[F,A],rfb:cats.effect.kernel.Resource[F,B])(implicitevidence$3:cats.effect.kernel.Concurrent[F]):cats.effect.kernel.Resource[F,(A,B)]", "kind" : "def"}, {"label" : "liftK", "tail" : "(): ~>[F, [β$3$]Resource[F, β$3$]]", "member" : "cats.effect.kernel.Resource.liftK", "link" : "cats\/effect\/kernel\/Resource$.html#liftK[F[_]]:F~>[β$3$]cats.effect.kernel.Resource[F,β$3$]", "kind" : "def"}, {"label" : "onFinalizeCase", "tail" : "(release: (ExitCase) => F[Unit])(arg0: Applicative[F]): Resource[F, Unit]", "member" : "cats.effect.kernel.Resource.onFinalizeCase", "link" : "cats\/effect\/kernel\/Resource$.html#onFinalizeCase[F[_]](release:cats.effect.kernel.Resource.ExitCase=>F[Unit])(implicitevidence$2:cats.Applicative[F]):cats.effect.kernel.Resource[F,Unit]", "kind" : "def"}, {"label" : "onFinalize", "tail" : "(release: F[Unit])(arg0: Applicative[F]): Resource[F, Unit]", "member" : "cats.effect.kernel.Resource.onFinalize", "link" : "cats\/effect\/kernel\/Resource$.html#onFinalize[F[_]](release:F[Unit])(implicitevidence$1:cats.Applicative[F]):cats.effect.kernel.Resource[F,Unit]", "kind" : "def"}, {"label" : "eval", "tail" : "(fa: F[A]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.eval", "link" : "cats\/effect\/kernel\/Resource$.html#eval[F[_],A](fa:F[A]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "unit", "tail" : "(): Resource[F, Unit]", "member" : "cats.effect.kernel.Resource.unit", "link" : "cats\/effect\/kernel\/Resource$.html#unit[F[_]]:cats.effect.kernel.Resource[F,Unit]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): Resource[F, A]", "member" : "cats.effect.kernel.Resource.pure", "link" : "cats\/effect\/kernel\/Resource$.html#pure[F[_],A](a:A):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "makeCaseFull", "tail" : "(acquire: (Poll[F]) => F[A])(release: (A, ExitCase) => F[Unit])(F: Functor[F]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.makeCaseFull", "link" : "cats\/effect\/kernel\/Resource$.html#makeCaseFull[F[_],A](acquire:cats.effect.kernel.Poll[F]=>F[A])(release:(A,cats.effect.kernel.Resource.ExitCase)=>F[Unit])(implicitF:cats.Functor[F]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "makeFull", "tail" : "(acquire: (Poll[F]) => F[A])(release: (A) => F[Unit])(F: Functor[F]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.makeFull", "link" : "cats\/effect\/kernel\/Resource$.html#makeFull[F[_],A](acquire:cats.effect.kernel.Poll[F]=>F[A])(release:A=>F[Unit])(implicitF:cats.Functor[F]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "makeCase", "tail" : "(acquire: F[A])(release: (A, ExitCase) => F[Unit])(F: Functor[F]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.makeCase", "link" : "cats\/effect\/kernel\/Resource$.html#makeCase[F[_],A](acquire:F[A])(release:(A,cats.effect.kernel.Resource.ExitCase)=>F[Unit])(implicitF:cats.Functor[F]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "make", "tail" : "(acquire: F[A])(release: (A) => F[Unit])(F: Functor[F]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.make", "link" : "cats\/effect\/kernel\/Resource$.html#make[F[_],A](acquire:F[A])(release:A=>F[Unit])(implicitF:cats.Functor[F]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fr: F[Resource[F, A]]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.suspend", "link" : "cats\/effect\/kernel\/Resource$.html#suspend[F[_],A](fr:F[cats.effect.kernel.Resource[F,A]]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "applyFull", "tail" : "(resource: (Poll[F]) => F[(A, (ExitCase) => F[Unit])]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.applyFull", "link" : "cats\/effect\/kernel\/Resource$.html#applyFull[F[_],A](resource:cats.effect.kernel.Poll[F]=>F[(A,cats.effect.kernel.Resource.ExitCase=>F[Unit])]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "applyCase", "tail" : "(resource: F[(A, (ExitCase) => F[Unit])]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.applyCase", "link" : "cats\/effect\/kernel\/Resource$.html#applyCase[F[_],A](resource:F[(A,cats.effect.kernel.Resource.ExitCase=>F[Unit])]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(resource: F[(A, F[Unit])])(F: Functor[F]): Resource[F, A]", "member" : "cats.effect.kernel.Resource.apply", "link" : "cats\/effect\/kernel\/Resource$.html#apply[F[_],A](resource:F[(A,F[Unit])])(implicitF:cats.Functor[F]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "fromDestroyable", "tail" : "(acquire: F[A])(F: Sync[F]): Resource[F, A]", "member" : "cats.effect.kernel.ResourcePlatform.fromDestroyable", "link" : "cats\/effect\/kernel\/Resource$.html#fromDestroyable[F[_],A<:javax.security.auth.Destroyable](acquire:F[A])(implicitF:cats.effect.kernel.Sync[F]):cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "catsEffectSemigroupKForResource", "tail" : "(F0: MonadCancel[F, Throwable], K0: SemigroupK[F], G0: Make[F]): ResourceSemigroupK[F]", "member" : "cats.effect.kernel.ResourceHOInstances0.catsEffectSemigroupKForResource", "link" : "cats\/effect\/kernel\/Resource$.html#catsEffectSemigroupKForResource[F[_],A](implicitF0:cats.effect.kernel.MonadCancel[F,Throwable],implicitK0:cats.SemigroupK[F],implicitG0:cats.effect.kernel.Ref.Make[F]):cats.effect.kernel.ResourceSemigroupK[F]", "kind" : "implicit def"}, {"label" : "catsEffectAsyncForResource", "tail" : "(F0: Async[F]): Async[[β$11$]Resource[F, β$11$]]", "member" : "cats.effect.kernel.ResourceHOInstances0.catsEffectAsyncForResource", "link" : "cats\/effect\/kernel\/Resource$.html#catsEffectAsyncForResource[F[_]](implicitF0:cats.effect.kernel.Async[F]):cats.effect.kernel.Async[[β$11$]cats.effect.kernel.Resource[F,β$11$]]", "kind" : "implicit def"}, {"label" : "catsEffectSyncForResource", "tail" : "(F0: Sync[F]): Sync[[β$13$]Resource[F, β$13$]]", "member" : "cats.effect.kernel.ResourceHOInstances1.catsEffectSyncForResource", "link" : "cats\/effect\/kernel\/Resource$.html#catsEffectSyncForResource[F[_]](implicitF0:cats.effect.kernel.Sync[F]):cats.effect.kernel.Sync[[β$13$]cats.effect.kernel.Resource[F,β$13$]]", "kind" : "implicit def"}, {"label" : "catsEffectTemporalForResource", "tail" : "(F0: Temporal[F]): Temporal[[β$12$]Resource[F, β$12$]]", "member" : "cats.effect.kernel.ResourceHOInstances1.catsEffectTemporalForResource", "link" : "cats\/effect\/kernel\/Resource$.html#catsEffectTemporalForResource[F[_]](implicitF0:cats.effect.kernel.Temporal[F]):cats.effect.kernel.Temporal[[β$12$]cats.effect.kernel.Resource[F,β$12$]]", "kind" : "implicit def"}, {"label" : "catsEffectClockForResource", "tail" : "(F0: Clock[F], FA: Applicative[[β$15$]Resource[F, β$15$]]): Clock[[β$16$]Resource[F, β$16$]]", "member" : "cats.effect.kernel.ResourceHOInstances2.catsEffectClockForResource", "link" : "cats\/effect\/kernel\/Resource$.html#catsEffectClockForResource[F[_]](implicitF0:cats.effect.kernel.Clock[F],implicitFA:cats.Applicative[[β$15$]cats.effect.kernel.Resource[F,β$15$]]):cats.effect.kernel.Clock[[β$16$]cats.effect.kernel.Resource[F,β$16$]]", "kind" : "implicit def"}, {"label" : "catsEffectConcurrentForResource", "tail" : "(F0: Concurrent[F]): Concurrent[[β$14$]Resource[F, β$14$]]", "member" : "cats.effect.kernel.ResourceHOInstances2.catsEffectConcurrentForResource", "link" : "cats\/effect\/kernel\/Resource$.html#catsEffectConcurrentForResource[F[_]](implicitF0:cats.effect.kernel.Concurrent[F]):cats.effect.kernel.Concurrent[[β$14$]cats.effect.kernel.Resource[F,β$14$]]", "kind" : "implicit def"}, {"label" : "catsEffectMonadCancelForResource", "tail" : "(F0: MonadCancel[F, Throwable]): MonadCancel[[β$17$]Resource[F, β$17$], Throwable]", "member" : "cats.effect.kernel.ResourceHOInstances3.catsEffectMonadCancelForResource", "link" : "cats\/effect\/kernel\/Resource$.html#catsEffectMonadCancelForResource[F[_]](implicitF0:cats.effect.kernel.MonadCancel[F,Throwable]):cats.effect.kernel.MonadCancel[[β$17$]cats.effect.kernel.Resource[F,β$17$],Throwable]", "kind" : "implicit def"}, {"label" : "catsEffectMonadErrorForResource", "tail" : "(F0: MonadError[F, E]): MonadError[[β$18$]Resource[F, β$18$], E]", "member" : "cats.effect.kernel.ResourceHOInstances4.catsEffectMonadErrorForResource", "link" : "cats\/effect\/kernel\/Resource$.html#catsEffectMonadErrorForResource[F[_],E](implicitF0:cats.MonadError[F,E]):cats.MonadError[[β$18$]cats.effect.kernel.Resource[F,β$18$],E]", "kind" : "implicit def"}, {"label" : "catsEffectMonadForResource", "tail" : "(F0: Monad[F]): Monad[[β$19$]Resource[F, β$19$]]", "member" : "cats.effect.kernel.ResourceHOInstances5.catsEffectMonadForResource", "link" : "cats\/effect\/kernel\/Resource$.html#catsEffectMonadForResource[F[_]](implicitF0:cats.Monad[F]):cats.Monad[[β$19$]cats.effect.kernel.Resource[F,β$19$]]", "kind" : "implicit def"}, {"label" : "catsEffectMonoidForResource", "tail" : "(F0: Monad[F], A0: Monoid[A]): Monoid[Resource[F, A]]", "member" : "cats.effect.kernel.ResourceFOInstances0.catsEffectMonoidForResource", "link" : "cats\/effect\/kernel\/Resource$.html#catsEffectMonoidForResource[F[_],A](implicitF0:cats.Monad[F],implicitA0:cats.Monoid[A]):cats.Monoid[cats.effect.kernel.Resource[F,A]]", "kind" : "implicit def"}, {"label" : "catsEffectSemigroupForResource", "tail" : "(F0: Monad[F], A0: Semigroup[A]): ResourceSemigroup[F, A]", "member" : "cats.effect.kernel.ResourceFOInstances1.catsEffectSemigroupForResource", "link" : "cats\/effect\/kernel\/Resource$.html#catsEffectSemigroupForResource[F[_],A](implicitF0:cats.Monad[F],implicitA0:cats.Semigroup[A]):cats.effect.kernel.ResourceSemigroup[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Resource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Resource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Resource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Resource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Resource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Resource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Resource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Resource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Resource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Resource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Resource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Resource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Resource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Resource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Resource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Resource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Resource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Resource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Resource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/Resource.html", "kind" : "class"}, {"name" : "cats.effect.kernel.Sync", "object" : "cats\/effect\/kernel\/Sync$.html", "members_object" : [{"label" : "Type", "tail" : "", "member" : "cats.effect.kernel.Sync.Type", "link" : "cats\/effect\/kernel\/Sync$.html#Type", "kind" : "object"}, {"label" : "Type", "tail" : "", "member" : "cats.effect.kernel.Sync.Type", "link" : "cats\/effect\/kernel\/Sync$.html#TypeextendsProductwithSerializable", "kind" : "sealed trait"}, {"label" : "syncForReaderWriterStateT", "tail" : "(F0: Sync[F], L0: Monoid[L]): Sync[[ε$6$]IndexedReaderWriterStateT[F, R, L, S, S, ε$6$]]", "member" : "cats.effect.kernel.Sync.syncForReaderWriterStateT", "link" : "cats\/effect\/kernel\/Sync$.html#syncForReaderWriterStateT[F[_],R,L,S](implicitF0:cats.effect.kernel.Sync[F],implicitL0:cats.Monoid[L]):cats.effect.kernel.Sync[[ε$6$]cats.data.IndexedReaderWriterStateT[F,R,L,S,S,ε$6$]]", "kind" : "implicit def"}, {"label" : "syncForKleisli", "tail" : "(F0: Sync[F]): Sync[[γ$5$]Kleisli[F, R, γ$5$]]", "member" : "cats.effect.kernel.Sync.syncForKleisli", "link" : "cats\/effect\/kernel\/Sync$.html#syncForKleisli[F[_],R](implicitF0:cats.effect.kernel.Sync[F]):cats.effect.kernel.Sync[[γ$5$]cats.data.Kleisli[F,R,γ$5$]]", "kind" : "implicit def"}, {"label" : "syncForIorT", "tail" : "(F0: Sync[F], L0: Semigroup[L]): Sync[[γ$4$]IorT[F, L, γ$4$]]", "member" : "cats.effect.kernel.Sync.syncForIorT", "link" : "cats\/effect\/kernel\/Sync$.html#syncForIorT[F[_],L](implicitF0:cats.effect.kernel.Sync[F],implicitL0:cats.Semigroup[L]):cats.effect.kernel.Sync[[γ$4$]cats.data.IorT[F,L,γ$4$]]", "kind" : "implicit def"}, {"label" : "syncForWriterT", "tail" : "(F0: Sync[F], L0: Monoid[L]): Sync[[γ$3$]WriterT[F, L, γ$3$]]", "member" : "cats.effect.kernel.Sync.syncForWriterT", "link" : "cats\/effect\/kernel\/Sync$.html#syncForWriterT[F[_],L](implicitF0:cats.effect.kernel.Sync[F],implicitL0:cats.Monoid[L]):cats.effect.kernel.Sync[[γ$3$]cats.data.WriterT[F,L,γ$3$]]", "kind" : "implicit def"}, {"label" : "syncForStateT", "tail" : "(F0: Sync[F]): Sync[[γ$2$]IndexedStateT[F, S, S, γ$2$]]", "member" : "cats.effect.kernel.Sync.syncForStateT", "link" : "cats\/effect\/kernel\/Sync$.html#syncForStateT[F[_],S](implicitF0:cats.effect.kernel.Sync[F]):cats.effect.kernel.Sync[[γ$2$]cats.data.IndexedStateT[F,S,S,γ$2$]]", "kind" : "implicit def"}, {"label" : "syncForEitherT", "tail" : "(F0: Sync[F]): Sync[[γ$1$]EitherT[F, E, γ$1$]]", "member" : "cats.effect.kernel.Sync.syncForEitherT", "link" : "cats\/effect\/kernel\/Sync$.html#syncForEitherT[F[_],E](implicitF0:cats.effect.kernel.Sync[F]):cats.effect.kernel.Sync[[γ$1$]cats.data.EitherT[F,E,γ$1$]]", "kind" : "implicit def"}, {"label" : "syncForOptionT", "tail" : "(F0: Sync[F]): Sync[[β$0$]OptionT[F, β$0$]]", "member" : "cats.effect.kernel.Sync.syncForOptionT", "link" : "cats\/effect\/kernel\/Sync$.html#syncForOptionT[F[_]](implicitF0:cats.effect.kernel.Sync[F]):cats.effect.kernel.Sync[[β$0$]cats.data.OptionT[F,β$0$]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(F: Sync[F]): F.type", "member" : "cats.effect.kernel.Sync.apply", "link" : "cats\/effect\/kernel\/Sync$.html#apply[F[_]](implicitF:cats.effect.kernel.Sync[F]):F.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Sync$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Sync$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Sync$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Sync$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Sync$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Sync$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Sync$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Sync$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Sync$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Sync$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Sync$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Sync$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Sync$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Sync$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Sync$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Sync$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Sync$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Sync$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Sync$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/Sync.html", "kind" : "trait", "members_trait" : [{"label" : "interruptible", "tail" : "(many: Boolean)(thunk: => A): F[A]", "member" : "cats.effect.kernel.Sync.interruptible", "link" : "cats\/effect\/kernel\/Sync.html#interruptible[A](many:Boolean)(thunk:=>A):F[A]", "kind" : "def"}, {"label" : "blocking", "tail" : "(thunk: => A): F[A]", "member" : "cats.effect.kernel.Sync.blocking", "link" : "cats\/effect\/kernel\/Sync.html#blocking[A](thunk:=>A):F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(thunk: => F[A]): F[A]", "member" : "cats.effect.kernel.Sync.defer", "link" : "cats\/effect\/kernel\/Sync.html#defer[A](thunk:=>F[A]):F[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): F[A]", "member" : "cats.effect.kernel.Sync.delay", "link" : "cats\/effect\/kernel\/Sync.html#delay[A](thunk:=>A):F[A]", "kind" : "def"}, {"label" : "unique", "tail" : "(): F[Token]", "member" : "cats.effect.kernel.Sync.unique", "link" : "cats\/effect\/kernel\/Sync.html#unique:F[cats.effect.kernel.Unique.Token]", "kind" : "def"}, {"label" : "applicative", "tail" : "(): Applicative[F]", "member" : "cats.effect.kernel.Sync.applicative", "link" : "cats\/effect\/kernel\/Sync.html#applicative:cats.Applicative[F]", "kind" : "def"}, {"label" : "fix", "tail" : "(fn: (F[A]) => F[A]): F[A]", "member" : "cats.Defer.fix", "link" : "cats\/effect\/kernel\/Sync.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "timed", "tail" : "(fa: F[A]): F[(FiniteDuration, A)]", "member" : "cats.effect.kernel.Clock.timed", "link" : "cats\/effect\/kernel\/Sync.html#timed[A](fa:F[A]):F[(scala.concurrent.duration.FiniteDuration,A)]", "kind" : "def"}, {"label" : "realTimeInstant", "tail" : "(): F[Instant]", "member" : "cats.effect.kernel.ClockPlatform.realTimeInstant", "link" : "cats\/effect\/kernel\/Sync.html#realTimeInstant:F[java.time.Instant]", "kind" : "def"}, {"label" : "bracketFull", "tail" : "(acquire: (Poll[F]) => F[A])(use: (A) => F[B])(release: (A, Outcome[F, Throwable, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketFull", "link" : "cats\/effect\/kernel\/Sync.html#bracketFull[A,B](acquire:cats.effect.kernel.Poll[F]=>F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A, Outcome[F, Throwable, B]) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracketCase", "link" : "cats\/effect\/kernel\/Sync.html#bracketCase[A,B](acquire:F[A])(use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: F[A])(use: (A) => F[B])(release: (A) => F[Unit]): F[B]", "member" : "cats.effect.kernel.MonadCancel.bracket", "link" : "cats\/effect\/kernel\/Sync.html#bracket[A,B](acquire:F[A])(use:A=>F[B])(release:A=>F[Unit]):F[B]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: F[A])(fin: (Outcome[F, Throwable, A]) => F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guaranteeCase", "link" : "cats\/effect\/kernel\/Sync.html#guaranteeCase[A](fa:F[A])(fin:cats.effect.kernel.Outcome[F,E,A]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.guarantee", "link" : "cats\/effect\/kernel\/Sync.html#guarantee[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: F[A])(pf: PartialFunction[Throwable, Throwable]): F[A]", "member" : "cats.MonadError.adaptError", "link" : "cats\/effect\/kernel\/Sync.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "attemptTap", "tail" : "(fa: F[A])(f: (Either[Throwable, A]) => F[B]): F[A]", "member" : "cats.MonadError.attemptTap", "link" : "cats\/effect\/kernel\/Sync.html#attemptTap[A,B](fa:F[A])(f:Either[E,A]=>F[B]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: F[A])(recover: (Throwable) => F[B], bind: (A) => F[B]): F[B]", "member" : "cats.MonadError.redeemWith", "link" : "cats\/effect\/kernel\/Sync.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: F[Either[EE, A]]): F[A]", "member" : "cats.MonadError.rethrow", "link" : "cats\/effect\/kernel\/Sync.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: F[A])(error: (A) => Throwable)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensureOr", "link" : "cats\/effect\/kernel\/Sync.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: F[A])(error: => Throwable)(predicate: (A) => Boolean): F[A]", "member" : "cats.MonadError.ensure", "link" : "cats\/effect\/kernel\/Sync.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ifElseM", "tail" : "(branches: (F[Boolean], F[A])*)(els: F[A]): F[A]", "member" : "cats.Monad.ifElseM", "link" : "cats\/effect\/kernel\/Sync.html#ifElseM[A](branches:(F[Boolean],F[A])*)(els:F[A]):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntilM", "link" : "cats\/effect\/kernel\/Sync.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhileM", "link" : "cats\/effect\/kernel\/Sync.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateUntil", "link" : "cats\/effect\/kernel\/Sync.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: F[A])(p: (A) => Boolean): F[A]", "member" : "cats.Monad.iterateWhile", "link" : "cats\/effect\/kernel\/Sync.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: F[A])(cond: => F[Boolean]): F[Unit]", "member" : "cats.Monad.untilM_", "link" : "cats\/effect\/kernel\/Sync.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: F[A])(cond: => F[Boolean])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.untilM", "link" : "cats\/effect\/kernel\/Sync.html#untilM[G[_],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: F[Boolean])(body: => F[A]): F[Unit]", "member" : "cats.Monad.whileM_", "link" : "cats\/effect\/kernel\/Sync.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: F[Boolean])(body: => F[A])(G: Alternative[G]): F[G[A]]", "member" : "cats.Monad.whileM", "link" : "cats\/effect\/kernel\/Sync.html#whileM[G[_],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Monad.map", "link" : "cats\/effect\/kernel\/Sync.html#map[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: F[Option[A]]): F[A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "cats\/effect\/kernel\/Sync.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => F[A]): F[B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "cats\/effect\/kernel\/Sync.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: F[A]): F[B]", "member" : "cats.FlatMap.foreverM", "link" : "cats\/effect\/kernel\/Sync.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[A]", "member" : "cats.FlatMap.flatTap", "link" : "cats\/effect\/kernel\/Sync.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: F[Boolean])(ifTrue: => F[B], ifFalse: => F[B]): F[B]", "member" : "cats.FlatMap.ifM", "link" : "cats\/effect\/kernel\/Sync.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: F[A])(f: (A) => F[B]): F[(A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "cats\/effect\/kernel\/Sync.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.FlatMap.productL", "link" : "cats\/effect\/kernel\/Sync.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.FlatMap.productR", "link" : "cats\/effect\/kernel\/Sync.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: F[A], fb: F[B])(f: (A, B) => Z): F[Z]", "member" : "cats.FlatMap.map2", "link" : "cats\/effect\/kernel\/Sync.html#map2[A,B,Z](fa:F[A],fb:F[B])(f:(A,B)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: F[(A, B) => Z])(fa: F[A], fb: F[B]): F[Z]", "member" : "cats.FlatMap.ap2", "link" : "cats\/effect\/kernel\/Sync.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: F[A], fb: F[B]): F[(A, B)]", "member" : "cats.FlatMap.product", "link" : "cats\/effect\/kernel\/Sync.html#product[A,B](fa:F[A],fb:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.FlatMap.ap", "link" : "cats\/effect\/kernel\/Sync.html#ap[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[A]", "member" : "cats.FlatMap.productLEval", "link" : "cats\/effect\/kernel\/Sync.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: F[A])(fb: Eval[F[B]]): F[B]", "member" : "cats.FlatMap.productREval", "link" : "cats\/effect\/kernel\/Sync.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: F[F[A]]): F[A]", "member" : "cats.FlatMap.flatten", "link" : "cats\/effect\/kernel\/Sync.html#flatten[A](ffa:F[F[A]]):F[A]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): F[A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "cats\/effect\/kernel\/Sync.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): F[A]", "member" : "cats.ApplicativeError.fromOption", "link" : "cats\/effect\/kernel\/Sync.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): F[A]", "member" : "cats.ApplicativeError.fromEither", "link" : "cats\/effect\/kernel\/Sync.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): F[A]", "member" : "cats.ApplicativeError.fromTry", "link" : "cats\/effect\/kernel\/Sync.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, F, Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "cats\/effect\/kernel\/Sync.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): F[A]", "member" : "cats.ApplicativeError.catchNonFatalEval", "link" : "cats\/effect\/kernel\/Sync.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): F[A]", "member" : "cats.ApplicativeError.catchNonFatal", "link" : "cats\/effect\/kernel\/Sync.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):F[A]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: F[A])(pf: PartialFunction[Throwable, F[Unit]]): F[A]", "member" : "cats.ApplicativeError.onError", "link" : "cats\/effect\/kernel\/Sync.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: F[A])(recover: (Throwable) => B, f: (A) => B): F[B]", "member" : "cats.ApplicativeError.redeem", "link" : "cats\/effect\/kernel\/Sync.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: F[A])(pf: PartialFunction[Throwable, F[A]]): F[A]", "member" : "cats.ApplicativeError.recoverWith", "link" : "cats\/effect\/kernel\/Sync.html#recoverWith[A](fa:F[A])(pf:PartialFunction[E,F[A]]):F[A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: F[A])(pf: PartialFunction[Throwable, A]): F[A]", "member" : "cats.ApplicativeError.recover", "link" : "cats\/effect\/kernel\/Sync.html#recover[A](fa:F[A])(pf:PartialFunction[E,A]):F[A]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: F[A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): F[Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "cats\/effect\/kernel\/Sync.html#attemptNarrow[EE<:Throwable,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: F[A]): EitherT[F, Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "cats\/effect\/kernel\/Sync.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: F[A]): F[Either[Throwable, A]]", "member" : "cats.ApplicativeError.attempt", "link" : "cats\/effect\/kernel\/Sync.html#attempt[A](fa:F[A]):F[Either[E,A]]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: F[A])(f: (Throwable) => A): F[A]", "member" : "cats.ApplicativeError.handleError", "link" : "cats\/effect\/kernel\/Sync.html#handleError[A](fa:F[A])(f:E=>A):F[A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.whenA", "link" : "cats\/effect\/kernel\/Sync.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => F[A]): F[Unit]", "member" : "cats.Applicative.unlessA", "link" : "cats\/effect\/kernel\/Sync.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]F[G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "cats\/effect\/kernel\/Sync.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]F[G[α]]]", "member" : "cats.Applicative.compose", "link" : "cats\/effect\/kernel\/Sync.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: F[A]): F[List[A]]", "member" : "cats.Applicative.replicateA", "link" : "cats\/effect\/kernel\/Sync.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "unit", "tail" : "(): F[Unit]", "member" : "cats.Applicative.unit", "link" : "cats\/effect\/kernel\/Sync.html#unit:F[Unit]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): F[A]", "member" : "cats.InvariantMonoidal.point", "link" : "cats\/effect\/kernel\/Sync.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A]", "member" : "cats.Apply.ifA", "link" : "cats\/effect\/kernel\/Sync.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]F[G[α]]]", "member" : "cats.Apply.compose", "link" : "cats\/effect\/kernel\/Sync.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: F[A], fb: Eval[F[B]])(f: (A, B) => Z): Eval[F[Z]]", "member" : "cats.Apply.map2Eval", "link" : "cats\/effect\/kernel\/Sync.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: F[A])(fb: F[B]): F[A]", "member" : "cats.Apply.<*", "link" : "cats\/effect\/kernel\/Sync.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.Apply.*>", "link" : "cats\/effect\/kernel\/Sync.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: F[(A) => B])(fa: F[A]): F[B]", "member" : "cats.Apply.<*>", "link" : "cats\/effect\/kernel\/Sync.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "cats\/effect\/kernel\/Sync.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "cats\/effect\/kernel\/Sync.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20], f21: F[A21]): F[Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "cats\/effect\/kernel\/Sync.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "cats\/effect\/kernel\/Sync.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "cats\/effect\/kernel\/Sync.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19], f20: F[A20]): F[Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "cats\/effect\/kernel\/Sync.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "cats\/effect\/kernel\/Sync.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "cats\/effect\/kernel\/Sync.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18], f19: F[A19]): F[Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "cats\/effect\/kernel\/Sync.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "cats\/effect\/kernel\/Sync.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "cats\/effect\/kernel\/Sync.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17], f18: F[A18]): F[Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "cats\/effect\/kernel\/Sync.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "cats\/effect\/kernel\/Sync.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "cats\/effect\/kernel\/Sync.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16], f17: F[A17]): F[Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "cats\/effect\/kernel\/Sync.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "cats\/effect\/kernel\/Sync.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "cats\/effect\/kernel\/Sync.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15], f16: F[A16]): F[Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "cats\/effect\/kernel\/Sync.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "cats\/effect\/kernel\/Sync.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "cats\/effect\/kernel\/Sync.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14], f15: F[A15]): F[Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "cats\/effect\/kernel\/Sync.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "cats\/effect\/kernel\/Sync.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "cats\/effect\/kernel\/Sync.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13], f14: F[A14]): F[Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "cats\/effect\/kernel\/Sync.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "cats\/effect\/kernel\/Sync.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "cats\/effect\/kernel\/Sync.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12], f13: F[A13]): F[Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "cats\/effect\/kernel\/Sync.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "cats\/effect\/kernel\/Sync.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "cats\/effect\/kernel\/Sync.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11], f12: F[A12]): F[Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "cats\/effect\/kernel\/Sync.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "cats\/effect\/kernel\/Sync.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "cats\/effect\/kernel\/Sync.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10], f11: F[A11]): F[Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "cats\/effect\/kernel\/Sync.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "cats\/effect\/kernel\/Sync.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "cats\/effect\/kernel\/Sync.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9], f10: F[A10]): F[Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "cats\/effect\/kernel\/Sync.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "cats\/effect\/kernel\/Sync.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "cats\/effect\/kernel\/Sync.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8], f9: F[A9]): F[Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "cats\/effect\/kernel\/Sync.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "cats\/effect\/kernel\/Sync.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "cats\/effect\/kernel\/Sync.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7], f8: F[A8]): F[Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "cats\/effect\/kernel\/Sync.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "cats\/effect\/kernel\/Sync.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "cats\/effect\/kernel\/Sync.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6], f7: F[A7]): F[Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "cats\/effect\/kernel\/Sync.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "cats\/effect\/kernel\/Sync.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "cats\/effect\/kernel\/Sync.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5, A6) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5], f6: F[A6]): F[Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "cats\/effect\/kernel\/Sync.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "cats\/effect\/kernel\/Sync.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "cats\/effect\/kernel\/Sync.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: F[(A0, A1, A2, A3, A4, A5) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4], f5: F[A5]): F[Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "cats\/effect\/kernel\/Sync.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[(A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "cats\/effect\/kernel\/Sync.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4])(f: (A0, A1, A2, A3, A4) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "cats\/effect\/kernel\/Sync.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: F[(A0, A1, A2, A3, A4) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3], f4: F[A4]): F[Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "cats\/effect\/kernel\/Sync.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[(A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "cats\/effect\/kernel\/Sync.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3])(f: (A0, A1, A2, A3) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "cats\/effect\/kernel\/Sync.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: F[(A0, A1, A2, A3) => Z])(f0: F[A0], f1: F[A1], f2: F[A2], f3: F[A3]): F[Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "cats\/effect\/kernel\/Sync.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2]): F[(A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "cats\/effect\/kernel\/Sync.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: F[A0], f1: F[A1], f2: F[A2])(f: (A0, A1, A2) => Z): F[Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "cats\/effect\/kernel\/Sync.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: F[(A0, A1, A2) => Z])(f0: F[A0], f1: F[A1], f2: F[A2]): F[Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "cats\/effect\/kernel\/Sync.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: F[A], f2: F[B]): F[(A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "cats\/effect\/kernel\/Sync.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]F[G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "cats\/effect\/kernel\/Sync.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]F[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "cats\/effect\/kernel\/Sync.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]F[G[α]]]", "member" : "cats.Functor.compose", "link" : "cats\/effect\/kernel\/Sync.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: F[Boolean])(ifTrue: => A, ifFalse: => A): F[A]", "member" : "cats.Functor.ifF", "link" : "cats\/effect\/kernel\/Sync.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: F[(A, B)]): (F[A], F[B])", "member" : "cats.Functor.unzip", "link" : "cats\/effect\/kernel\/Sync.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: F[A], b: B): F[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "cats\/effect\/kernel\/Sync.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: F[A], b: B): F[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "cats\/effect\/kernel\/Sync.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: F[A], b: B): F[B]", "member" : "cats.Functor.as", "link" : "cats\/effect\/kernel\/Sync.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(fa: F[A])(f: (A) => B): F[(B, A)]", "member" : "cats.Functor.fproductLeft", "link" : "cats\/effect\/kernel\/Sync.html#fproductLeft[A,B](fa:F[A])(f:A=>B):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: F[A])(f: (A) => B): F[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "cats\/effect\/kernel\/Sync.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: F[A]): F[Unit]", "member" : "cats.Functor.void", "link" : "cats\/effect\/kernel\/Sync.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "cats.Functor.lift", "link" : "cats\/effect\/kernel\/Sync.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: F[A]): F[B]", "member" : "cats.Functor.widen", "link" : "cats\/effect\/kernel\/Sync.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: F[A])(f: (A) => B): F[B]", "member" : "cats.Functor.fmap", "link" : "cats\/effect\/kernel\/Sync.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: F[A])(f: (A) => B)(g: (B) => A): F[B]", "member" : "cats.Functor.imap", "link" : "cats\/effect\/kernel\/Sync.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "cats\/effect\/kernel\/Sync.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]F[G[α]]]", "member" : "cats.Invariant.compose", "link" : "cats\/effect\/kernel\/Sync.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Sync.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Sync.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Sync.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Sync.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Sync.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Sync.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Sync.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Sync.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Sync.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Sync.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Sync.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Sync.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Sync.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Sync.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Sync.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Sync.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Sync.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Sync.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Sync.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "suspend", "tail" : "(hint: Type)(thunk: => A): F[A]", "member" : "cats.effect.kernel.Sync.suspend", "link" : "cats\/effect\/kernel\/Sync.html#suspend[A](hint:cats.effect.kernel.Sync.Type)(thunk:=>A):F[A]", "kind" : "abstract def"}, {"label" : "realTime", "tail" : "(): F[FiniteDuration]", "member" : "cats.effect.kernel.Clock.realTime", "link" : "cats\/effect\/kernel\/Sync.html#realTime:F[scala.concurrent.duration.FiniteDuration]", "kind" : "abstract def"}, {"label" : "monotonic", "tail" : "(): F[FiniteDuration]", "member" : "cats.effect.kernel.Clock.monotonic", "link" : "cats\/effect\/kernel\/Sync.html#monotonic:F[scala.concurrent.duration.FiniteDuration]", "kind" : "abstract def"}, {"label" : "onCancel", "tail" : "(fa: F[A], fin: F[Unit]): F[A]", "member" : "cats.effect.kernel.MonadCancel.onCancel", "link" : "cats\/effect\/kernel\/Sync.html#onCancel[A](fa:F[A],fin:F[Unit]):F[A]", "kind" : "abstract def"}, {"label" : "canceled", "tail" : "(): F[Unit]", "member" : "cats.effect.kernel.MonadCancel.canceled", "link" : "cats\/effect\/kernel\/Sync.html#canceled:F[Unit]", "kind" : "abstract def"}, {"label" : "uncancelable", "tail" : "(body: (Poll[F]) => F[A]): F[A]", "member" : "cats.effect.kernel.MonadCancel.uncancelable", "link" : "cats\/effect\/kernel\/Sync.html#uncancelable[A](body:cats.effect.kernel.Poll[F]=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "forceR", "tail" : "(fa: F[A])(fb: F[B]): F[B]", "member" : "cats.effect.kernel.MonadCancel.forceR", "link" : "cats\/effect\/kernel\/Sync.html#forceR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "abstract def"}, {"label" : "rootCancelScope", "tail" : "(): CancelScope", "member" : "cats.effect.kernel.MonadCancel.rootCancelScope", "link" : "cats\/effect\/kernel\/Sync.html#rootCancelScope:cats.effect.kernel.CancelScope", "kind" : "abstract def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => F[Either[A, B]]): F[B]", "member" : "cats.FlatMap.tailRecM", "link" : "cats\/effect\/kernel\/Sync.html#tailRecM[A,B](a:A)(f:A=>F[Either[A,B]]):F[B]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(fa: F[A])(f: (A) => F[B]): F[B]", "member" : "cats.FlatMap.flatMap", "link" : "cats\/effect\/kernel\/Sync.html#flatMap[A,B](fa:F[A])(f:A=>F[B]):F[B]", "kind" : "abstract def"}, {"label" : "handleErrorWith", "tail" : "(fa: F[A])(f: (Throwable) => F[A]): F[A]", "member" : "cats.ApplicativeError.handleErrorWith", "link" : "cats\/effect\/kernel\/Sync.html#handleErrorWith[A](fa:F[A])(f:E=>F[A]):F[A]", "kind" : "abstract def"}, {"label" : "raiseError", "tail" : "(e: Throwable): F[A]", "member" : "cats.ApplicativeError.raiseError", "link" : "cats\/effect\/kernel\/Sync.html#raiseError[A](e:E):F[A]", "kind" : "abstract def"}, {"label" : "pure", "tail" : "(x: A): F[A]", "member" : "cats.Applicative.pure", "link" : "cats\/effect\/kernel\/Sync.html#pure[A](x:A):F[A]", "kind" : "abstract def"}], "shortDescription" : "A typeclass that encodes the notion of suspending synchronousside effects in the F[_] context"}, {"name" : "cats.effect.kernel.Unique", "object" : "cats\/effect\/kernel\/Unique$.html", "members_object" : [{"label" : "Token", "tail" : "", "member" : "cats.effect.kernel.Unique.Token", "link" : "cats\/effect\/kernel\/Unique$.html#Token", "kind" : "object"}, {"label" : "Token", "tail" : "", "member" : "cats.effect.kernel.Unique.Token", "link" : "cats\/effect\/kernel\/Unique$.html#TokenextendsAnyRef", "kind" : "final class"}, {"label" : "apply", "tail" : "(F: Unique[F]): F.type", "member" : "cats.effect.kernel.Unique.apply", "link" : "cats\/effect\/kernel\/Unique$.html#apply[F[_]](implicitF:cats.effect.kernel.Unique[F]):F.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Unique$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Unique$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Unique$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Unique$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Unique$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Unique$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Unique$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Unique$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Unique$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Unique$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Unique$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Unique$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Unique$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Unique$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Unique$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Unique$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Unique$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Unique$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Unique$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/kernel\/Unique.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/Unique.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/Unique.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/Unique.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/Unique.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/Unique.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/Unique.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/Unique.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Unique.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Unique.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/Unique.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/Unique.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/Unique.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/Unique.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/Unique.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/Unique.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/Unique.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/Unique.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/Unique.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/Unique.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unique", "tail" : "(): F[Token]", "member" : "cats.effect.kernel.Unique.unique", "link" : "cats\/effect\/kernel\/Unique.html#unique:F[cats.effect.kernel.Unique.Token]", "kind" : "abstract def"}, {"label" : "applicative", "tail" : "(): Applicative[F]", "member" : "cats.effect.kernel.Unique.applicative", "link" : "cats\/effect\/kernel\/Unique.html#applicative:cats.Applicative[F]", "kind" : "abstract def"}], "shortDescription" : ""}], "cats.effect" : [{"name" : "cats.effect.ExitCode", "shortDescription" : "Represents the exit code of an application.", "object" : "cats\/effect\/ExitCode$.html", "members_object" : [{"label" : "Error", "tail" : ": ExitCode", "member" : "cats.effect.ExitCode.Error", "link" : "cats\/effect\/ExitCode$.html#Error:cats.effect.ExitCode", "kind" : "val"}, {"label" : "Success", "tail" : ": ExitCode", "member" : "cats.effect.ExitCode.Success", "link" : "cats\/effect\/ExitCode$.html#Success:cats.effect.ExitCode", "kind" : "val"}, {"label" : "apply", "tail" : "(i: Int): ExitCode", "member" : "cats.effect.ExitCode.apply", "link" : "cats\/effect\/ExitCode$.html#apply(i:Int):cats.effect.ExitCode", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/ExitCode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/ExitCode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/ExitCode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/ExitCode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/ExitCode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/ExitCode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/ExitCode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ExitCode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ExitCode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ExitCode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/ExitCode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/ExitCode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/ExitCode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/ExitCode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/ExitCode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/ExitCode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/ExitCode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/ExitCode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/ExitCode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "code", "tail" : ": Int", "member" : "cats.effect.ExitCode.code", "link" : "cats\/effect\/ExitCode.html#code:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cats\/effect\/ExitCode.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/ExitCode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/ExitCode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/ExitCode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/ExitCode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/ExitCode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/ExitCode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/ExitCode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ExitCode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ExitCode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ExitCode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/ExitCode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/ExitCode.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/ExitCode.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/ExitCode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/ExitCode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/ExitCode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cats\/effect\/ExitCode.html", "kind" : "case class"}, {"name" : "cats.effect.implicits", "shortDescription" : "", "object" : "cats\/effect\/implicits$.html", "members_object" : [{"label" : "alignForParallelF", "tail" : "(F: kernel.GenSpawn[F, E]): Align[[β$3$]T[F, β$3$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.alignForParallelF", "link" : "cats\/effect\/implicits$.html#alignForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.Align[[β$3$]cats.effect.kernel.Par.instance.T[F,β$3$]]", "kind" : "implicit def"}, {"label" : "commutativeApplicativeForParallelF", "tail" : "(F: kernel.GenSpawn[F, E]): CommutativeApplicative[[β$1$]T[F, β$1$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.commutativeApplicativeForParallelF", "link" : "cats\/effect\/implicits$.html#commutativeApplicativeForParallelF[F[_],E](implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.CommutativeApplicative[[β$1$]cats.effect.kernel.Par.instance.T[F,β$1$]]", "kind" : "implicit def"}, {"label" : "parallelForGenSpawn", "tail" : "(M: kernel.GenSpawn[M, E]): Aux[M, [β$0$]T[M, β$0$]]", "member" : "cats.effect.kernel.instances.GenSpawnInstances.parallelForGenSpawn", "link" : "cats\/effect\/implicits$.html#parallelForGenSpawn[M[_],E](implicitM:cats.effect.kernel.GenSpawn[M,E]):cats.Parallel.Aux[M,[β$0$]cats.effect.kernel.Par.instance.T[M,β$0$]]", "kind" : "implicit def"}, {"label" : "clockOps", "tail" : "(wrapped: F[A]): ClockOps[F, A]", "member" : "cats.effect.kernel.syntax.ClockSyntax.clockOps", "link" : "cats\/effect\/implicits$.html#clockOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.ClockOps[F,A]", "kind" : "implicit def"}, {"label" : "effectResourceOps", "tail" : "(wrapped: F[A]): EffectResourceOps[F, A]", "member" : "cats.effect.kernel.syntax.ResourceSyntax.effectResourceOps", "link" : "cats\/effect\/implicits$.html#effectResourceOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.EffectResourceOps[F,A]", "kind" : "implicit def"}, {"label" : "asyncOps", "tail" : "(wrapped: F[A]): AsyncOps[F, A]", "member" : "cats.effect.kernel.syntax.AsyncSyntax.asyncOps", "link" : "cats\/effect\/implicits$.html#asyncOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.AsyncOps[F,A]", "kind" : "implicit def"}, {"label" : "concurrentParSequenceOps", "tail" : "(wrapped: T[F[A]]): ConcurrentParSequenceNOps[T, F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParSequenceOps", "link" : "cats\/effect\/implicits$.html#concurrentParSequenceOps[T[_],F[_],A](wrapped:T[F[A]]):cats.effect.kernel.syntax.ConcurrentParSequenceNOps[T,F,A]", "kind" : "implicit def"}, {"label" : "concurrentParTraverseOps", "tail" : "(wrapped: T[A]): ConcurrentParTraverseNOps[T, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParTraverseOps", "link" : "cats\/effect\/implicits$.html#concurrentParTraverseOps[T[_],A](wrapped:T[A]):cats.effect.kernel.syntax.ConcurrentParTraverseNOps[T,A]", "kind" : "implicit def"}, {"label" : "genConcurrentOps_", "tail" : "(wrapped: F[A]): GenConcurrentOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.genConcurrentOps_", "link" : "cats\/effect\/implicits$.html#genConcurrentOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenConcurrentOps_[F,A]", "kind" : "implicit def"}, {"label" : "genTemporalOps", "tail" : "(wrapped: F[A])(F: kernel.GenTemporal[F, E]): GenTemporalOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps", "link" : "cats\/effect\/implicits$.html#genTemporalOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.syntax.GenTemporalOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genTemporalOps_", "tail" : "(wrapped: F[A]): GenTemporalOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps_", "link" : "cats\/effect\/implicits$.html#genTemporalOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenTemporalOps_[F,A]", "kind" : "implicit def"}, {"label" : "genSpawnOps", "tail" : "(wrapped: F[A])(F: kernel.GenSpawn[F, E]): GenSpawnOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps", "link" : "cats\/effect\/implicits$.html#genSpawnOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.syntax.GenSpawnOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genSpawnOps_", "tail" : "(wrapped: F[A]): GenSpawnOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps_", "link" : "cats\/effect\/implicits$.html#genSpawnOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenSpawnOps_[F,A]", "kind" : "implicit def"}, {"label" : "monadCancelOps", "tail" : "(wrapped: F[A])(F: kernel.MonadCancel[F, E]): MonadCancelOps[F, A, E]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps", "link" : "cats\/effect\/implicits$.html#monadCancelOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.syntax.MonadCancelOps[F,A,E]", "kind" : "implicit def"}, {"label" : "monadCancelOps_", "tail" : "(wrapped: F[A]): MonadCancelOps_[F, A]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps_", "link" : "cats\/effect\/implicits$.html#monadCancelOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.MonadCancelOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/implicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/implicits$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/implicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/implicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/implicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/implicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/implicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/implicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/implicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/implicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/implicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/implicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/implicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/implicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/implicits$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/implicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/implicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/implicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/implicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.IO", "shortDescription" : "A pure abstraction representing the intention to perform aside effect, where the result of that side effect may be obtainedsynchronously (via return) or asynchronously (via callback).", "object" : "cats\/effect\/IO$.html", "members_class" : [{"label" : "iterateUntil", "tail" : "(p: (A) => Boolean): IO[A]", "member" : "cats.effect.IO.iterateUntil", "link" : "cats\/effect\/IO.html#iterateUntil(p:A=>Boolean):cats.effect.IO[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(p: (A) => Boolean): IO[A]", "member" : "cats.effect.IO.iterateWhile", "link" : "cats\/effect\/IO.html#iterateWhile(p:A=>Boolean):cats.effect.IO[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(cond: => IO[Boolean]): IO[Unit]", "member" : "cats.effect.IO.untilM_", "link" : "cats\/effect\/IO.html#untilM_(cond:=>cats.effect.IO[Boolean]):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(cond: => IO[Boolean])(arg0: Alternative[G]): IO[G[B]]", "member" : "cats.effect.IO.untilM", "link" : "cats\/effect\/IO.html#untilM[G[_],B>:A](cond:=>cats.effect.IO[Boolean])(implicitevidence$2:cats.Alternative[G]):cats.effect.IO[G[B]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: IO[Boolean]): IO[Unit]", "member" : "cats.effect.IO.whileM_", "link" : "cats\/effect\/IO.html#whileM_(p:cats.effect.IO[Boolean]):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: IO[Boolean])(arg0: Alternative[G]): IO[G[B]]", "member" : "cats.effect.IO.whileM", "link" : "cats\/effect\/IO.html#whileM[G[_],B>:A](p:cats.effect.IO[Boolean])(implicitevidence$1:cats.Alternative[G]):cats.effect.IO[G[B]]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(): IO[Nothing]", "member" : "cats.effect.IO.foreverM", "link" : "cats\/effect\/IO.html#foreverM:cats.effect.IO[Nothing]", "kind" : "def"}, {"label" : "unsafeRunCancelable", "tail" : "()(runtime: IORuntime): () => Future[Unit]", "member" : "cats.effect.IO.unsafeRunCancelable", "link" : "cats\/effect\/IO.html#unsafeRunCancelable()(implicitruntime:cats.effect.unsafe.IORuntime):()=>scala.concurrent.Future[Unit]", "kind" : "def"}, {"label" : "unsafeToFutureCancelable", "tail" : "()(runtime: IORuntime): (Future[A], () => Future[Unit])", "member" : "cats.effect.IO.unsafeToFutureCancelable", "link" : "cats\/effect\/IO.html#unsafeToFutureCancelable()(implicitruntime:cats.effect.unsafe.IORuntime):(scala.concurrent.Future[A],()=>scala.concurrent.Future[Unit])", "kind" : "def"}, {"label" : "unsafeToFuture", "tail" : "()(runtime: IORuntime): Future[A]", "member" : "cats.effect.IO.unsafeToFuture", "link" : "cats\/effect\/IO.html#unsafeToFuture()(implicitruntime:cats.effect.unsafe.IORuntime):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "unsafeRunAndForget", "tail" : "()(runtime: IORuntime): Unit", "member" : "cats.effect.IO.unsafeRunAndForget", "link" : "cats\/effect\/IO.html#unsafeRunAndForget()(implicitruntime:cats.effect.unsafe.IORuntime):Unit", "kind" : "def"}, {"label" : "unsafeRunAsyncOutcome", "tail" : "(cb: (Outcome[Id, Throwable, A]) => Unit)(runtime: IORuntime): Unit", "member" : "cats.effect.IO.unsafeRunAsyncOutcome", "link" : "cats\/effect\/IO.html#unsafeRunAsyncOutcome(cb:cats.effect.Outcome[cats.Id,Throwable,A@scala.annotation.unchecked.uncheckedVariance]=>Unit)(implicitruntime:cats.effect.unsafe.IORuntime):Unit", "kind" : "def"}, {"label" : "unsafeRunAsync", "tail" : "(cb: (Either[Throwable, A]) => Unit)(runtime: IORuntime): Unit", "member" : "cats.effect.IO.unsafeRunAsync", "link" : "cats\/effect\/IO.html#unsafeRunAsync(cb:Either[Throwable,A]=>Unit)(implicitruntime:cats.effect.unsafe.IORuntime):Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "cats.effect.IO.toString", "link" : "cats\/effect\/IO.html#toString():String", "kind" : "def"}, {"label" : "to", "tail" : "(F: LiftIO[F]): F[A]", "member" : "cats.effect.IO.to", "link" : "cats\/effect\/IO.html#to[F[_]](implicitF:cats.effect.LiftIO[F]):F[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "void", "tail" : "(): IO[Unit]", "member" : "cats.effect.IO.void", "link" : "cats\/effect\/IO.html#void:cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(): IO[A]", "member" : "cats.effect.IO.uncancelable", "link" : "cats\/effect\/IO.html#uncancelable:cats.effect.IO[A]", "kind" : "def"}, {"label" : "memoize", "tail" : "(): IO[IO[A]]", "member" : "cats.effect.IO.memoize", "link" : "cats\/effect\/IO.html#memoize:cats.effect.IO[cats.effect.IO[A]]", "kind" : "def"}, {"label" : "background", "tail" : "(): ResourceIO[IO[OutcomeIO[A]]]", "member" : "cats.effect.IO.background", "link" : "cats\/effect\/IO.html#background:cats.effect.ResourceIO[cats.effect.IO[cats.effect.OutcomeIO[A@scala.annotation.unchecked.uncheckedVariance]]]", "kind" : "def"}, {"label" : "start", "tail" : "(): IO[FiberIO[A]]", "member" : "cats.effect.IO.start", "link" : "cats\/effect\/IO.html#start:cats.effect.IO[cats.effect.FiberIO[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "productR", "tail" : "(that: IO[B]): IO[B]", "member" : "cats.effect.IO.productR", "link" : "cats\/effect\/IO.html#productR[B](that:cats.effect.IO[B]):cats.effect.IO[B]", "kind" : "def"}, {"label" : "productL", "tail" : "(that: IO[B]): IO[A]", "member" : "cats.effect.IO.productL", "link" : "cats\/effect\/IO.html#productL[B](that:cats.effect.IO[B]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "product", "tail" : "(that: IO[B]): IO[(A, B)]", "member" : "cats.effect.IO.product", "link" : "cats\/effect\/IO.html#product[B](that:cats.effect.IO[B]):cats.effect.IO[(A,B)]", "kind" : "def"}, {"label" : "timed", "tail" : "(): IO[(FiniteDuration, A)]", "member" : "cats.effect.IO.timed", "link" : "cats\/effect\/IO.html#timed:cats.effect.IO[(scala.concurrent.duration.FiniteDuration,A)]", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(duration: FiniteDuration, fallback: IO[A2]): IO[A2]", "member" : "cats.effect.IO.timeoutTo", "link" : "cats\/effect\/IO.html#timeoutTo[A2>:A](duration:scala.concurrent.duration.FiniteDuration,fallback:cats.effect.IO[A2]):cats.effect.IO[A2]", "kind" : "def"}, {"label" : "timeout", "tail" : "(duration: FiniteDuration): IO[A2]", "member" : "cats.effect.IO.timeout", "link" : "cats\/effect\/IO.html#timeout[A2>:A](duration:scala.concurrent.duration.FiniteDuration):cats.effect.IO[A2]", "kind" : "def"}, {"label" : "delayBy", "tail" : "(duration: FiniteDuration): IO[A]", "member" : "cats.effect.IO.delayBy", "link" : "cats\/effect\/IO.html#delayBy(duration:scala.concurrent.duration.FiniteDuration):cats.effect.IO[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(recover: (Throwable) => IO[B], bind: (A) => IO[B]): IO[B]", "member" : "cats.effect.IO.redeemWith", "link" : "cats\/effect\/IO.html#redeemWith[B](recover:Throwable=>cats.effect.IO[B],bind:A=>cats.effect.IO[B]):cats.effect.IO[B]", "kind" : "def"}, {"label" : "redeem", "tail" : "(recover: (Throwable) => B, map: (A) => B): IO[B]", "member" : "cats.effect.IO.redeem", "link" : "cats\/effect\/IO.html#redeem[B](recover:Throwable=>B,map:A=>B):cats.effect.IO[B]", "kind" : "def"}, {"label" : "racePair", "tail" : "(that: IO[B]): IO[Either[(OutcomeIO[A], FiberIO[B]), (FiberIO[A], OutcomeIO[B])]]", "member" : "cats.effect.IO.racePair", "link" : "cats\/effect\/IO.html#racePair[B](that:cats.effect.IO[B]):cats.effect.IO[Either[(cats.effect.OutcomeIO[A@scala.annotation.unchecked.uncheckedVariance],cats.effect.FiberIO[B]),(cats.effect.FiberIO[A@scala.annotation.unchecked.uncheckedVariance],cats.effect.OutcomeIO[B])]]", "kind" : "def"}, {"label" : "raceOutcome", "tail" : "(that: IO[B]): IO[Either[OutcomeIO[A], OutcomeIO[B]]]", "member" : "cats.effect.IO.raceOutcome", "link" : "cats\/effect\/IO.html#raceOutcome[B](that:cats.effect.IO[B]):cats.effect.IO[Either[cats.effect.OutcomeIO[A@scala.annotation.unchecked.uncheckedVariance],cats.effect.OutcomeIO[B]]]", "kind" : "def"}, {"label" : "race", "tail" : "(that: IO[B]): IO[Either[A, B]]", "member" : "cats.effect.IO.race", "link" : "cats\/effect\/IO.html#race[B](that:cats.effect.IO[B]):cats.effect.IO[Either[A,B]]", "kind" : "def"}, {"label" : "onError", "tail" : "(f: (Throwable) => IO[Unit]): IO[A]", "member" : "cats.effect.IO.onError", "link" : "cats\/effect\/IO.html#onError(f:Throwable=>cats.effect.IO[Unit]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fin: IO[Unit]): IO[A]", "member" : "cats.effect.IO.onCancel", "link" : "cats\/effect\/IO.html#onCancel(fin:cats.effect.IO[Unit]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): IO[B]", "member" : "cats.effect.IO.map", "link" : "cats\/effect\/IO.html#map[B](f:A=>B):cats.effect.IO[B]", "kind" : "def"}, {"label" : "ifM", "tail" : "(ifTrue: => IO[B], ifFalse: => IO[B])(ev: <:<[A, Boolean]): IO[B]", "member" : "cats.effect.IO.ifM", "link" : "cats\/effect\/IO.html#ifM[B](ifTrue:=>cats.effect.IO[B],ifFalse:=>cats.effect.IO[B])(implicitev:A<:<Boolean):cats.effect.IO[B]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (Throwable) => IO[B]): IO[B]", "member" : "cats.effect.IO.handleErrorWith", "link" : "cats\/effect\/IO.html#handleErrorWith[B>:A](f:Throwable=>cats.effect.IO[B]):cats.effect.IO[B]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(finalizer: (OutcomeIO[A]) => IO[Unit]): IO[A]", "member" : "cats.effect.IO.guaranteeCase", "link" : "cats\/effect\/IO.html#guaranteeCase(finalizer:cats.effect.OutcomeIO[A@scala.annotation.unchecked.uncheckedVariance]=>cats.effect.IO[Unit]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(finalizer: IO[Unit]): IO[A]", "member" : "cats.effect.IO.guarantee", "link" : "cats\/effect\/IO.html#guarantee(finalizer:cats.effect.IO[Unit]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, IO[B]]): IO[B]", "member" : "cats.effect.IO.flatten", "link" : "cats\/effect\/IO.html#flatten[B](implicitev:A<:<cats.effect.IO[B]):cats.effect.IO[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => IO[B]): IO[B]", "member" : "cats.effect.IO.flatMap", "link" : "cats\/effect\/IO.html#flatMap[B](f:A=>cats.effect.IO[B]):cats.effect.IO[B]", "kind" : "def"}, {"label" : "backgroundOn", "tail" : "(ec: ExecutionContext): ResourceIO[IO[OutcomeIO[A]]]", "member" : "cats.effect.IO.backgroundOn", "link" : "cats\/effect\/IO.html#backgroundOn(ec:scala.concurrent.ExecutionContext):cats.effect.ResourceIO[cats.effect.IO[cats.effect.OutcomeIO[A@scala.annotation.unchecked.uncheckedVariance]]]", "kind" : "def"}, {"label" : "startOn", "tail" : "(ec: ExecutionContext): IO[FiberIO[A]]", "member" : "cats.effect.IO.startOn", "link" : "cats\/effect\/IO.html#startOn(ec:scala.concurrent.ExecutionContext):cats.effect.IO[cats.effect.FiberIO[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "evalOn", "tail" : "(ec: ExecutionContext): IO[A]", "member" : "cats.effect.IO.evalOn", "link" : "cats\/effect\/IO.html#evalOn(ec:scala.concurrent.ExecutionContext):cats.effect.IO[A]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(use: (A) => IO[B])(release: (A, OutcomeIO[B]) => IO[Unit]): IO[B]", "member" : "cats.effect.IO.bracketCase", "link" : "cats\/effect\/IO.html#bracketCase[B](use:A=>cats.effect.IO[B])(release:(A,cats.effect.OutcomeIO[B])=>cats.effect.IO[Unit]):cats.effect.IO[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(use: (A) => IO[B])(release: (A) => IO[Unit]): IO[B]", "member" : "cats.effect.IO.bracket", "link" : "cats\/effect\/IO.html#bracket[B](use:A=>cats.effect.IO[B])(release:A=>cats.effect.IO[Unit]):cats.effect.IO[B]", "kind" : "def"}, {"label" : "both", "tail" : "(that: IO[B]): IO[(A, B)]", "member" : "cats.effect.IO.both", "link" : "cats\/effect\/IO.html#both[B](that:cats.effect.IO[B]):cats.effect.IO[(A,B)]", "kind" : "def"}, {"label" : "bothOutcome", "tail" : "(that: IO[B]): IO[(OutcomeIO[A], OutcomeIO[B])]", "member" : "cats.effect.IO.bothOutcome", "link" : "cats\/effect\/IO.html#bothOutcome[B](that:cats.effect.IO[B]):cats.effect.IO[(cats.effect.OutcomeIO[A@scala.annotation.unchecked.uncheckedVariance],cats.effect.OutcomeIO[B])]", "kind" : "def"}, {"label" : "option", "tail" : "(): IO[Option[A]]", "member" : "cats.effect.IO.option", "link" : "cats\/effect\/IO.html#option:cats.effect.IO[Option[A]]", "kind" : "def"}, {"label" : "attempt", "tail" : "(): IO[Either[Throwable, A]]", "member" : "cats.effect.IO.attempt", "link" : "cats\/effect\/IO.html#attempt:cats.effect.IO[Either[Throwable,A]]", "kind" : "def"}, {"label" : "as", "tail" : "(b: B): IO[B]", "member" : "cats.effect.IO.as", "link" : "cats\/effect\/IO.html#as[B](b:B):cats.effect.IO[B]", "kind" : "def"}, {"label" : "<&", "tail" : "(that: IO[B]): IO[A]", "member" : "cats.effect.IO.<&", "link" : "cats\/effect\/IO.html#<&[B](that:cats.effect.IO[B]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "&>", "tail" : "(that: IO[B]): IO[B]", "member" : "cats.effect.IO.&>", "link" : "cats\/effect\/IO.html#&>[B](that:cats.effect.IO[B]):cats.effect.IO[B]", "kind" : "def"}, {"label" : ">>", "tail" : "(that: => IO[B]): IO[B]", "member" : "cats.effect.IO.>>", "link" : "cats\/effect\/IO.html#>>[B](that:=>cats.effect.IO[B]):cats.effect.IO[B]", "kind" : "def"}, {"label" : "*>", "tail" : "(that: IO[B]): IO[B]", "member" : "cats.effect.IO.*>", "link" : "cats\/effect\/IO.html#*>[B](that:cats.effect.IO[B]):cats.effect.IO[B]", "kind" : "def"}, {"label" : "<*", "tail" : "(that: IO[B]): IO[A]", "member" : "cats.effect.IO.<*", "link" : "cats\/effect\/IO.html#<*[B](that:cats.effect.IO[B]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "unsafeToCompletableFuture", "tail" : "()(runtime: IORuntime): CompletableFuture[A]", "member" : "cats.effect.IOPlatform.unsafeToCompletableFuture", "link" : "cats\/effect\/IO.html#unsafeToCompletableFuture()(implicitruntime:cats.effect.unsafe.IORuntime):java.util.concurrent.CompletableFuture[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "unsafeRunTimed", "tail" : "(limit: FiniteDuration)(runtime: IORuntime): Option[A]", "member" : "cats.effect.IOPlatform.unsafeRunTimed", "link" : "cats\/effect\/IO.html#unsafeRunTimed(limit:scala.concurrent.duration.FiniteDuration)(implicitruntime:cats.effect.unsafe.IORuntime):Option[A]", "kind" : "final def"}, {"label" : "unsafeRunSync", "tail" : "()(runtime: IORuntime): A", "member" : "cats.effect.IOPlatform.unsafeRunSync", "link" : "cats\/effect\/IO.html#unsafeRunSync()(implicitruntime:cats.effect.unsafe.IORuntime):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/IO.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/IO.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/IO.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/IO.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/IO.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/IO.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/IO.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IO.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IO.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IO.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/IO.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/IO.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/IO.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/IO.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/IO.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/IO.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/IO.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/IO.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "IOSemigroup", "tail" : "", "member" : "cats.effect.IOLowPriorityImplicits.IOSemigroup", "link" : "cats\/effect\/IO$.html#IOSemigroup[A]extendscats.Semigroup[cats.effect.IO[A]]", "kind" : "class"}, {"label" : "consoleForIO", "tail" : ": Console[IO]", "member" : "cats.effect.IO.consoleForIO", "link" : "cats\/effect\/IO$.html#consoleForIO:cats.effect.std.Console[cats.effect.IO]", "kind" : "implicit val"}, {"label" : "parallelForIO", "tail" : "(): Aux[IO, Par]", "member" : "cats.effect.IO.parallelForIO", "link" : "cats\/effect\/IO$.html#parallelForIO:cats.Parallel.Aux[cats.effect.IO,cats.effect.IO.Par]", "kind" : "implicit def"}, {"label" : "asyncForIO", "tail" : "(): kernel.Async[IO]", "member" : "cats.effect.IO.asyncForIO", "link" : "cats\/effect\/IO$.html#asyncForIO:cats.effect.kernel.Async[cats.effect.IO]", "kind" : "implicit def"}, {"label" : "alignForIO", "tail" : "(): Align[IO]", "member" : "cats.effect.IO.alignForIO", "link" : "cats\/effect\/IO$.html#alignForIO:cats.Align[cats.effect.IO]", "kind" : "implicit def"}, {"label" : "IOSemigroupK", "tail" : "", "member" : "cats.effect.IO.IOSemigroupK", "link" : "cats\/effect\/IO$.html#IOSemigroupKextendsSemigroupK[cats.effect.IO]", "kind" : "class"}, {"label" : "semigroupKForIO", "tail" : ": SemigroupK[IO]", "member" : "cats.effect.IO.semigroupKForIO", "link" : "cats\/effect\/IO$.html#semigroupKForIO:cats.SemigroupK[cats.effect.IO]", "kind" : "implicit val"}, {"label" : "IOMonoid", "tail" : "", "member" : "cats.effect.IO.IOMonoid", "link" : "cats\/effect\/IO$.html#IOMonoid[A]extendsIO.IOSemigroup[A]withcats.Monoid[cats.effect.IO[A]]", "kind" : "class"}, {"label" : "monoidForIO", "tail" : "(arg0: Monoid[A]): Monoid[IO[A]]", "member" : "cats.effect.IO.monoidForIO", "link" : "cats\/effect\/IO$.html#monoidForIO[A](implicitevidence$7:cats.Monoid[A]):cats.Monoid[cats.effect.IO[A]]", "kind" : "implicit def"}, {"label" : "showForIO", "tail" : "(arg0: Show[A]): Show[IO[A]]", "member" : "cats.effect.IO.showForIO", "link" : "cats\/effect\/IO$.html#showForIO[A](implicitevidence$6:cats.Show[A]):cats.Show[cats.effect.IO[A]]", "kind" : "implicit def"}, {"label" : "fromTry", "tail" : "(t: Try[A]): IO[A]", "member" : "cats.effect.IO.fromTry", "link" : "cats\/effect\/IO$.html#fromTry[A](t:scala.util.Try[A]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(e: Either[Throwable, A]): IO[A]", "member" : "cats.effect.IO.fromEither", "link" : "cats\/effect\/IO$.html#fromEither[A](e:Either[Throwable,A]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(o: Option[A])(orElse: => Throwable): IO[A]", "member" : "cats.effect.IO.fromOption", "link" : "cats\/effect\/IO$.html#fromOption[A](o:Option[A])(orElse:=>Throwable):cats.effect.IO[A]", "kind" : "def"}, {"label" : "eval", "tail" : "(fa: Eval[A]): IO[A]", "member" : "cats.effect.IO.eval", "link" : "cats\/effect\/IO$.html#eval[A](fa:cats.Eval[A]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "println", "tail" : "(a: A)(S: Show[A]): IO[Unit]", "member" : "cats.effect.IO.println", "link" : "cats\/effect\/IO$.html#println[A](a:A)(implicitS:cats.Show[A]):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "print", "tail" : "(a: A)(S: Show[A]): IO[Unit]", "member" : "cats.effect.IO.print", "link" : "cats\/effect\/IO$.html#print[A](a:A)(implicitS:cats.Show[A]):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "readLine", "tail" : "(): IO[String]", "member" : "cats.effect.IO.readLine", "link" : "cats\/effect\/IO$.html#readLine:cats.effect.IO[String]", "kind" : "def"}, {"label" : "raiseUnless", "tail" : "(cond: Boolean)(e: => Throwable): IO[Unit]", "member" : "cats.effect.IO.raiseUnless", "link" : "cats\/effect\/IO$.html#raiseUnless(cond:Boolean)(e:=>Throwable):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "raiseWhen", "tail" : "(cond: Boolean)(e: => Throwable): IO[Unit]", "member" : "cats.effect.IO.raiseWhen", "link" : "cats\/effect\/IO$.html#raiseWhen(cond:Boolean)(e:=>Throwable):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(action: => IO[Unit]): IO[Unit]", "member" : "cats.effect.IO.unlessA", "link" : "cats\/effect\/IO$.html#unlessA(cond:Boolean)(action:=>cats.effect.IO[Unit]):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(action: => IO[Unit]): IO[Unit]", "member" : "cats.effect.IO.whenA", "link" : "cats\/effect\/IO$.html#whenA(cond:Boolean)(action:=>cats.effect.IO[Unit]):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "unique", "tail" : "(): IO[Token]", "member" : "cats.effect.IO.unique", "link" : "cats\/effect\/IO$.html#unique:cats.effect.IO[cats.effect.Unique.Token]", "kind" : "def"}, {"label" : "bracketFull", "tail" : "(acquire: (Poll[IO]) => IO[A])(use: (A) => IO[B])(release: (A, OutcomeIO[B]) => IO[Unit]): IO[B]", "member" : "cats.effect.IO.bracketFull", "link" : "cats\/effect\/IO$.html#bracketFull[A,B](acquire:cats.effect.Poll[cats.effect.IO]=>cats.effect.IO[A])(use:A=>cats.effect.IO[B])(release:(A,cats.effect.OutcomeIO[B])=>cats.effect.IO[Unit]):cats.effect.IO[B]", "kind" : "def"}, {"label" : "deferred", "tail" : "(): IO[Deferred[IO, A]]", "member" : "cats.effect.IO.deferred", "link" : "cats\/effect\/IO$.html#deferred[A]:cats.effect.IO[cats.effect.Deferred[cats.effect.IO,A]]", "kind" : "def"}, {"label" : "ref", "tail" : "(a: A): IO[Ref[IO, A]]", "member" : "cats.effect.IO.ref", "link" : "cats\/effect\/IO$.html#ref[A](a:A):cats.effect.IO[cats.effect.Ref[cats.effect.IO,A]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(left: IO[A], right: IO[B]): IO[Either[(OutcomeIO[A], FiberIO[B]), (FiberIO[A], OutcomeIO[B])]]", "member" : "cats.effect.IO.racePair", "link" : "cats\/effect\/IO$.html#racePair[A,B](left:cats.effect.IO[A],right:cats.effect.IO[B]):cats.effect.IO[Either[(cats.effect.OutcomeIO[A],cats.effect.FiberIO[B]),(cats.effect.FiberIO[A],cats.effect.OutcomeIO[B])]]", "kind" : "def"}, {"label" : "race", "tail" : "(left: IO[A], right: IO[B]): IO[Either[A, B]]", "member" : "cats.effect.IO.race", "link" : "cats\/effect\/IO$.html#race[A,B](left:cats.effect.IO[A],right:cats.effect.IO[B]):cats.effect.IO[Either[A,B]]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(fut: IO[Future[A]]): IO[A]", "member" : "cats.effect.IO.fromFuture", "link" : "cats\/effect\/IO$.html#fromFuture[A](fut:cats.effect.IO[scala.concurrent.Future[A]]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "both", "tail" : "(left: IO[A], right: IO[B]): IO[(A, B)]", "member" : "cats.effect.IO.both", "link" : "cats\/effect\/IO$.html#both[A,B](left:cats.effect.IO[A],right:cats.effect.IO[B]):cats.effect.IO[(A,B)]", "kind" : "def"}, {"label" : "bothOutcome", "tail" : "(left: IO[A], right: IO[B]): IO[(OutcomeIO[A], OutcomeIO[B])]", "member" : "cats.effect.IO.bothOutcome", "link" : "cats\/effect\/IO$.html#bothOutcome[A,B](left:cats.effect.IO[A],right:cats.effect.IO[B]):cats.effect.IO[(cats.effect.OutcomeIO[A],cats.effect.OutcomeIO[B])]", "kind" : "def"}, {"label" : "stub", "tail" : "(): IO[Nothing]", "member" : "cats.effect.IO.stub", "link" : "cats\/effect\/IO$.html#stub:cats.effect.IO[Nothing]", "kind" : "def"}, {"label" : "unit", "tail" : "(): IO[Unit]", "member" : "cats.effect.IO.unit", "link" : "cats\/effect\/IO$.html#unit:cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(body: (Poll[IO]) => IO[A]): IO[A]", "member" : "cats.effect.IO.uncancelable", "link" : "cats\/effect\/IO$.html#uncancelable[A](body:cats.effect.Poll[cats.effect.IO]=>cats.effect.IO[A]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "sleep", "tail" : "(delay: FiniteDuration): IO[Unit]", "member" : "cats.effect.IO.sleep", "link" : "cats\/effect\/IO$.html#sleep(delay:scala.concurrent.duration.FiniteDuration):cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "realTime", "tail" : "(): IO[FiniteDuration]", "member" : "cats.effect.IO.realTime", "link" : "cats\/effect\/IO$.html#realTime:cats.effect.IO[scala.concurrent.duration.FiniteDuration]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(t: Throwable): IO[A]", "member" : "cats.effect.IO.raiseError", "link" : "cats\/effect\/IO$.html#raiseError[A](t:Throwable):cats.effect.IO[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(value: A): IO[A]", "member" : "cats.effect.IO.pure", "link" : "cats\/effect\/IO$.html#pure[A](value:A):cats.effect.IO[A]", "kind" : "def"}, {"label" : "parSequenceN", "tail" : "(n: Int)(tma: T[IO[A]])(arg0: Traverse[T]): IO[T[A]]", "member" : "cats.effect.IO.parSequenceN", "link" : "cats\/effect\/IO$.html#parSequenceN[T[_],A](n:Int)(tma:T[cats.effect.IO[A]])(implicitevidence$5:cats.Traverse[T]):cats.effect.IO[T[A]]", "kind" : "def"}, {"label" : "parTraverseN", "tail" : "(n: Int)(ta: T[A])(f: (A) => IO[B])(arg0: Traverse[T]): IO[T[B]]", "member" : "cats.effect.IO.parTraverseN", "link" : "cats\/effect\/IO$.html#parTraverseN[T[_],A,B](n:Int)(ta:T[A])(f:A=>cats.effect.IO[B])(implicitevidence$4:cats.Traverse[T]):cats.effect.IO[T[B]]", "kind" : "def"}, {"label" : "some", "tail" : "(a: A): IO[Option[A]]", "member" : "cats.effect.IO.some", "link" : "cats\/effect\/IO$.html#some[A](a:A):cats.effect.IO[Option[A]]", "kind" : "def"}, {"label" : "none", "tail" : "(): IO[Option[A]]", "member" : "cats.effect.IO.none", "link" : "cats\/effect\/IO$.html#none[A]:cats.effect.IO[Option[A]]", "kind" : "def"}, {"label" : "never", "tail" : "(): IO[A]", "member" : "cats.effect.IO.never", "link" : "cats\/effect\/IO$.html#never[A]:cats.effect.IO[A]", "kind" : "def"}, {"label" : "monotonic", "tail" : "(): IO[FiniteDuration]", "member" : "cats.effect.IO.monotonic", "link" : "cats\/effect\/IO$.html#monotonic:cats.effect.IO[scala.concurrent.duration.FiniteDuration]", "kind" : "def"}, {"label" : "executionContext", "tail" : "(): IO[ExecutionContext]", "member" : "cats.effect.IO.executionContext", "link" : "cats\/effect\/IO$.html#executionContext:cats.effect.IO[scala.concurrent.ExecutionContext]", "kind" : "def"}, {"label" : "cont", "tail" : "(body: Cont[IO, K, R]): IO[R]", "member" : "cats.effect.IO.cont", "link" : "cats\/effect\/IO$.html#cont[K,R](body:cats.effect.Cont[cats.effect.IO,K,R]):cats.effect.IO[R]", "kind" : "def"}, {"label" : "cede", "tail" : "(): IO[Unit]", "member" : "cats.effect.IO.cede", "link" : "cats\/effect\/IO$.html#cede:cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "canceled", "tail" : "(): IO[Unit]", "member" : "cats.effect.IO.canceled", "link" : "cats\/effect\/IO$.html#canceled:cats.effect.IO[Unit]", "kind" : "def"}, {"label" : "async_", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): IO[A]", "member" : "cats.effect.IO.async_", "link" : "cats\/effect\/IO$.html#async_[A](k:(Either[Throwable,A]=>Unit)=>Unit):cats.effect.IO[A]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => IO[Option[IO[Unit]]]): IO[A]", "member" : "cats.effect.IO.async", "link" : "cats\/effect\/IO$.html#async[A](k:(Either[Throwable,A]=>Unit)=>cats.effect.IO[Option[cats.effect.IO[Unit]]]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(thunk: => IO[A]): IO[A]", "member" : "cats.effect.IO.defer", "link" : "cats\/effect\/IO$.html#defer[A](thunk:=>cats.effect.IO[A]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): IO[A]", "member" : "cats.effect.IO.delay", "link" : "cats\/effect\/IO$.html#delay[A](thunk:=>A):cats.effect.IO[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(thunk: => A): IO[A]", "member" : "cats.effect.IO.apply", "link" : "cats\/effect\/IO$.html#apply[A](thunk:=>A):cats.effect.IO[A]", "kind" : "def"}, {"label" : "Par", "tail" : "", "member" : "cats.effect.IO.Par", "link" : "cats\/effect\/IO$.html#Par[A]=cats.effect.ParallelF[cats.effect.IO,A]", "kind" : "type"}, {"label" : "semigroupForIO", "tail" : "(arg0: Semigroup[A]): Semigroup[IO[A]]", "member" : "cats.effect.IOLowPriorityImplicits.semigroupForIO", "link" : "cats\/effect\/IO$.html#semigroupForIO[A](implicitevidence$3:cats.Semigroup[A]):cats.Semigroup[cats.effect.IO[A]]", "kind" : "implicit def"}, {"label" : "showForIONoPure", "tail" : "(): Show[IO[A]]", "member" : "cats.effect.IOLowPriorityImplicits.showForIONoPure", "link" : "cats\/effect\/IO$.html#showForIONoPure[A]:cats.Show[cats.effect.IO[A]]", "kind" : "implicit def"}, {"label" : "realTimeInstant", "tail" : "(): IO[Instant]", "member" : "cats.effect.IOCompanionPlatform.realTimeInstant", "link" : "cats\/effect\/IO$.html#realTimeInstant:cats.effect.IO[java.time.Instant]", "kind" : "def"}, {"label" : "fromCompletableFuture", "tail" : "(fut: IO[CompletableFuture[A]]): IO[A]", "member" : "cats.effect.IOCompanionPlatform.fromCompletableFuture", "link" : "cats\/effect\/IO$.html#fromCompletableFuture[A](fut:cats.effect.IO[java.util.concurrent.CompletableFuture[A]]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(hint: Type)(thunk: => A): IO[A]", "member" : "cats.effect.IOCompanionPlatform.suspend", "link" : "cats\/effect\/IO$.html#suspend[A](hint:cats.effect.Sync.Type)(thunk:=>A):cats.effect.IO[A]", "kind" : "def"}, {"label" : "interruptible", "tail" : "(many: Boolean)(thunk: => A): IO[A]", "member" : "cats.effect.IOCompanionPlatform.interruptible", "link" : "cats\/effect\/IO$.html#interruptible[A](many:Boolean)(thunk:=>A):cats.effect.IO[A]", "kind" : "def"}, {"label" : "blocking", "tail" : "(thunk: => A): IO[A]", "member" : "cats.effect.IOCompanionPlatform.blocking", "link" : "cats\/effect\/IO$.html#blocking[A](thunk:=>A):cats.effect.IO[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/IO$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/IO$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/IO$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/IO$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/IO$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/IO$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/IO$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IO$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IO$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IO$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/IO$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/IO$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/IO$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/IO$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/IO$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/IO$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/IO$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/IO$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/IO$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/IO.html", "kind" : "class"}, {"name" : "cats.effect.IOApp", "object" : "cats\/effect\/IOApp$.html", "members_object" : [{"label" : "Simple", "tail" : "", "member" : "cats.effect.IOApp.Simple", "link" : "cats\/effect\/IOApp$.html#SimpleextendsIOApp", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/IOApp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/IOApp$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/IOApp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/IOApp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/IOApp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/IOApp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/IOApp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOApp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOApp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOApp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/IOApp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/IOApp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/IOApp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/IOApp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/IOApp$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/IOApp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/IOApp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/IOApp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/IOApp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/IOApp.html", "kind" : "trait", "members_trait" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "cats.effect.IOApp.main", "link" : "cats\/effect\/IOApp.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "computeWorkerThreadCount", "tail" : "(): Int", "member" : "cats.effect.IOApp.computeWorkerThreadCount", "link" : "cats\/effect\/IOApp.html#computeWorkerThreadCount:Int", "kind" : "def"}, {"label" : "runtimeConfig", "tail" : "(): IORuntimeConfig", "member" : "cats.effect.IOApp.runtimeConfig", "link" : "cats\/effect\/IOApp.html#runtimeConfig:cats.effect.unsafe.IORuntimeConfig", "kind" : "def"}, {"label" : "runtime", "tail" : "(): IORuntime", "member" : "cats.effect.IOApp.runtime", "link" : "cats\/effect\/IOApp.html#runtime:cats.effect.unsafe.IORuntime", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/IOApp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/IOApp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/IOApp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/IOApp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/IOApp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/IOApp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/IOApp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOApp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOApp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOApp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/IOApp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/IOApp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/IOApp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/IOApp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/IOApp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/IOApp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/IOApp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/IOApp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/IOApp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(args: List[String]): IO[ExitCode]", "member" : "cats.effect.IOApp.run", "link" : "cats\/effect\/IOApp.html#run(args:List[String]):cats.effect.IO[cats.effect.ExitCode]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.IOLocal", "object" : "cats\/effect\/IOLocal$.html", "members_object" : [{"label" : "apply", "tail" : "(default: A): IO[IOLocal[A]]", "member" : "cats.effect.IOLocal.apply", "link" : "cats\/effect\/IOLocal$.html#apply[A](default:A):cats.effect.IO[cats.effect.IOLocal[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/IOLocal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/IOLocal$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/IOLocal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/IOLocal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/IOLocal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/IOLocal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/IOLocal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOLocal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOLocal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOLocal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/IOLocal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/IOLocal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/IOLocal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/IOLocal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/IOLocal$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/IOLocal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/IOLocal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/IOLocal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/IOLocal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/IOLocal.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/IOLocal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/IOLocal.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/IOLocal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/IOLocal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/IOLocal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/IOLocal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/IOLocal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOLocal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOLocal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/IOLocal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/IOLocal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/IOLocal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/IOLocal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/IOLocal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/IOLocal.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/IOLocal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/IOLocal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/IOLocal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/IOLocal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getAndReset", "tail" : "(): IO[A]", "member" : "cats.effect.IOLocal.getAndReset", "link" : "cats\/effect\/IOLocal.html#getAndReset:cats.effect.IO[A]", "kind" : "abstract def"}, {"label" : "getAndSet", "tail" : "(value: A): IO[A]", "member" : "cats.effect.IOLocal.getAndSet", "link" : "cats\/effect\/IOLocal.html#getAndSet(value:A):cats.effect.IO[A]", "kind" : "abstract def"}, {"label" : "modify", "tail" : "(f: (A) => (A, B)): IO[B]", "member" : "cats.effect.IOLocal.modify", "link" : "cats\/effect\/IOLocal.html#modify[B](f:A=>(A,B)):cats.effect.IO[B]", "kind" : "abstract def"}, {"label" : "update", "tail" : "(f: (A) => A): IO[Unit]", "member" : "cats.effect.IOLocal.update", "link" : "cats\/effect\/IOLocal.html#update(f:A=>A):cats.effect.IO[Unit]", "kind" : "abstract def"}, {"label" : "reset", "tail" : "(): IO[Unit]", "member" : "cats.effect.IOLocal.reset", "link" : "cats\/effect\/IOLocal.html#reset:cats.effect.IO[Unit]", "kind" : "abstract def"}, {"label" : "set", "tail" : "(value: A): IO[Unit]", "member" : "cats.effect.IOLocal.set", "link" : "cats\/effect\/IOLocal.html#set(value:A):cats.effect.IO[Unit]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): IO[A]", "member" : "cats.effect.IOLocal.get", "link" : "cats\/effect\/IOLocal.html#get:cats.effect.IO[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.LiftIO", "object" : "cats\/effect\/LiftIO$.html", "members_object" : [{"label" : "catsEffectLiftIOForResource", "tail" : "(F00: LiftIO[F], F10: Applicative[F]): LiftIO[[β$16$]kernel.Resource[F, β$16$]]", "member" : "cats.effect.LiftIO.catsEffectLiftIOForResource", "link" : "cats\/effect\/LiftIO$.html#catsEffectLiftIOForResource[F[_]](implicitF00:cats.effect.LiftIO[F],implicitF10:cats.Applicative[F]):cats.effect.LiftIO[[β$16$]cats.effect.kernel.Resource[F,β$16$]]", "kind" : "implicit def"}, {"label" : "ioLiftIO", "tail" : ": LiftIO[IO]", "member" : "cats.effect.LiftIO.ioLiftIO", "link" : "cats\/effect\/LiftIO$.html#ioLiftIO:cats.effect.LiftIO[cats.effect.IO]", "kind" : "implicit val"}, {"label" : "catsContTLiftIO", "tail" : "(F: LiftIO[F], FF: FlatMap[F]): LiftIO[[γ$14$]ContT[F, R, γ$14$]]", "member" : "cats.effect.LiftIO.catsContTLiftIO", "link" : "cats\/effect\/LiftIO$.html#catsContTLiftIO[F[_],R](implicitF:cats.effect.LiftIO[F],implicitFF:cats.FlatMap[F]):cats.effect.LiftIO[[γ$14$]cats.data.ContT[F,R,γ$14$]]", "kind" : "implicit def"}, {"label" : "catsReaderWriterStateTLiftIO", "tail" : "(F: LiftIO[F], FA: Applicative[F], L: kernel.Monoid[L]): LiftIO[[ε$12$]IndexedReaderWriterStateT[F, E, L, S, S, ε$12$]]", "member" : "cats.effect.LiftIO.catsReaderWriterStateTLiftIO", "link" : "cats\/effect\/LiftIO$.html#catsReaderWriterStateTLiftIO[F[_],E,L,S](implicitF:cats.effect.LiftIO[F],implicitFA:cats.Applicative[F],implicitL:cats.kernel.Monoid[L]):cats.effect.LiftIO[[ε$12$]cats.data.IndexedReaderWriterStateT[F,E,L,S,S,ε$12$]]", "kind" : "implicit def"}, {"label" : "catsIorTLiftIO", "tail" : "(F: LiftIO[F], FA: Applicative[F]): LiftIO[[γ$10$]IorT[F, L, γ$10$]]", "member" : "cats.effect.LiftIO.catsIorTLiftIO", "link" : "cats\/effect\/LiftIO$.html#catsIorTLiftIO[F[_],L](implicitF:cats.effect.LiftIO[F],implicitFA:cats.Applicative[F]):cats.effect.LiftIO[[γ$10$]cats.data.IorT[F,L,γ$10$]]", "kind" : "implicit def"}, {"label" : "catsWriterTLiftIO", "tail" : "(F: LiftIO[F], FA: Applicative[F], L: kernel.Monoid[L]): LiftIO[[γ$8$]WriterT[F, L, γ$8$]]", "member" : "cats.effect.LiftIO.catsWriterTLiftIO", "link" : "cats\/effect\/LiftIO$.html#catsWriterTLiftIO[F[_],L](implicitF:cats.effect.LiftIO[F],implicitFA:cats.Applicative[F],implicitL:cats.kernel.Monoid[L]):cats.effect.LiftIO[[γ$8$]cats.data.WriterT[F,L,γ$8$]]", "kind" : "implicit def"}, {"label" : "catsStateTLiftIO", "tail" : "(F: LiftIO[F], FA: Applicative[F]): LiftIO[[γ$6$]IndexedStateT[F, S, S, γ$6$]]", "member" : "cats.effect.LiftIO.catsStateTLiftIO", "link" : "cats\/effect\/LiftIO$.html#catsStateTLiftIO[F[_],S](implicitF:cats.effect.LiftIO[F],implicitFA:cats.Applicative[F]):cats.effect.LiftIO[[γ$6$]cats.data.IndexedStateT[F,S,S,γ$6$]]", "kind" : "implicit def"}, {"label" : "catsOptionTLiftIO", "tail" : "(F: LiftIO[F], FF: Functor[F]): LiftIO[[β$4$]OptionT[F, β$4$]]", "member" : "cats.effect.LiftIO.catsOptionTLiftIO", "link" : "cats\/effect\/LiftIO$.html#catsOptionTLiftIO[F[_]](implicitF:cats.effect.LiftIO[F],implicitFF:cats.Functor[F]):cats.effect.LiftIO[[β$4$]cats.data.OptionT[F,β$4$]]", "kind" : "implicit def"}, {"label" : "catsKleisliLiftIO", "tail" : "(F: LiftIO[F]): LiftIO[[γ$2$]Kleisli[F, R, γ$2$]]", "member" : "cats.effect.LiftIO.catsKleisliLiftIO", "link" : "cats\/effect\/LiftIO$.html#catsKleisliLiftIO[F[_],R](implicitF:cats.effect.LiftIO[F]):cats.effect.LiftIO[[γ$2$]cats.data.Kleisli[F,R,γ$2$]]", "kind" : "implicit def"}, {"label" : "catsEitherTLiftIO", "tail" : "(F: LiftIO[F], FF: Functor[F]): LiftIO[[γ$0$]EitherT[F, L, γ$0$]]", "member" : "cats.effect.LiftIO.catsEitherTLiftIO", "link" : "cats\/effect\/LiftIO$.html#catsEitherTLiftIO[F[_],L](implicitF:cats.effect.LiftIO[F],implicitFF:cats.Functor[F]):cats.effect.LiftIO[[γ$0$]cats.data.EitherT[F,L,γ$0$]]", "kind" : "implicit def"}, {"label" : "liftK", "tail" : "(F: LiftIO[F]): ~>[IO, F]", "member" : "cats.effect.LiftIO.liftK", "link" : "cats\/effect\/LiftIO$.html#liftK[F[_]](implicitF:cats.effect.LiftIO[F]):cats.effect.IO~>F", "kind" : "def"}, {"label" : "apply", "tail" : "(F: LiftIO[F]): F.type", "member" : "cats.effect.LiftIO.apply", "link" : "cats\/effect\/LiftIO$.html#apply[F[_]](implicitF:cats.effect.LiftIO[F]):F.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/LiftIO$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/LiftIO$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/LiftIO$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/LiftIO$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/LiftIO$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/LiftIO$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/LiftIO$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/LiftIO$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/LiftIO$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/LiftIO$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/LiftIO$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/LiftIO$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/LiftIO$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/LiftIO$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/LiftIO$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/LiftIO$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/LiftIO$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/LiftIO$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/LiftIO$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/LiftIO.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/LiftIO.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/LiftIO.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/LiftIO.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/LiftIO.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/LiftIO.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/LiftIO.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/LiftIO.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/LiftIO.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/LiftIO.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/LiftIO.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/LiftIO.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/LiftIO.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/LiftIO.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/LiftIO.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/LiftIO.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/LiftIO.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/LiftIO.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/LiftIO.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/LiftIO.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): F[A]", "member" : "cats.effect.LiftIO.liftIO", "link" : "cats\/effect\/LiftIO.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.ResourceApp", "object" : "cats\/effect\/ResourceApp$.html", "members_object" : [{"label" : "Forever", "tail" : "", "member" : "cats.effect.ResourceApp.Forever", "link" : "cats\/effect\/ResourceApp$.html#ForeverextendsAnyRef", "kind" : "trait"}, {"label" : "Simple", "tail" : "", "member" : "cats.effect.ResourceApp.Simple", "link" : "cats\/effect\/ResourceApp$.html#SimpleextendsResourceApp", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/ResourceApp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/ResourceApp$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/ResourceApp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/ResourceApp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/ResourceApp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/ResourceApp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/ResourceApp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ResourceApp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ResourceApp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ResourceApp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/ResourceApp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/ResourceApp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/ResourceApp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/ResourceApp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/ResourceApp$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/ResourceApp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/ResourceApp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/ResourceApp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/ResourceApp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/ResourceApp.html", "kind" : "trait", "members_trait" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "cats.effect.ResourceApp.main", "link" : "cats\/effect\/ResourceApp.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/ResourceApp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/ResourceApp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/ResourceApp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/ResourceApp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/ResourceApp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/ResourceApp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/ResourceApp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ResourceApp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ResourceApp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/ResourceApp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/ResourceApp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/ResourceApp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/ResourceApp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/ResourceApp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/ResourceApp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/ResourceApp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/ResourceApp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/ResourceApp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/ResourceApp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(args: List[String]): Resource[IO, ExitCode]", "member" : "cats.effect.ResourceApp.run", "link" : "cats\/effect\/ResourceApp.html#run(args:List[String]):cats.effect.Resource[cats.effect.IO,cats.effect.ExitCode]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.SyncIO", "shortDescription" : "A pure abstraction representing the intention to perform aside effect, where the result of that side effect is obtainedsynchronously.", "object" : "cats\/effect\/SyncIO$.html", "members_class" : [{"label" : "unsafeRunSync", "tail" : "(): A", "member" : "cats.effect.SyncIO.unsafeRunSync", "link" : "cats\/effect\/SyncIO.html#unsafeRunSync():A", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "cats.effect.SyncIO.toString", "link" : "cats\/effect\/SyncIO.html#toString():String", "kind" : "def"}, {"label" : "void", "tail" : "(): SyncIO[Unit]", "member" : "cats.effect.SyncIO.void", "link" : "cats\/effect\/SyncIO.html#void:cats.effect.SyncIO[Unit]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(recover: (Throwable) => SyncIO[B], bind: (A) => SyncIO[B]): SyncIO[B]", "member" : "cats.effect.SyncIO.redeemWith", "link" : "cats\/effect\/SyncIO.html#redeemWith[B](recover:Throwable=>cats.effect.SyncIO[B],bind:A=>cats.effect.SyncIO[B]):cats.effect.SyncIO[B]", "kind" : "def"}, {"label" : "redeem", "tail" : "(recover: (Throwable) => B, map: (A) => B): SyncIO[B]", "member" : "cats.effect.SyncIO.redeem", "link" : "cats\/effect\/SyncIO.html#redeem[B](recover:Throwable=>B,map:A=>B):cats.effect.SyncIO[B]", "kind" : "def"}, {"label" : "productR", "tail" : "(that: SyncIO[B]): SyncIO[B]", "member" : "cats.effect.SyncIO.productR", "link" : "cats\/effect\/SyncIO.html#productR[B](that:cats.effect.SyncIO[B]):cats.effect.SyncIO[B]", "kind" : "def"}, {"label" : "productL", "tail" : "(that: SyncIO[B]): SyncIO[A]", "member" : "cats.effect.SyncIO.productL", "link" : "cats\/effect\/SyncIO.html#productL[B](that:cats.effect.SyncIO[B]):cats.effect.SyncIO[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): SyncIO[B]", "member" : "cats.effect.SyncIO.map", "link" : "cats\/effect\/SyncIO.html#map[B](f:A=>B):cats.effect.SyncIO[B]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (Throwable) => SyncIO[B]): SyncIO[B]", "member" : "cats.effect.SyncIO.handleErrorWith", "link" : "cats\/effect\/SyncIO.html#handleErrorWith[B>:A](f:Throwable=>cats.effect.SyncIO[B]):cats.effect.SyncIO[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => SyncIO[B]): SyncIO[B]", "member" : "cats.effect.SyncIO.flatMap", "link" : "cats\/effect\/SyncIO.html#flatMap[B](f:A=>cats.effect.SyncIO[B]):cats.effect.SyncIO[B]", "kind" : "def"}, {"label" : "attempt", "tail" : "(): SyncIO[Either[Throwable, A]]", "member" : "cats.effect.SyncIO.attempt", "link" : "cats\/effect\/SyncIO.html#attempt:cats.effect.SyncIO[Either[Throwable,A]]", "kind" : "def"}, {"label" : "as", "tail" : "(b: B): SyncIO[B]", "member" : "cats.effect.SyncIO.as", "link" : "cats\/effect\/SyncIO.html#as[B](b:B):cats.effect.SyncIO[B]", "kind" : "def"}, {"label" : ">>", "tail" : "(that: => SyncIO[B]): SyncIO[B]", "member" : "cats.effect.SyncIO.>>", "link" : "cats\/effect\/SyncIO.html#>>[B](that:=>cats.effect.SyncIO[B]):cats.effect.SyncIO[B]", "kind" : "def"}, {"label" : "*>", "tail" : "(that: SyncIO[B]): SyncIO[B]", "member" : "cats.effect.SyncIO.*>", "link" : "cats\/effect\/SyncIO.html#*>[B](that:cats.effect.SyncIO[B]):cats.effect.SyncIO[B]", "kind" : "def"}, {"label" : "<*", "tail" : "(that: SyncIO[B]): SyncIO[A]", "member" : "cats.effect.SyncIO.<*", "link" : "cats\/effect\/SyncIO.html#<*[B](that:cats.effect.SyncIO[B]):cats.effect.SyncIO[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/SyncIO.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/SyncIO.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/SyncIO.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/SyncIO.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/SyncIO.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/SyncIO.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/SyncIO.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/SyncIO.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/SyncIO.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/SyncIO.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/SyncIO.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/SyncIO.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/SyncIO.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/SyncIO.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/SyncIO.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/SyncIO.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/SyncIO.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/SyncIO.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "SyncIOSemigroup", "tail" : "", "member" : "cats.effect.SyncIOLowPriorityImplicits.SyncIOSemigroup", "link" : "cats\/effect\/SyncIO$.html#SyncIOSemigroup[A]extendsSemigroup[cats.effect.SyncIO[A]]", "kind" : "class"}, {"label" : "syncForSyncIO", "tail" : "(): Sync[SyncIO] with MonadCancel[SyncIO, Throwable]", "member" : "cats.effect.SyncIO.syncForSyncIO", "link" : "cats\/effect\/SyncIO$.html#syncForSyncIO:cats.effect.Sync[cats.effect.SyncIO]withcats.effect.MonadCancel[cats.effect.SyncIO,Throwable]", "kind" : "implicit def"}, {"label" : "alignForSyncIO", "tail" : "(): Align[SyncIO]", "member" : "cats.effect.SyncIO.alignForSyncIO", "link" : "cats\/effect\/SyncIO$.html#alignForSyncIO:cats.Align[cats.effect.SyncIO]", "kind" : "implicit def"}, {"label" : "monoidForIO", "tail" : "(arg0: kernel.Monoid[A]): kernel.Monoid[SyncIO[A]]", "member" : "cats.effect.SyncIO.monoidForIO", "link" : "cats\/effect\/SyncIO$.html#monoidForIO[A](implicitevidence$2:cats.kernel.Monoid[A]):cats.kernel.Monoid[cats.effect.SyncIO[A]]", "kind" : "implicit def"}, {"label" : "showForSyncIO", "tail" : "(A: Show[A]): Show[SyncIO[A]]", "member" : "cats.effect.SyncIO.showForSyncIO", "link" : "cats\/effect\/SyncIO$.html#showForSyncIO[A](implicitA:cats.Show[A]):cats.Show[cats.effect.SyncIO[A]]", "kind" : "implicit def"}, {"label" : "fromTry", "tail" : "(t: Try[A]): SyncIO[A]", "member" : "cats.effect.SyncIO.fromTry", "link" : "cats\/effect\/SyncIO$.html#fromTry[A](t:scala.util.Try[A]):cats.effect.SyncIO[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(o: Option[A])(orElse: => Throwable): SyncIO[A]", "member" : "cats.effect.SyncIO.fromOption", "link" : "cats\/effect\/SyncIO$.html#fromOption[A](o:Option[A])(orElse:=>Throwable):cats.effect.SyncIO[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(e: Either[Throwable, A]): SyncIO[A]", "member" : "cats.effect.SyncIO.fromEither", "link" : "cats\/effect\/SyncIO$.html#fromEither[A](e:Either[Throwable,A]):cats.effect.SyncIO[A]", "kind" : "def"}, {"label" : "unit", "tail" : "(): SyncIO[Unit]", "member" : "cats.effect.SyncIO.unit", "link" : "cats\/effect\/SyncIO$.html#unit:cats.effect.SyncIO[Unit]", "kind" : "def"}, {"label" : "realTime", "tail" : ": SyncIO[FiniteDuration]", "member" : "cats.effect.SyncIO.realTime", "link" : "cats\/effect\/SyncIO$.html#realTime:cats.effect.SyncIO[scala.concurrent.duration.FiniteDuration]", "kind" : "val"}, {"label" : "raiseError", "tail" : "(t: Throwable): SyncIO[A]", "member" : "cats.effect.SyncIO.raiseError", "link" : "cats\/effect\/SyncIO$.html#raiseError[A](t:Throwable):cats.effect.SyncIO[A]", "kind" : "def"}, {"label" : "pure", "tail" : "(value: A): SyncIO[A]", "member" : "cats.effect.SyncIO.pure", "link" : "cats\/effect\/SyncIO$.html#pure[A](value:A):cats.effect.SyncIO[A]", "kind" : "def"}, {"label" : "monotonic", "tail" : ": SyncIO[FiniteDuration]", "member" : "cats.effect.SyncIO.monotonic", "link" : "cats\/effect\/SyncIO$.html#monotonic:cats.effect.SyncIO[scala.concurrent.duration.FiniteDuration]", "kind" : "val"}, {"label" : "eval", "tail" : "(fa: Eval[A]): SyncIO[A]", "member" : "cats.effect.SyncIO.eval", "link" : "cats\/effect\/SyncIO$.html#eval[A](fa:cats.Eval[A]):cats.effect.SyncIO[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): SyncIO[A]", "member" : "cats.effect.SyncIO.delay", "link" : "cats\/effect\/SyncIO$.html#delay[A](thunk:=>A):cats.effect.SyncIO[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(thunk: => SyncIO[A]): SyncIO[A]", "member" : "cats.effect.SyncIO.defer", "link" : "cats\/effect\/SyncIO$.html#defer[A](thunk:=>cats.effect.SyncIO[A]):cats.effect.SyncIO[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(thunk: => A): SyncIO[A]", "member" : "cats.effect.SyncIO.apply", "link" : "cats\/effect\/SyncIO$.html#apply[A](thunk:=>A):cats.effect.SyncIO[A]", "kind" : "def"}, {"label" : "semigroupForIO", "tail" : "(arg0: kernel.Semigroup[A]): kernel.Semigroup[SyncIO[A]]", "member" : "cats.effect.SyncIOLowPriorityImplicits.semigroupForIO", "link" : "cats\/effect\/SyncIO$.html#semigroupForIO[A](implicitevidence$1:cats.kernel.Semigroup[A]):cats.kernel.Semigroup[cats.effect.SyncIO[A]]", "kind" : "implicit def"}, {"label" : "realTimeInstant", "tail" : "(): SyncIO[Instant]", "member" : "cats.effect.SyncIOCompanionPlatform.realTimeInstant", "link" : "cats\/effect\/SyncIO$.html#realTimeInstant:cats.effect.SyncIO[java.time.Instant]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/SyncIO$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/SyncIO$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/SyncIO$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/SyncIO$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/SyncIO$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/SyncIO$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/SyncIO$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/SyncIO$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/SyncIO$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/SyncIO$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/SyncIO$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/SyncIO$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/SyncIO$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/SyncIO$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/SyncIO$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/SyncIO$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/SyncIO$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/SyncIO$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/SyncIO$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/SyncIO.html", "kind" : "class"}], "cats.effect.kernel.syntax" : [{"name" : "cats.effect.kernel.syntax.all", "shortDescription" : "", "object" : "cats\/effect\/kernel\/syntax\/package$$all$.html", "members_object" : [{"label" : "clockOps", "tail" : "(wrapped: F[A]): ClockOps[F, A]", "member" : "cats.effect.kernel.syntax.ClockSyntax.clockOps", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#clockOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.ClockOps[F,A]", "kind" : "implicit def"}, {"label" : "effectResourceOps", "tail" : "(wrapped: F[A]): EffectResourceOps[F, A]", "member" : "cats.effect.kernel.syntax.ResourceSyntax.effectResourceOps", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#effectResourceOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.EffectResourceOps[F,A]", "kind" : "implicit def"}, {"label" : "asyncOps", "tail" : "(wrapped: F[A]): AsyncOps[F, A]", "member" : "cats.effect.kernel.syntax.AsyncSyntax.asyncOps", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#asyncOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.AsyncOps[F,A]", "kind" : "implicit def"}, {"label" : "concurrentParSequenceOps", "tail" : "(wrapped: T[F[A]]): ConcurrentParSequenceNOps[T, F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParSequenceOps", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#concurrentParSequenceOps[T[_],F[_],A](wrapped:T[F[A]]):cats.effect.kernel.syntax.ConcurrentParSequenceNOps[T,F,A]", "kind" : "implicit def"}, {"label" : "concurrentParTraverseOps", "tail" : "(wrapped: T[A]): ConcurrentParTraverseNOps[T, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParTraverseOps", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#concurrentParTraverseOps[T[_],A](wrapped:T[A]):cats.effect.kernel.syntax.ConcurrentParTraverseNOps[T,A]", "kind" : "implicit def"}, {"label" : "genConcurrentOps_", "tail" : "(wrapped: F[A]): GenConcurrentOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.genConcurrentOps_", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#genConcurrentOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenConcurrentOps_[F,A]", "kind" : "implicit def"}, {"label" : "genTemporalOps", "tail" : "(wrapped: F[A])(F: GenTemporal[F, E]): GenTemporalOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#genTemporalOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.syntax.GenTemporalOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genTemporalOps_", "tail" : "(wrapped: F[A]): GenTemporalOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps_", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#genTemporalOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenTemporalOps_[F,A]", "kind" : "implicit def"}, {"label" : "genSpawnOps", "tail" : "(wrapped: F[A])(F: GenSpawn[F, E]): GenSpawnOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#genSpawnOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.syntax.GenSpawnOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genSpawnOps_", "tail" : "(wrapped: F[A]): GenSpawnOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps_", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#genSpawnOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenSpawnOps_[F,A]", "kind" : "implicit def"}, {"label" : "monadCancelOps", "tail" : "(wrapped: F[A])(F: MonadCancel[F, E]): MonadCancelOps[F, A, E]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#monadCancelOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.syntax.MonadCancelOps[F,A,E]", "kind" : "implicit def"}, {"label" : "monadCancelOps_", "tail" : "(wrapped: F[A]): MonadCancelOps_[F, A]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps_", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#monadCancelOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.MonadCancelOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$all$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.syntax.AllSyntax", "trait" : "cats\/effect\/kernel\/syntax\/AllSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "clockOps", "tail" : "(wrapped: F[A]): ClockOps[F, A]", "member" : "cats.effect.kernel.syntax.ClockSyntax.clockOps", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#clockOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.ClockOps[F,A]", "kind" : "implicit def"}, {"label" : "effectResourceOps", "tail" : "(wrapped: F[A]): EffectResourceOps[F, A]", "member" : "cats.effect.kernel.syntax.ResourceSyntax.effectResourceOps", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#effectResourceOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.EffectResourceOps[F,A]", "kind" : "implicit def"}, {"label" : "asyncOps", "tail" : "(wrapped: F[A]): AsyncOps[F, A]", "member" : "cats.effect.kernel.syntax.AsyncSyntax.asyncOps", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#asyncOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.AsyncOps[F,A]", "kind" : "implicit def"}, {"label" : "concurrentParSequenceOps", "tail" : "(wrapped: T[F[A]]): ConcurrentParSequenceNOps[T, F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParSequenceOps", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#concurrentParSequenceOps[T[_],F[_],A](wrapped:T[F[A]]):cats.effect.kernel.syntax.ConcurrentParSequenceNOps[T,F,A]", "kind" : "implicit def"}, {"label" : "concurrentParTraverseOps", "tail" : "(wrapped: T[A]): ConcurrentParTraverseNOps[T, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParTraverseOps", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#concurrentParTraverseOps[T[_],A](wrapped:T[A]):cats.effect.kernel.syntax.ConcurrentParTraverseNOps[T,A]", "kind" : "implicit def"}, {"label" : "genConcurrentOps_", "tail" : "(wrapped: F[A]): GenConcurrentOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.genConcurrentOps_", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#genConcurrentOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenConcurrentOps_[F,A]", "kind" : "implicit def"}, {"label" : "genTemporalOps", "tail" : "(wrapped: F[A])(F: GenTemporal[F, E]): GenTemporalOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#genTemporalOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.syntax.GenTemporalOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genTemporalOps_", "tail" : "(wrapped: F[A]): GenTemporalOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps_", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#genTemporalOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenTemporalOps_[F,A]", "kind" : "implicit def"}, {"label" : "genSpawnOps", "tail" : "(wrapped: F[A])(F: GenSpawn[F, E]): GenSpawnOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#genSpawnOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.syntax.GenSpawnOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genSpawnOps_", "tail" : "(wrapped: F[A]): GenSpawnOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps_", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#genSpawnOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenSpawnOps_[F,A]", "kind" : "implicit def"}, {"label" : "monadCancelOps", "tail" : "(wrapped: F[A])(F: MonadCancel[F, E]): MonadCancelOps[F, A, E]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#monadCancelOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.syntax.MonadCancelOps[F,A,E]", "kind" : "implicit def"}, {"label" : "monadCancelOps_", "tail" : "(wrapped: F[A]): MonadCancelOps_[F, A]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps_", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#monadCancelOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.MonadCancelOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/AllSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.syntax.async", "shortDescription" : "", "object" : "cats\/effect\/kernel\/syntax\/package$$async$.html", "members_object" : [{"label" : "asyncOps", "tail" : "(wrapped: F[A]): AsyncOps[F, A]", "member" : "cats.effect.kernel.syntax.AsyncSyntax.asyncOps", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#asyncOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.AsyncOps[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$async$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.syntax.AsyncOps", "shortDescription" : "", "members_class" : [{"label" : "backgroundOn", "tail" : "(ec: ExecutionContext)(F: Async[F]): Resource[F, F[Outcome[F, Throwable, A]]]", "member" : "cats.effect.kernel.syntax.AsyncOps.backgroundOn", "link" : "cats\/effect\/kernel\/syntax\/AsyncOps.html#backgroundOn(ec:scala.concurrent.ExecutionContext)(implicitF:cats.effect.kernel.Async[F]):cats.effect.kernel.Resource[F,F[cats.effect.kernel.Outcome[F,Throwable,A]]]", "kind" : "def"}, {"label" : "startOn", "tail" : "(ec: ExecutionContext)(F: Async[F]): F[Fiber[F, Throwable, A]]", "member" : "cats.effect.kernel.syntax.AsyncOps.startOn", "link" : "cats\/effect\/kernel\/syntax\/AsyncOps.html#startOn(ec:scala.concurrent.ExecutionContext)(implicitF:cats.effect.kernel.Async[F]):F[cats.effect.kernel.Fiber[F,Throwable,A]]", "kind" : "def"}, {"label" : "evalOn", "tail" : "(ec: ExecutionContext)(F: Async[F]): F[A]", "member" : "cats.effect.kernel.syntax.AsyncOps.evalOn", "link" : "cats\/effect\/kernel\/syntax\/AsyncOps.html#evalOn(ec:scala.concurrent.ExecutionContext)(implicitF:cats.effect.kernel.Async[F]):F[A]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/AsyncOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/AsyncOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/AsyncOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/AsyncOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/AsyncOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/AsyncOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/AsyncOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/AsyncOps.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.AsyncSyntax", "trait" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "asyncOps", "tail" : "(wrapped: F[A]): AsyncOps[F, A]", "member" : "cats.effect.kernel.syntax.AsyncSyntax.asyncOps", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#asyncOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.AsyncOps[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/AsyncSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.syntax.clock", "shortDescription" : "", "object" : "cats\/effect\/kernel\/syntax\/package$$clock$.html", "members_object" : [{"label" : "clockOps", "tail" : "(wrapped: F[A]): ClockOps[F, A]", "member" : "cats.effect.kernel.syntax.ClockSyntax.clockOps", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#clockOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.ClockOps[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$clock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.syntax.ClockOps", "shortDescription" : "", "members_class" : [{"label" : "timed", "tail" : "(F: Clock[F]): F[(FiniteDuration, A)]", "member" : "cats.effect.kernel.syntax.ClockOps.timed", "link" : "cats\/effect\/kernel\/syntax\/ClockOps.html#timed(implicitF:cats.effect.kernel.Clock[F]):F[(scala.concurrent.duration.FiniteDuration,A)]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/ClockOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/ClockOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/ClockOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/ClockOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/ClockOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/ClockOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/ClockOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/ClockOps.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.ClockSyntax", "trait" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "clockOps", "tail" : "(wrapped: F[A]): ClockOps[F, A]", "member" : "cats.effect.kernel.syntax.ClockSyntax.clockOps", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#clockOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.ClockOps[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/ClockSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.syntax.concurrent", "shortDescription" : "", "object" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html", "members_object" : [{"label" : "concurrentParSequenceOps", "tail" : "(wrapped: T[F[A]]): ConcurrentParSequenceNOps[T, F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParSequenceOps", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#concurrentParSequenceOps[T[_],F[_],A](wrapped:T[F[A]]):cats.effect.kernel.syntax.ConcurrentParSequenceNOps[T,F,A]", "kind" : "implicit def"}, {"label" : "concurrentParTraverseOps", "tail" : "(wrapped: T[A]): ConcurrentParTraverseNOps[T, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParTraverseOps", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#concurrentParTraverseOps[T[_],A](wrapped:T[A]):cats.effect.kernel.syntax.ConcurrentParTraverseNOps[T,A]", "kind" : "implicit def"}, {"label" : "genConcurrentOps_", "tail" : "(wrapped: F[A]): GenConcurrentOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.genConcurrentOps_", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#genConcurrentOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenConcurrentOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$concurrent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.syntax.ConcurrentParSequenceNOps", "shortDescription" : "", "members_class" : [{"label" : "parSequenceN", "tail" : "(n: Int)(T: Traverse[T], F: GenConcurrent[F, _]): F[T[A]]", "member" : "cats.effect.kernel.syntax.ConcurrentParSequenceNOps.parSequenceN", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParSequenceNOps.html#parSequenceN(n:Int)(implicitT:cats.Traverse[T],implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[T[A]]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParSequenceNOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParSequenceNOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParSequenceNOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParSequenceNOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParSequenceNOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParSequenceNOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParSequenceNOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/ConcurrentParSequenceNOps.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.ConcurrentParTraverseNOps", "shortDescription" : "", "members_class" : [{"label" : "parTraverseN", "tail" : "(n: Int)(f: (A) => F[B])(T: Traverse[T], F: GenConcurrent[F, _]): F[T[B]]", "member" : "cats.effect.kernel.syntax.ConcurrentParTraverseNOps.parTraverseN", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParTraverseNOps.html#parTraverseN[F[_],B](n:Int)(f:A=>F[B])(implicitT:cats.Traverse[T],implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[T[B]]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParTraverseNOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParTraverseNOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParTraverseNOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParTraverseNOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParTraverseNOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParTraverseNOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/ConcurrentParTraverseNOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/ConcurrentParTraverseNOps.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.EffectResourceOps", "shortDescription" : "", "members_class" : [{"label" : "toResource", "tail" : "(): Resource[F, A]", "member" : "cats.effect.kernel.syntax.EffectResourceOps.toResource", "link" : "cats\/effect\/kernel\/syntax\/EffectResourceOps.html#toResource:cats.effect.kernel.Resource[F,A]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/EffectResourceOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/EffectResourceOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/EffectResourceOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/EffectResourceOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/EffectResourceOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/EffectResourceOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/EffectResourceOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/EffectResourceOps.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.GenConcurrentOps_", "shortDescription" : "", "members_class" : [{"label" : "memoize", "tail" : "(F: GenConcurrent[F, _]): F[F[A]]", "member" : "cats.effect.kernel.syntax.GenConcurrentOps_.memoize", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentOps_.html#memoize(implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[F[A]]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentOps_.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentOps_.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentOps_.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentOps_.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentOps_.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentOps_.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentOps_.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/GenConcurrentOps_.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.GenConcurrentSyntax", "trait" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "concurrentParSequenceOps", "tail" : "(wrapped: T[F[A]]): ConcurrentParSequenceNOps[T, F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParSequenceOps", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#concurrentParSequenceOps[T[_],F[_],A](wrapped:T[F[A]]):cats.effect.kernel.syntax.ConcurrentParSequenceNOps[T,F,A]", "kind" : "implicit def"}, {"label" : "concurrentParTraverseOps", "tail" : "(wrapped: T[A]): ConcurrentParTraverseNOps[T, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.concurrentParTraverseOps", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#concurrentParTraverseOps[T[_],A](wrapped:T[A]):cats.effect.kernel.syntax.ConcurrentParTraverseNOps[T,A]", "kind" : "implicit def"}, {"label" : "genConcurrentOps_", "tail" : "(wrapped: F[A]): GenConcurrentOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenConcurrentSyntax.genConcurrentOps_", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#genConcurrentOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenConcurrentOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenConcurrentSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.syntax.GenSpawnOps", "shortDescription" : "", "members_class" : [{"label" : "bothOutcome", "tail" : "(another: F[B])(F: GenSpawn[F, E]): F[(Outcome[F, E, A], Outcome[F, E, B])]", "member" : "cats.effect.kernel.syntax.GenSpawnOps.bothOutcome", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html#bothOutcome[B](another:F[B])(implicitF:cats.effect.kernel.GenSpawn[F,E]):F[(cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Outcome[F,E,B])]", "kind" : "def"}, {"label" : "raceOutcome", "tail" : "(another: F[B])(F: GenSpawn[F, E]): F[Either[Outcome[F, E, A], Outcome[F, E, B]]]", "member" : "cats.effect.kernel.syntax.GenSpawnOps.raceOutcome", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html#raceOutcome[B](another:F[B])(implicitF:cats.effect.kernel.GenSpawn[F,E]):F[Either[cats.effect.kernel.Outcome[F,E,A],cats.effect.kernel.Outcome[F,E,B]]]", "kind" : "def"}, {"label" : "background", "tail" : "(F: GenSpawn[F, E]): Resource[F, F[Outcome[F, E, A]]]", "member" : "cats.effect.kernel.syntax.GenSpawnOps.background", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html#background(implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.Resource[F,F[cats.effect.kernel.Outcome[F,E,A]]]", "kind" : "def"}, {"label" : "start", "tail" : "(F: GenSpawn[F, E]): F[Fiber[F, E, A]]", "member" : "cats.effect.kernel.syntax.GenSpawnOps.start", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html#start(implicitF:cats.effect.kernel.GenSpawn[F,E]):F[cats.effect.kernel.Fiber[F,E,A]]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/GenSpawnOps.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.GenSpawnOps_", "shortDescription" : "", "members_class" : [{"label" : "both", "tail" : "(another: F[B])(F: GenSpawn[F, _]): F[(A, B)]", "member" : "cats.effect.kernel.syntax.GenSpawnOps_.both", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps_.html#both[B](another:F[B])(implicitF:cats.effect.kernel.GenSpawn[F,_]):F[(A,B)]", "kind" : "def"}, {"label" : "race", "tail" : "(another: F[B])(F: GenSpawn[F, _]): F[Either[A, B]]", "member" : "cats.effect.kernel.syntax.GenSpawnOps_.race", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps_.html#race[B](another:F[B])(implicitF:cats.effect.kernel.GenSpawn[F,_]):F[Either[A,B]]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps_.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps_.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps_.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps_.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps_.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps_.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnOps_.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/GenSpawnOps_.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.GenSpawnSyntax", "trait" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "genSpawnOps", "tail" : "(wrapped: F[A])(F: GenSpawn[F, E]): GenSpawnOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#genSpawnOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.syntax.GenSpawnOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genSpawnOps_", "tail" : "(wrapped: F[A]): GenSpawnOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps_", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#genSpawnOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenSpawnOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenSpawnSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.syntax.GenTemporalOps", "shortDescription" : "", "members_class" : [{"label" : "timeout", "tail" : "(duration: FiniteDuration)(F: GenTemporal[F, E], timeoutToE: <:<[TimeoutException, E]): F[A]", "member" : "cats.effect.kernel.syntax.GenTemporalOps.timeout", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps.html#timeout(duration:scala.concurrent.duration.FiniteDuration)(implicitF:cats.effect.kernel.GenTemporal[F,E],implicittimeoutToE:java.util.concurrent.TimeoutException<:<E):F[A]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/GenTemporalOps.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.GenTemporalOps_", "shortDescription" : "", "members_class" : [{"label" : "andWait", "tail" : "(time: FiniteDuration)(F: GenTemporal[F, _]): F[A]", "member" : "cats.effect.kernel.syntax.GenTemporalOps_.andWait", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps_.html#andWait(time:scala.concurrent.duration.FiniteDuration)(implicitF:cats.effect.kernel.GenTemporal[F,_]):F[A]", "kind" : "def"}, {"label" : "delayBy", "tail" : "(time: FiniteDuration)(F: GenTemporal[F, _]): F[A]", "member" : "cats.effect.kernel.syntax.GenTemporalOps_.delayBy", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps_.html#delayBy(time:scala.concurrent.duration.FiniteDuration)(implicitF:cats.effect.kernel.GenTemporal[F,_]):F[A]", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(duration: FiniteDuration, fallback: F[A])(F: GenTemporal[F, _]): F[A]", "member" : "cats.effect.kernel.syntax.GenTemporalOps_.timeoutTo", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps_.html#timeoutTo(duration:scala.concurrent.duration.FiniteDuration,fallback:F[A])(implicitF:cats.effect.kernel.GenTemporal[F,_]):F[A]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps_.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps_.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps_.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps_.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps_.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps_.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalOps_.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/GenTemporalOps_.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.GenTemporalSyntax", "trait" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "genTemporalOps", "tail" : "(wrapped: F[A])(F: GenTemporal[F, E]): GenTemporalOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#genTemporalOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.syntax.GenTemporalOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genTemporalOps_", "tail" : "(wrapped: F[A]): GenTemporalOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps_", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#genTemporalOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenTemporalOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/GenTemporalSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.syntax.monadCancel", "shortDescription" : "", "object" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html", "members_object" : [{"label" : "monadCancelOps", "tail" : "(wrapped: F[A])(F: MonadCancel[F, E]): MonadCancelOps[F, A, E]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#monadCancelOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.syntax.MonadCancelOps[F,A,E]", "kind" : "implicit def"}, {"label" : "monadCancelOps_", "tail" : "(wrapped: F[A]): MonadCancelOps_[F, A]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps_", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#monadCancelOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.MonadCancelOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$monadCancel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.syntax.MonadCancelOps", "shortDescription" : "", "members_class" : [{"label" : "bracketCase", "tail" : "(use: (A) => F[B])(release: (A, Outcome[F, E, B]) => F[Unit])(F: MonadCancel[F, E]): F[B]", "member" : "cats.effect.kernel.syntax.MonadCancelOps.bracketCase", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps.html#bracketCase[B](use:A=>F[B])(release:(A,cats.effect.kernel.Outcome[F,E,B])=>F[Unit])(implicitF:cats.effect.kernel.MonadCancel[F,E]):F[B]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fin: (Outcome[F, E, A]) => F[Unit])(F: MonadCancel[F, E]): F[A]", "member" : "cats.effect.kernel.syntax.MonadCancelOps.guaranteeCase", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps.html#guaranteeCase(fin:cats.effect.kernel.Outcome[F,E,A]=>F[Unit])(implicitF:cats.effect.kernel.MonadCancel[F,E]):F[A]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/MonadCancelOps.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.MonadCancelOps_", "shortDescription" : "", "members_class" : [{"label" : "bracket", "tail" : "(use: (A) => F[B])(release: (A) => F[Unit])(F: MonadCancel[F, _]): F[B]", "member" : "cats.effect.kernel.syntax.MonadCancelOps_.bracket", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#bracket[B](use:A=>F[B])(release:A=>F[Unit])(implicitF:cats.effect.kernel.MonadCancel[F,_]):F[B]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fin: F[Unit])(F: MonadCancel[F, _]): F[A]", "member" : "cats.effect.kernel.syntax.MonadCancelOps_.guarantee", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#guarantee(fin:F[Unit])(implicitF:cats.effect.kernel.MonadCancel[F,_]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fin: F[Unit])(F: MonadCancel[F, _]): F[A]", "member" : "cats.effect.kernel.syntax.MonadCancelOps_.onCancel", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#onCancel(fin:F[Unit])(implicitF:cats.effect.kernel.MonadCancel[F,_]):F[A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(F: MonadCancel[F, _]): F[A]", "member" : "cats.effect.kernel.syntax.MonadCancelOps_.uncancelable", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#uncancelable(implicitF:cats.effect.kernel.MonadCancel[F,_]):F[A]", "kind" : "def"}, {"label" : "!>", "tail" : "(fb: F[B])(F: MonadCancel[F, _]): F[B]", "member" : "cats.effect.kernel.syntax.MonadCancelOps_.!>", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#!>[B](fb:F[B])(implicitF:cats.effect.kernel.MonadCancel[F,_]):F[B]", "kind" : "def"}, {"label" : "forceR", "tail" : "(fb: F[B])(F: MonadCancel[F, _]): F[B]", "member" : "cats.effect.kernel.syntax.MonadCancelOps_.forceR", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#forceR[B](fb:F[B])(implicitF:cats.effect.kernel.MonadCancel[F,_]):F[B]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/kernel\/syntax\/MonadCancelOps_.html", "kind" : "class"}, {"name" : "cats.effect.kernel.syntax.MonadCancelSyntax", "trait" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "monadCancelOps", "tail" : "(wrapped: F[A])(F: MonadCancel[F, E]): MonadCancelOps[F, A, E]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#monadCancelOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.MonadCancel[F,E]):cats.effect.kernel.syntax.MonadCancelOps[F,A,E]", "kind" : "implicit def"}, {"label" : "monadCancelOps_", "tail" : "(wrapped: F[A]): MonadCancelOps_[F, A]", "member" : "cats.effect.kernel.syntax.MonadCancelSyntax.monadCancelOps_", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#monadCancelOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.MonadCancelOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/MonadCancelSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.syntax.resource", "shortDescription" : "", "object" : "cats\/effect\/kernel\/syntax\/package$$resource$.html", "members_object" : [{"label" : "effectResourceOps", "tail" : "(wrapped: F[A]): EffectResourceOps[F, A]", "member" : "cats.effect.kernel.syntax.ResourceSyntax.effectResourceOps", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#effectResourceOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.EffectResourceOps[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$resource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.syntax.ResourceSyntax", "trait" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "effectResourceOps", "tail" : "(wrapped: F[A]): EffectResourceOps[F, A]", "member" : "cats.effect.kernel.syntax.ResourceSyntax.effectResourceOps", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#effectResourceOps[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.EffectResourceOps[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/ResourceSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.kernel.syntax.spawn", "shortDescription" : "", "object" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html", "members_object" : [{"label" : "genSpawnOps", "tail" : "(wrapped: F[A])(F: GenSpawn[F, E]): GenSpawnOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#genSpawnOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenSpawn[F,E]):cats.effect.kernel.syntax.GenSpawnOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genSpawnOps_", "tail" : "(wrapped: F[A]): GenSpawnOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenSpawnSyntax.genSpawnOps_", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#genSpawnOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenSpawnOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$spawn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cats.effect.kernel.syntax.temporal", "shortDescription" : "", "object" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html", "members_object" : [{"label" : "genTemporalOps", "tail" : "(wrapped: F[A])(F: GenTemporal[F, E]): GenTemporalOps[F, A, E]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#genTemporalOps[F[_],A,E](wrapped:F[A])(implicitF:cats.effect.kernel.GenTemporal[F,E]):cats.effect.kernel.syntax.GenTemporalOps[F,A,E]", "kind" : "implicit def"}, {"label" : "genTemporalOps_", "tail" : "(wrapped: F[A]): GenTemporalOps_[F, A]", "member" : "cats.effect.kernel.syntax.GenTemporalSyntax.genTemporalOps_", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#genTemporalOps_[F[_],A](wrapped:F[A]):cats.effect.kernel.syntax.GenTemporalOps_[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/kernel\/syntax\/package$$temporal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "cats.effect.laws" : [{"name" : "cats.effect.laws.AsyncLaws", "object" : "cats\/effect\/laws\/AsyncLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.Async[F]): AsyncLaws[F]", "member" : "cats.effect.laws.AsyncLaws.apply", "link" : "cats\/effect\/laws\/AsyncLaws$.html#apply[F[_]](implicitF0:cats.effect.kernel.Async[F]):cats.effect.laws.AsyncLaws[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/AsyncLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/AsyncLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/AsyncLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/AsyncLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/AsyncLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/AsyncLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/AsyncLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/AsyncLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/AsyncLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/AsyncLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/AsyncLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/AsyncLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/AsyncLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/AsyncLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/AsyncLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/AsyncLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/AsyncLaws.html", "kind" : "trait", "members_trait" : [{"label" : "evalOnNeverIdentity", "tail" : "(ec: ExecutionContext): IsEq[F[Unit]]", "member" : "cats.effect.laws.AsyncLaws.evalOnNeverIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#evalOnNeverIdentity(ec:scala.concurrent.ExecutionContext):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "evalOnCanceledIdentity", "tail" : "(ec: ExecutionContext): IsEq[F[Unit]]", "member" : "cats.effect.laws.AsyncLaws.evalOnCanceledIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#evalOnCanceledIdentity(ec:scala.concurrent.ExecutionContext):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "evalOnRaiseErrorIdentity", "tail" : "(e: Throwable, ec: ExecutionContext): IsEq[F[Unit]]", "member" : "cats.effect.laws.AsyncLaws.evalOnRaiseErrorIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#evalOnRaiseErrorIdentity(e:Throwable,ec:scala.concurrent.ExecutionContext):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "evalOnPureIdentity", "tail" : "(a: A, ec: ExecutionContext): IsEq[F[A]]", "member" : "cats.effect.laws.AsyncLaws.evalOnPureIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#evalOnPureIdentity[A](a:A,ec:scala.concurrent.ExecutionContext):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "evalOnLocalPure", "tail" : "(ec: ExecutionContext): IsEq[F[ExecutionContext]]", "member" : "cats.effect.laws.AsyncLaws.evalOnLocalPure", "link" : "cats\/effect\/laws\/AsyncLaws.html#evalOnLocalPure(ec:scala.concurrent.ExecutionContext):cats.effect.laws.IsEq[F[scala.concurrent.ExecutionContext]]", "kind" : "def"}, {"label" : "executionContextCommutativity", "tail" : "(fa: F[A]): IsEq[F[ExecutionContext]]", "member" : "cats.effect.laws.AsyncLaws.executionContextCommutativity", "link" : "cats\/effect\/laws\/AsyncLaws.html#executionContextCommutativity[A](fa:F[A]):cats.effect.laws.IsEq[F[scala.concurrent.ExecutionContext]]", "kind" : "def"}, {"label" : "neverIsDerivedFromAsync", "tail" : "(): IsEq[F[A]]", "member" : "cats.effect.laws.AsyncLaws.neverIsDerivedFromAsync", "link" : "cats\/effect\/laws\/AsyncLaws.html#neverIsDerivedFromAsync[A]:cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "asyncCancelTokenIsUnsequencedOnError", "tail" : "(e: Throwable, fu: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.AsyncLaws.asyncCancelTokenIsUnsequencedOnError", "link" : "cats\/effect\/laws\/AsyncLaws.html#asyncCancelTokenIsUnsequencedOnError[A](e:Throwable,fu:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "asyncCancelTokenIsUnsequencedOnCompletion", "tail" : "(a: A, fu: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.AsyncLaws.asyncCancelTokenIsUnsequencedOnCompletion", "link" : "cats\/effect\/laws\/AsyncLaws.html#asyncCancelTokenIsUnsequencedOnCompletion[A](a:A,fu:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "asyncRepeatedCallbackIgnored", "tail" : "(a: A): IsEq[F[A]]", "member" : "cats.effect.laws.AsyncLaws.asyncRepeatedCallbackIgnored", "link" : "cats\/effect\/laws\/AsyncLaws.html#asyncRepeatedCallbackIgnored[A](a:A):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "asyncLeftIsUncancelableSequencedRaiseError", "tail" : "(e: Throwable, fu: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.AsyncLaws.asyncLeftIsUncancelableSequencedRaiseError", "link" : "cats\/effect\/laws\/AsyncLaws.html#asyncLeftIsUncancelableSequencedRaiseError[A](e:Throwable,fu:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "asyncRightIsUncancelableSequencedPure", "tail" : "(a: A, fu: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.AsyncLaws.asyncRightIsUncancelableSequencedPure", "link" : "cats\/effect\/laws\/AsyncLaws.html#asyncRightIsUncancelableSequencedPure[A](a:A,fu:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "repeatedSuspendNotMemoized", "tail" : "(a: A, f: (A) => A, hint: Type): IsEq[F[A]]", "member" : "cats.effect.laws.SyncLaws.repeatedSuspendNotMemoized", "link" : "cats\/effect\/laws\/AsyncLaws.html#repeatedSuspendNotMemoized[A](a:A,f:A=>A,hint:cats.effect.kernel.Sync.Type):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "unsequencedSuspendIsNoop", "tail" : "(a: A, f: (A) => A, hint: Type): IsEq[F[A]]", "member" : "cats.effect.laws.SyncLaws.unsequencedSuspendIsNoop", "link" : "cats\/effect\/laws\/AsyncLaws.html#unsequencedSuspendIsNoop[A](a:A,f:A=>A,hint:cats.effect.kernel.Sync.Type):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "suspendThrowIsRaiseError", "tail" : "(e: Throwable, hint: Type): IsEq[F[A]]", "member" : "cats.effect.laws.SyncLaws.suspendThrowIsRaiseError", "link" : "cats\/effect\/laws\/AsyncLaws.html#suspendThrowIsRaiseError[A](e:Throwable,hint:cats.effect.kernel.Sync.Type):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "suspendValueIsPure", "tail" : "(a: A, hint: Type): IsEq[F[A]]", "member" : "cats.effect.laws.SyncLaws.suspendValueIsPure", "link" : "cats\/effect\/laws\/AsyncLaws.html#suspendValueIsPure[A](a:A,hint:cats.effect.kernel.Sync.Type):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "startSleepMaximum", "tail" : "(d1: FiniteDuration, d2: FiniteDuration): IsEq[F[FiniteDuration]]", "member" : "cats.effect.laws.GenTemporalLaws.startSleepMaximum", "link" : "cats\/effect\/laws\/AsyncLaws.html#startSleepMaximum(d1:scala.concurrent.duration.FiniteDuration,d2:scala.concurrent.duration.FiniteDuration):cats.effect.laws.IsEq[F[scala.concurrent.duration.FiniteDuration]]", "kind" : "def"}, {"label" : "sleepRaceMinimum", "tail" : "(d1: FiniteDuration, d2: FiniteDuration): IsEq[F[FiniteDuration]]", "member" : "cats.effect.laws.GenTemporalLaws.sleepRaceMinimum", "link" : "cats\/effect\/laws\/AsyncLaws.html#sleepRaceMinimum(d1:scala.concurrent.duration.FiniteDuration,d2:scala.concurrent.duration.FiniteDuration):cats.effect.laws.IsEq[F[scala.concurrent.duration.FiniteDuration]]", "kind" : "def"}, {"label" : "monotonicSleepSumIdentity", "tail" : "(delta: FiniteDuration): IsEq[F[FiniteDuration]]", "member" : "cats.effect.laws.GenTemporalLaws.monotonicSleepSumIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#monotonicSleepSumIdentity(delta:scala.concurrent.duration.FiniteDuration):cats.effect.laws.IsEq[F[scala.concurrent.duration.FiniteDuration]]", "kind" : "def"}, {"label" : "monotonicity", "tail" : "(): F[Boolean]", "member" : "cats.effect.laws.ClockLaws.monotonicity", "link" : "cats\/effect\/laws\/AsyncLaws.html#monotonicity:F[Boolean]", "kind" : "def"}, {"label" : "forceRNeverIsNever", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.GenSpawnLaws.forceRNeverIsNever", "link" : "cats\/effect\/laws\/AsyncLaws.html#forceRNeverIsNever[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableStartIsCancelable", "tail" : "(): IsEq[F[kernel.Outcome[F, Throwable, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.uncancelableStartIsCancelable", "link" : "cats\/effect\/laws\/AsyncLaws.html#uncancelableStartIsCancelable:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "uncancelableCancelCancels", "tail" : "(): IsEq[F[kernel.Outcome[F, Throwable, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.uncancelableCancelCancels", "link" : "cats\/effect\/laws\/AsyncLaws.html#uncancelableCancelCancels:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "uncancelableRaceNotInherited", "tail" : "(): IsEq[F[Unit]]", "member" : "cats.effect.laws.GenSpawnLaws.uncancelableRaceNotInherited", "link" : "cats\/effect\/laws\/AsyncLaws.html#uncancelableRaceNotInherited:cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "neverDominatesOverFlatMap", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.GenSpawnLaws.neverDominatesOverFlatMap", "link" : "cats\/effect\/laws\/AsyncLaws.html#neverDominatesOverFlatMap[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "fiberStartOfNeverIsUnit", "tail" : "(): IsEq[F[Unit]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberStartOfNeverIsUnit", "link" : "cats\/effect\/laws\/AsyncLaws.html#fiberStartOfNeverIsUnit:cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "fiberNeverIsNever", "tail" : "(): IsEq[F[kernel.Outcome[F, Throwable, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberNeverIsNever", "link" : "cats\/effect\/laws\/AsyncLaws.html#fiberNeverIsNever:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberCanceledIsOutcomeCanceled", "tail" : "(): IsEq[F[kernel.Outcome[F, Throwable, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberCanceledIsOutcomeCanceled", "link" : "cats\/effect\/laws\/AsyncLaws.html#fiberCanceledIsOutcomeCanceled:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberCancelationIsOutcomeCanceled", "tail" : "(): IsEq[F[kernel.Outcome[F, Throwable, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberCancelationIsOutcomeCanceled", "link" : "cats\/effect\/laws\/AsyncLaws.html#fiberCancelationIsOutcomeCanceled:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberErrorIsOutcomeErrored", "tail" : "(e: Throwable): IsEq[F[kernel.Outcome[F, Throwable, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberErrorIsOutcomeErrored", "link" : "cats\/effect\/laws\/AsyncLaws.html#fiberErrorIsOutcomeErrored(e:E):cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberPureIsOutcomeCompletedPure", "tail" : "(a: A): IsEq[F[kernel.Outcome[F, Throwable, A]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberPureIsOutcomeCompletedPure", "link" : "cats\/effect\/laws\/AsyncLaws.html#fiberPureIsOutcomeCompletedPure[A](a:A):cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,A]]]", "kind" : "def"}, {"label" : "raceNeverNoncanceledIdentityRight", "tail" : "(fa: F[A]): IsEq[F[Either[A, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceNeverNoncanceledIdentityRight", "link" : "cats\/effect\/laws\/AsyncLaws.html#raceNeverNoncanceledIdentityRight[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[A,Unit]]]", "kind" : "def"}, {"label" : "raceNeverNoncanceledIdentityLeft", "tail" : "(fa: F[A]): IsEq[F[Either[Unit, A]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceNeverNoncanceledIdentityLeft", "link" : "cats\/effect\/laws\/AsyncLaws.html#raceNeverNoncanceledIdentityLeft[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[Unit,A]]]", "kind" : "def"}, {"label" : "raceCanceledIdentityRight", "tail" : "(fa: F[A]): IsEq[F[Either[A, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceCanceledIdentityRight", "link" : "cats\/effect\/laws\/AsyncLaws.html#raceCanceledIdentityRight[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[A,Unit]]]", "kind" : "def"}, {"label" : "raceCanceledIdentityLeft", "tail" : "(fa: F[A]): IsEq[F[Either[Unit, A]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceCanceledIdentityLeft", "link" : "cats\/effect\/laws\/AsyncLaws.html#raceCanceledIdentityLeft[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[Unit,A]]]", "kind" : "def"}, {"label" : "raceDerivesFromRacePairRight", "tail" : "(fb: F[B]): IsEq[F[Either[A, B]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceDerivesFromRacePairRight", "link" : "cats\/effect\/laws\/AsyncLaws.html#raceDerivesFromRacePairRight[A,B](fb:F[B]):cats.effect.laws.IsEq[F[Either[A,B]]]", "kind" : "def"}, {"label" : "raceDerivesFromRacePairLeft", "tail" : "(fa: F[A]): IsEq[F[Either[A, B]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceDerivesFromRacePairLeft", "link" : "cats\/effect\/laws\/AsyncLaws.html#raceDerivesFromRacePairLeft[A,B](fa:F[A]):cats.effect.laws.IsEq[F[Either[A,B]]]", "kind" : "def"}, {"label" : "uniqueness", "tail" : "(): F[Boolean]", "member" : "cats.effect.laws.UniqueLaws.uniqueness", "link" : "cats\/effect\/laws\/AsyncLaws.html#uniqueness:F[Boolean]", "kind" : "def"}, {"label" : "canceledUnitIdentity", "tail" : "(): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledUnitIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#canceledUnitIdentity:cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableIdentity", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#uncancelableIdentity[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "canceledAssociatesLeftOverFlatMap", "tail" : "(fa: F[A]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledAssociatesLeftOverFlatMap", "link" : "cats\/effect\/laws\/AsyncLaws.html#canceledAssociatesLeftOverFlatMap[A](fa:F[A]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableCanceledAssociatesRightOverFlatMapAttempt", "tail" : "(fa: F[A]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableCanceledAssociatesRightOverFlatMapAttempt", "link" : "cats\/effect\/laws\/AsyncLaws.html#uncancelableCanceledAssociatesRightOverFlatMapAttempt[A](fa:F[A]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "canceledSequencesOnCancelInOrder", "tail" : "(fin1: F[Unit], fin2: F[Unit]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledSequencesOnCancelInOrder", "link" : "cats\/effect\/laws\/AsyncLaws.html#canceledSequencesOnCancelInOrder(fin1:F[Unit],fin2:F[Unit]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableFinalizers", "tail" : "(fin: F[Unit]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableFinalizers", "link" : "cats\/effect\/laws\/AsyncLaws.html#uncancelableFinalizers[A](fin:F[Unit]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "forceRCanceledShortCircuits", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRCanceledShortCircuits", "link" : "cats\/effect\/laws\/AsyncLaws.html#forceRCanceledShortCircuits[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "forceRDiscardsError", "tail" : "(e: Throwable, fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRDiscardsError", "link" : "cats\/effect\/laws\/AsyncLaws.html#forceRDiscardsError[A](e:E,fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "forceRDiscardsPure", "tail" : "(a: A, fa: F[B]): IsEq[F[B]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRDiscardsPure", "link" : "cats\/effect\/laws\/AsyncLaws.html#forceRDiscardsPure[A,B](a:A,fa:F[B]):cats.effect.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "onCancelAssociatesOverUncancelableBoundary", "tail" : "(fa: F[A], fin: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.onCancelAssociatesOverUncancelableBoundary", "link" : "cats\/effect\/laws\/AsyncLaws.html#onCancelAssociatesOverUncancelableBoundary[A](fa:F[A],fin:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableEliminatesOnCancel", "tail" : "(fa: F[A], fin: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableEliminatesOnCancel", "link" : "cats\/effect\/laws\/AsyncLaws.html#uncancelableEliminatesOnCancel[A](fa:F[A],fin:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelablePollInverseNestIsUncancelable", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelablePollInverseNestIsUncancelable", "link" : "cats\/effect\/laws\/AsyncLaws.html#uncancelablePollInverseNestIsUncancelable[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableIgnoredPollEliminatesNesting", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableIgnoredPollEliminatesNesting", "link" : "cats\/effect\/laws\/AsyncLaws.html#uncancelableIgnoredPollEliminatesNesting[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelablePollIsIdentity", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelablePollIsIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#uncancelablePollIsIdentity[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "adaptErrorRaise", "tail" : "(e: Throwable, f: (Throwable) => Throwable): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.adaptErrorRaise", "link" : "cats\/effect\/laws\/AsyncLaws.html#adaptErrorRaise[A](e:E,f:E=>E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "adaptErrorPure", "tail" : "(a: A, f: (Throwable) => Throwable): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.adaptErrorPure", "link" : "cats\/effect\/laws\/AsyncLaws.html#adaptErrorPure[A](a:A,f:E=>E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "redeemWithDerivedFromAttemptFlatMap", "tail" : "(fa: F[A], fe: (Throwable) => F[B], fs: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadErrorLaws.redeemWithDerivedFromAttemptFlatMap", "link" : "cats\/effect\/laws\/AsyncLaws.html#redeemWithDerivedFromAttemptFlatMap[A,B](fa:F[A],fe:E=>F[B],fs:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "rethrowAttempt", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.rethrowAttempt", "link" : "cats\/effect\/laws\/AsyncLaws.html#rethrowAttempt[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorEnsureOrConsistency", "tail" : "(fa: F[A], e: (A) => Throwable, p: (A) => Boolean): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.monadErrorEnsureOrConsistency", "link" : "cats\/effect\/laws\/AsyncLaws.html#monadErrorEnsureOrConsistency[A](fa:F[A],e:A=>E,p:A=>Boolean):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorEnsureConsistency", "tail" : "(fa: F[A], e: Throwable, p: (A) => Boolean): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.monadErrorEnsureConsistency", "link" : "cats\/effect\/laws\/AsyncLaws.html#monadErrorEnsureConsistency[A](fa:F[A],e:E,p:A=>Boolean):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorLeftZero", "tail" : "(e: Throwable, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadErrorLaws.monadErrorLeftZero", "link" : "cats\/effect\/laws\/AsyncLaws.html#monadErrorLeftZero[A,B](e:E,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "tailRecMStackSafety", "tail" : ": laws.IsEq[F[Int]]", "member" : "cats.laws.MonadLaws.tailRecMStackSafety", "link" : "cats\/effect\/laws\/AsyncLaws.html#tailRecMStackSafety:cats.laws.IsEq[F[Int]]", "kind" : "lazy val"}, {"label" : "mapFlatMapCoherence", "tail" : "(fa: F[A], f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.mapFlatMapCoherence", "link" : "cats\/effect\/laws\/AsyncLaws.html#mapFlatMapCoherence[A,B](fa:F[A],f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "kleisliRightIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.kleisliRightIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#kleisliRightIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "kleisliLeftIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.kleisliLeftIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#kleisliLeftIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "monadRightIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.MonadLaws.monadRightIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#monadRightIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadLeftIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.monadLeftIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#monadLeftIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "flatMapFromTailRecMConsistency", "tail" : "(fa: F[A], fn: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.FlatMapLaws.flatMapFromTailRecMConsistency", "link" : "cats\/effect\/laws\/AsyncLaws.html#flatMapFromTailRecMConsistency[A,B](fa:F[A],fn:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "tailRecMConsistentFlatMap", "tail" : "(a: A, f: (A) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.FlatMapLaws.tailRecMConsistentFlatMap", "link" : "cats\/effect\/laws\/AsyncLaws.html#tailRecMConsistentFlatMap[A](a:A,f:A=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "mproductConsistency", "tail" : "(fa: F[A], fb: (A) => F[B]): laws.IsEq[F[(A, B)]]", "member" : "cats.laws.FlatMapLaws.mproductConsistency", "link" : "cats\/effect\/laws\/AsyncLaws.html#mproductConsistency[A,B](fa:F[A],fb:A=>F[B]):cats.laws.IsEq[F[(A,B)]]", "kind" : "def"}, {"label" : "kleisliAssociativity", "tail" : "(f: (A) => F[B], g: (B) => F[C], h: (C) => F[D], a: A): laws.IsEq[F[D]]", "member" : "cats.laws.FlatMapLaws.kleisliAssociativity", "link" : "cats\/effect\/laws\/AsyncLaws.html#kleisliAssociativity[A,B,C,D](f:A=>F[B],g:B=>F[C],h:C=>F[D],a:A):cats.laws.IsEq[F[D]]", "kind" : "def"}, {"label" : "flatMapConsistentApply", "tail" : "(fa: F[A], fab: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.FlatMapLaws.flatMapConsistentApply", "link" : "cats\/effect\/laws\/AsyncLaws.html#flatMapConsistentApply[A,B](fa:F[A],fab:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "flatMapAssociativity", "tail" : "(fa: F[A], f: (A) => F[B], g: (B) => F[C]): laws.IsEq[F[C]]", "member" : "cats.laws.FlatMapLaws.flatMapAssociativity", "link" : "cats\/effect\/laws\/AsyncLaws.html#flatMapAssociativity[A,B,C](fa:F[A],f:A=>F[B],g:B=>F[C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "raiseErrorDistributesOverApRight", "tail" : "(h: (Throwable) => F[A], e: Throwable): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorDistributesOverApRight", "link" : "cats\/effect\/laws\/AsyncLaws.html#raiseErrorDistributesOverApRight[A](h:E=>F[A],e:E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "raiseErrorDistributesOverApLeft", "tail" : "(h: (Throwable) => F[A], e: Throwable): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorDistributesOverApLeft", "link" : "cats\/effect\/laws\/AsyncLaws.html#raiseErrorDistributesOverApLeft[A](h:E=>F[A],e:E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "redeemDerivedFromAttemptMap", "tail" : "(fa: F[A], fe: (Throwable) => B, fs: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeErrorLaws.redeemDerivedFromAttemptMap", "link" : "cats\/effect\/laws\/AsyncLaws.html#redeemDerivedFromAttemptMap[A,B](fa:F[A],fe:E=>B,fs:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "onErrorRaise", "tail" : "(fa: F[A], e: Throwable, fb: F[Unit]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.onErrorRaise", "link" : "cats\/effect\/laws\/AsyncLaws.html#onErrorRaise[A](fa:F[A],e:E,fb:F[Unit]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "onErrorPure", "tail" : "(a: A, f: (Throwable) => F[Unit]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.onErrorPure", "link" : "cats\/effect\/laws\/AsyncLaws.html#onErrorPure[A](a:A,f:E=>F[Unit]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "attemptFromEitherConsistentWithPure", "tail" : "(eab: Either[Throwable, A]): laws.IsEq[F[Either[Throwable, A]]]", "member" : "cats.laws.ApplicativeErrorLaws.attemptFromEitherConsistentWithPure", "link" : "cats\/effect\/laws\/AsyncLaws.html#attemptFromEitherConsistentWithPure[A](eab:Either[E,A]):cats.laws.IsEq[F[Either[E,A]]]", "kind" : "def"}, {"label" : "attemptConsistentWithAttemptT", "tail" : "(fa: F[A]): laws.IsEq[EitherT[F, Throwable, A]]", "member" : "cats.laws.ApplicativeErrorLaws.attemptConsistentWithAttemptT", "link" : "cats\/effect\/laws\/AsyncLaws.html#attemptConsistentWithAttemptT[A](fa:F[A]):cats.laws.IsEq[cats.data.EitherT[F,E,A]]", "kind" : "def"}, {"label" : "recoverConsistentWithRecoverWith", "tail" : "(fa: F[A], pf: PartialFunction[Throwable, A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.recoverConsistentWithRecoverWith", "link" : "cats\/effect\/laws\/AsyncLaws.html#recoverConsistentWithRecoverWith[A](fa:F[A],pf:PartialFunction[E,A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorConsistentWithRecover", "tail" : "(fa: F[A], f: (Throwable) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorConsistentWithRecover", "link" : "cats\/effect\/laws\/AsyncLaws.html#handleErrorConsistentWithRecover[A](fa:F[A],f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorWithConsistentWithRecoverWith", "tail" : "(fa: F[A], f: (Throwable) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorWithConsistentWithRecoverWith", "link" : "cats\/effect\/laws\/AsyncLaws.html#handleErrorWithConsistentWithRecoverWith[A](fa:F[A],f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "pureAttempt", "tail" : "(a: A): laws.IsEq[F[Either[Throwable, A]]]", "member" : "cats.laws.ApplicativeErrorLaws.pureAttempt", "link" : "cats\/effect\/laws\/AsyncLaws.html#pureAttempt[A](a:A):cats.laws.IsEq[F[Either[E,A]]]", "kind" : "def"}, {"label" : "raiseErrorAttempt", "tail" : "(e: Throwable): laws.IsEq[F[Either[Throwable, Unit]]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorAttempt", "link" : "cats\/effect\/laws\/AsyncLaws.html#raiseErrorAttempt(e:E):cats.laws.IsEq[F[Either[E,Unit]]]", "kind" : "def"}, {"label" : "handleErrorPure", "tail" : "(a: A, f: (Throwable) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorPure", "link" : "cats\/effect\/laws\/AsyncLaws.html#handleErrorPure[A](a:A,f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorWithPure", "tail" : "(a: A, f: (Throwable) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorWithPure", "link" : "cats\/effect\/laws\/AsyncLaws.html#handleErrorWithPure[A](a:A,f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "applicativeErrorHandle", "tail" : "(e: Throwable, f: (Throwable) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.applicativeErrorHandle", "link" : "cats\/effect\/laws\/AsyncLaws.html#applicativeErrorHandle[A](e:E,f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "applicativeErrorHandleWith", "tail" : "(e: Throwable, f: (Throwable) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.applicativeErrorHandleWith", "link" : "cats\/effect\/laws\/AsyncLaws.html#applicativeErrorHandleWith[A](e:E,f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monoidalRightIdentity", "tail" : "(fa: F[A]): (F[(A, Unit)], F[A])", "member" : "cats.laws.ApplicativeLaws.monoidalRightIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#monoidalRightIdentity[A](fa:F[A]):(F[(A,Unit)],F[A])", "kind" : "def"}, {"label" : "monoidalLeftIdentity", "tail" : "(fa: F[A]): (F[(Unit, A)], F[A])", "member" : "cats.laws.ApplicativeLaws.monoidalLeftIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#monoidalLeftIdentity[A](fa:F[A]):(F[(Unit,A)],F[A])", "kind" : "def"}, {"label" : "applicativeUnit", "tail" : "(a: A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeLaws.applicativeUnit", "link" : "cats\/effect\/laws\/AsyncLaws.html#applicativeUnit[A](a:A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "apProductConsistent", "tail" : "(fa: F[A], f: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.apProductConsistent", "link" : "cats\/effect\/laws\/AsyncLaws.html#apProductConsistent[A,B](fa:F[A],f:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeComposition", "tail" : "(fa: F[A], fab: F[(A) => B], fbc: F[(B) => C]): laws.IsEq[F[C]]", "member" : "cats.laws.ApplicativeLaws.applicativeComposition", "link" : "cats\/effect\/laws\/AsyncLaws.html#applicativeComposition[A,B,C](fa:F[A],fab:F[A=>B],fbc:F[B=>C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "applicativeMap", "tail" : "(fa: F[A], f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeMap", "link" : "cats\/effect\/laws\/AsyncLaws.html#applicativeMap[A,B](fa:F[A],f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeInterchange", "tail" : "(a: A, ff: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeInterchange", "link" : "cats\/effect\/laws\/AsyncLaws.html#applicativeInterchange[A,B](a:A,ff:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeHomomorphism", "tail" : "(a: A, f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeHomomorphism", "link" : "cats\/effect\/laws\/AsyncLaws.html#applicativeHomomorphism[A,B](a:A,f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeLaws.applicativeIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#applicativeIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "productLConsistency", "tail" : "(fa: F[A], fb: F[B]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplyLaws.productLConsistency", "link" : "cats\/effect\/laws\/AsyncLaws.html#productLConsistency[A,B](fa:F[A],fb:F[B]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "productRConsistency", "tail" : "(fa: F[A], fb: F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplyLaws.productRConsistency", "link" : "cats\/effect\/laws\/AsyncLaws.html#productRConsistency[A,B](fa:F[A],fb:F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "map2EvalConsistency", "tail" : "(fa: F[A], fb: F[B], f: (A, B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.map2EvalConsistency", "link" : "cats\/effect\/laws\/AsyncLaws.html#map2EvalConsistency[A,B,C](fa:F[A],fb:F[B],f:(A,B)=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "map2ProductConsistency", "tail" : "(fa: F[A], fb: F[B], f: (A, B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.map2ProductConsistency", "link" : "cats\/effect\/laws\/AsyncLaws.html#map2ProductConsistency[A,B,C](fa:F[A],fb:F[B],f:(A,B)=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "applyComposition", "tail" : "(fa: F[A], fab: F[(A) => B], fbc: F[(B) => C]): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.applyComposition", "link" : "cats\/effect\/laws\/AsyncLaws.html#applyComposition[A,B,C](fa:F[A],fab:F[A=>B],fbc:F[B=>C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "semigroupalAssociativity", "tail" : "(fa: F[A], fb: F[B], fc: F[C]): (F[(A, (B, C))], F[((A, B), C)])", "member" : "cats.laws.SemigroupalLaws.semigroupalAssociativity", "link" : "cats\/effect\/laws\/AsyncLaws.html#semigroupalAssociativity[A,B,C](fa:F[A],fb:F[B],fc:F[C]):(F[(A,(B,C))],F[((A,B),C)])", "kind" : "def"}, {"label" : "covariantComposition", "tail" : "(fa: F[A], f: (A) => B, g: (B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.FunctorLaws.covariantComposition", "link" : "cats\/effect\/laws\/AsyncLaws.html#covariantComposition[A,B,C](fa:F[A],f:A=>B,g:B=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "covariantIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.FunctorLaws.covariantIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#covariantIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "invariantComposition", "tail" : "(fa: F[A], f1: (A) => B, f2: (B) => A, g1: (B) => C, g2: (C) => B): laws.IsEq[F[C]]", "member" : "cats.laws.InvariantLaws.invariantComposition", "link" : "cats\/effect\/laws\/AsyncLaws.html#invariantComposition[A,B,C](fa:F[A],f1:A=>B,f2:B=>A,g1:B=>C,g2:C=>B):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "invariantIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.InvariantLaws.invariantIdentity", "link" : "cats\/effect\/laws\/AsyncLaws.html#invariantIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/AsyncLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/AsyncLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/AsyncLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/AsyncLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/AsyncLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/AsyncLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/AsyncLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/AsyncLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/AsyncLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/AsyncLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/AsyncLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/AsyncLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/AsyncLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/AsyncLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/AsyncLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/AsyncLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": kernel.Async[F]", "member" : "cats.effect.laws.AsyncLaws.F", "link" : "cats\/effect\/laws\/AsyncLaws.html#F:cats.effect.kernel.Async[F]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.AsyncTests", "object" : "cats\/effect\/laws\/AsyncTests$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.Async[F]): AsyncTests[F]", "member" : "cats.effect.laws.AsyncTests.apply", "link" : "cats\/effect\/laws\/AsyncTests$.html#apply[F[_]](implicitF0:cats.effect.kernel.Async[F]):cats.effect.laws.AsyncTests[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/AsyncTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/AsyncTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/AsyncTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/AsyncTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/AsyncTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/AsyncTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/AsyncTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/AsyncTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/AsyncTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/AsyncTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/AsyncTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/AsyncTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/AsyncTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/AsyncTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/AsyncTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/AsyncTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/AsyncTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cats\/effect\/laws\/AsyncTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cats\/effect\/laws\/AsyncTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cats\/effect\/laws\/AsyncTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cats\/effect\/laws\/AsyncTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "async", "tail" : "(tolerance: FiniteDuration)(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[Throwable], ArbST: Arbitrary[Type], ArbFiniteDuration: Arbitrary[FiniteDuration], ArbExecutionContext: Arbitrary[ExecutionContext], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[Throwable], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[Throwable], EqFEC: Eq[F[ExecutionContext]], EqFAB: Eq[F[Either[A, B]]], EqFEitherEU: Eq[F[Either[Throwable, Unit]]], EqFEitherEA: Eq[F[Either[Throwable, A]]], EqFEitherUA: Eq[F[Either[Unit, A]]], EqFEitherAU: Eq[F[Either[A, Unit]]], EqFOutcomeEA: Eq[F[kernel.Outcome[F, Throwable, A]]], EqFOutcomeEU: Eq[F[kernel.Outcome[F, Throwable, Unit]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], OrdFFD: Order[F[FiniteDuration]], GroupFD: Group[FiniteDuration], exec: (F[Boolean]) => Prop, iso: Isomorphisms[F], faPP: (F[A]) => Pretty, fuPP: (F[Unit]) => Pretty, ePP: (Throwable) => Pretty, foaPP: (F[kernel.Outcome[F, Throwable, A]]) => Pretty, feauPP: (F[Either[A, Unit]]) => Pretty, feuaPP: (F[Either[Unit, A]]) => Pretty, fouPP: (F[kernel.Outcome[F, Throwable, Unit]]) => Pretty): RuleSet", "member" : "cats.effect.laws.AsyncTests.async", "link" : "cats\/effect\/laws\/AsyncTests.html#async[A,B,C](tolerance:scala.concurrent.duration.FiniteDuration)(implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[Throwable],implicitArbST:org.scalacheck.Arbitrary[cats.effect.kernel.Sync.Type],implicitArbFiniteDuration:org.scalacheck.Arbitrary[scala.concurrent.duration.FiniteDuration],implicitArbExecutionContext:org.scalacheck.Arbitrary[scala.concurrent.ExecutionContext],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[Throwable],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[Throwable],implicitEqFEC:cats.Eq[F[scala.concurrent.ExecutionContext]],implicitEqFAB:cats.Eq[F[Either[A,B]]],implicitEqFEitherEU:cats.Eq[F[Either[Throwable,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[Throwable,A]]],implicitEqFEitherUA:cats.Eq[F[Either[Unit,A]]],implicitEqFEitherAU:cats.Eq[F[Either[A,Unit]]],implicitEqFOutcomeEA:cats.Eq[F[cats.effect.kernel.Outcome[F,Throwable,A]]],implicitEqFOutcomeEU:cats.Eq[F[cats.effect.kernel.Outcome[F,Throwable,Unit]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitOrdFFD:cats.Order[F[scala.concurrent.duration.FiniteDuration]],implicitGroupFD:cats.Group[scala.concurrent.duration.FiniteDuration],implicitexec:F[Boolean]=>org.scalacheck.Prop,implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitfaPP:F[A]=>org.scalacheck.util.Pretty,implicitfuPP:F[Unit]=>org.scalacheck.util.Pretty,implicitePP:Throwable=>org.scalacheck.util.Pretty,implicitfoaPP:F[cats.effect.kernel.Outcome[F,Throwable,A]]=>org.scalacheck.util.Pretty,implicitfeauPP:F[Either[A,Unit]]=>org.scalacheck.util.Pretty,implicitfeuaPP:F[Either[Unit,A]]=>org.scalacheck.util.Pretty,implicitfouPP:F[cats.effect.kernel.Outcome[F,Throwable,Unit]]=>org.scalacheck.util.Pretty):AsyncTests.this.RuleSet", "kind" : "def"}, {"label" : "sync", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[Throwable], ArbST: Arbitrary[Type], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[Throwable], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[Throwable], EqFEitherEU: Eq[F[Either[Throwable, Unit]]], EqFEitherEA: Eq[F[Either[Throwable, A]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], exec: (F[Boolean]) => Prop, iso: Isomorphisms[F]): RuleSet", "member" : "cats.effect.laws.SyncTests.sync", "link" : "cats\/effect\/laws\/AsyncTests.html#sync[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[Throwable],implicitArbST:org.scalacheck.Arbitrary[cats.effect.kernel.Sync.Type],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[Throwable],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[Throwable],implicitEqFEitherEU:cats.Eq[F[Either[Throwable,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[Throwable,A]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitexec:F[Boolean]=>org.scalacheck.Prop,implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):SyncTests.this.RuleSet", "kind" : "def"}, {"label" : "temporal", "tail" : "(tolerance: FiniteDuration)(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[Throwable], ArbFiniteDuration: Arbitrary[FiniteDuration], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[Throwable], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[Throwable], EqFAB: Eq[F[Either[A, B]]], EqFEitherEU: Eq[F[Either[Throwable, Unit]]], EqFEitherEA: Eq[F[Either[Throwable, A]]], EqFEitherUA: Eq[F[Either[Unit, A]]], EqFEitherAU: Eq[F[Either[A, Unit]]], EqFOutcomeEA: Eq[F[kernel.Outcome[F, Throwable, A]]], EqFOutcomeEU: Eq[F[kernel.Outcome[F, Throwable, Unit]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], OrdFFD: Order[F[FiniteDuration]], GroupFD: Group[FiniteDuration], exec: (F[Boolean]) => Prop, iso: Isomorphisms[F], faPP: (F[A]) => Pretty, fuPP: (F[Unit]) => Pretty, ePP: (Throwable) => Pretty, foaPP: (F[kernel.Outcome[F, Throwable, A]]) => Pretty, feauPP: (F[Either[A, Unit]]) => Pretty, feuaPP: (F[Either[Unit, A]]) => Pretty, fouPP: (F[kernel.Outcome[F, Throwable, Unit]]) => Pretty): RuleSet", "member" : "cats.effect.laws.GenTemporalTests.temporal", "link" : "cats\/effect\/laws\/AsyncTests.html#temporal[A,B,C](tolerance:scala.concurrent.duration.FiniteDuration)(implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitArbFiniteDuration:org.scalacheck.Arbitrary[scala.concurrent.duration.FiniteDuration],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[E],implicitEqFAB:cats.Eq[F[Either[A,B]]],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqFEitherUA:cats.Eq[F[Either[Unit,A]]],implicitEqFEitherAU:cats.Eq[F[Either[A,Unit]]],implicitEqFOutcomeEA:cats.Eq[F[cats.effect.kernel.Outcome[F,E,A]]],implicitEqFOutcomeEU:cats.Eq[F[cats.effect.kernel.Outcome[F,E,Unit]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitOrdFFD:cats.Order[F[scala.concurrent.duration.FiniteDuration]],implicitGroupFD:cats.Group[scala.concurrent.duration.FiniteDuration],implicitexec:F[Boolean]=>org.scalacheck.Prop,implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitfaPP:F[A]=>org.scalacheck.util.Pretty,implicitfuPP:F[Unit]=>org.scalacheck.util.Pretty,implicitePP:E=>org.scalacheck.util.Pretty,implicitfoaPP:F[cats.effect.kernel.Outcome[F,E,A]]=>org.scalacheck.util.Pretty,implicitfeauPP:F[Either[A,Unit]]=>org.scalacheck.util.Pretty,implicitfeuaPP:F[Either[Unit,A]]=>org.scalacheck.util.Pretty,implicitfouPP:F[cats.effect.kernel.Outcome[F,E,Unit]]=>org.scalacheck.util.Pretty):GenTemporalTests.this.RuleSet", "kind" : "def"}, {"label" : "clock", "tail" : "(exec: (F[Boolean]) => Prop): RuleSet", "member" : "cats.effect.laws.ClockTests.clock", "link" : "cats\/effect\/laws\/AsyncTests.html#clock(implicitexec:F[Boolean]=>org.scalacheck.Prop):ClockTests.this.RuleSet", "kind" : "def"}, {"label" : "spawn", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[Throwable], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[Throwable], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[Throwable], EqFAB: Eq[F[Either[A, B]]], EqFEitherEU: Eq[F[Either[Throwable, Unit]]], EqFEitherEA: Eq[F[Either[Throwable, A]]], EqFEitherUA: Eq[F[Either[Unit, A]]], EqFEitherAU: Eq[F[Either[A, Unit]]], EqFOutcomeEA: Eq[F[kernel.Outcome[F, Throwable, A]]], EqFOutcomeEU: Eq[F[kernel.Outcome[F, Throwable, Unit]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F], faPP: (F[A]) => Pretty, fuPP: (F[Unit]) => Pretty, ePP: (Throwable) => Pretty, foaPP: (F[kernel.Outcome[F, Throwable, A]]) => Pretty, feauPP: (F[Either[A, Unit]]) => Pretty, feuaPP: (F[Either[Unit, A]]) => Pretty, fouPP: (F[kernel.Outcome[F, Throwable, Unit]]) => Pretty): RuleSet", "member" : "cats.effect.laws.GenSpawnTests.spawn", "link" : "cats\/effect\/laws\/AsyncTests.html#spawn[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[E],implicitEqFAB:cats.Eq[F[Either[A,B]]],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqFEitherUA:cats.Eq[F[Either[Unit,A]]],implicitEqFEitherAU:cats.Eq[F[Either[A,Unit]]],implicitEqFOutcomeEA:cats.Eq[F[cats.effect.kernel.Outcome[F,E,A]]],implicitEqFOutcomeEU:cats.Eq[F[cats.effect.kernel.Outcome[F,E,Unit]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitfaPP:F[A]=>org.scalacheck.util.Pretty,implicitfuPP:F[Unit]=>org.scalacheck.util.Pretty,implicitePP:E=>org.scalacheck.util.Pretty,implicitfoaPP:F[cats.effect.kernel.Outcome[F,E,A]]=>org.scalacheck.util.Pretty,implicitfeauPP:F[Either[A,Unit]]=>org.scalacheck.util.Pretty,implicitfeuaPP:F[Either[Unit,A]]=>org.scalacheck.util.Pretty,implicitfouPP:F[cats.effect.kernel.Outcome[F,E,Unit]]=>org.scalacheck.util.Pretty):GenSpawnTests.this.RuleSet", "kind" : "def"}, {"label" : "unique", "tail" : "(exec: (F[Boolean]) => Prop): RuleSet", "member" : "cats.effect.laws.UniqueTests.unique", "link" : "cats\/effect\/laws\/AsyncTests.html#unique(implicitexec:F[Boolean]=>org.scalacheck.Prop):UniqueTests.this.RuleSet", "kind" : "def"}, {"label" : "monadCancel", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[Throwable], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[Throwable], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[Throwable], EqFEitherEU: Eq[F[Either[Throwable, Unit]]], EqFEitherEA: Eq[F[Either[Throwable, A]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F], faPP: (F[A]) => Pretty, fuPP: (F[Unit]) => Pretty, ePP: (Throwable) => Pretty): RuleSet", "member" : "cats.effect.laws.MonadCancelTests.monadCancel", "link" : "cats\/effect\/laws\/AsyncTests.html#monadCancel[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitfaPP:F[A]=>org.scalacheck.util.Pretty,implicitfuPP:F[Unit]=>org.scalacheck.util.Pretty,implicitePP:E=>org.scalacheck.util.Pretty):MonadCancelTests.this.RuleSet", "kind" : "def"}, {"label" : "monadError", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[Throwable], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[Throwable], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqE: Eq[Throwable], EqFEitherEU: Eq[F[Either[Throwable, Unit]]], EqFEitherEA: Eq[F[Either[Throwable, A]]], EqEitherTFEA: Eq[EitherT[F, Throwable, A]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadErrorTests.monadError", "link" : "cats\/effect\/laws\/AsyncTests.html#monadError[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqEitherTFEA:cats.Eq[cats.data.EitherT[F,E,A]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadErrorTests.this.RuleSet", "kind" : "def"}, {"label" : "stackUnsafeMonad", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadTests.stackUnsafeMonad", "link" : "cats\/effect\/laws\/AsyncTests.html#stackUnsafeMonad[A,B,C](implicitevidence$7:org.scalacheck.Arbitrary[A],implicitevidence$8:cats.Eq[A],implicitevidence$9:org.scalacheck.Arbitrary[B],implicitevidence$10:cats.Eq[B],implicitevidence$11:org.scalacheck.Arbitrary[C],implicitevidence$12:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadTests.this.RuleSet", "kind" : "def"}, {"label" : "monad", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadTests.monad", "link" : "cats\/effect\/laws\/AsyncTests.html#monad[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadTests.this.RuleSet", "kind" : "def"}, {"label" : "flatMap", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.FlatMapTests.flatMap", "link" : "cats\/effect\/laws\/AsyncTests.html#flatMap[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):FlatMapTests.this.RuleSet", "kind" : "def"}, {"label" : "applicativeError", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[Throwable], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[Throwable], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqE: Eq[Throwable], EqFEitherEU: Eq[F[Either[Throwable, Unit]]], EqFEitherEA: Eq[F[Either[Throwable, A]]], EqEitherTFEA: Eq[EitherT[F, Throwable, A]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplicativeErrorTests.applicativeError", "link" : "cats\/effect\/laws\/AsyncTests.html#applicativeError[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqEitherTFEA:cats.Eq[cats.data.EitherT[F,E,A]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplicativeErrorTests.this.RuleSet", "kind" : "def"}, {"label" : "applicative", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplicativeTests.applicative", "link" : "cats\/effect\/laws\/AsyncTests.html#applicative[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplicativeTests.this.RuleSet", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplyTests.apply", "link" : "cats\/effect\/laws\/AsyncTests.html#apply[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplyTests.this.RuleSet", "kind" : "def"}, {"label" : "semigroupal", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], iso: Isomorphisms[F], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], EqFA: Eq[F[A]], EqFABC: Eq[F[(A, B, C)]]): RuleSet", "member" : "cats.laws.discipline.SemigroupalTests.semigroupal", "link" : "cats\/effect\/laws\/AsyncTests.html#semigroupal[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitEqFA:cats.Eq[F[A]],implicitEqFABC:cats.Eq[F[(A,B,C)]]):SemigroupalTests.this.RuleSet", "kind" : "def"}, {"label" : "functor", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]]): RuleSet", "member" : "cats.laws.discipline.FunctorTests.functor", "link" : "cats\/effect\/laws\/AsyncTests.html#functor[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]]):FunctorTests.this.RuleSet", "kind" : "def"}, {"label" : "invariant", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]]): RuleSet", "member" : "cats.laws.discipline.InvariantTests.invariant", "link" : "cats\/effect\/laws\/AsyncTests.html#invariant[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]]):InvariantTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cats\/effect\/laws\/AsyncTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/AsyncTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/AsyncTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/AsyncTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/AsyncTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/AsyncTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/AsyncTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/AsyncTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/AsyncTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/AsyncTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/AsyncTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/AsyncTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/AsyncTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/AsyncTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/AsyncTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/AsyncTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/AsyncTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/AsyncTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : ": AsyncLaws[F]", "member" : "cats.effect.laws.AsyncTests.laws", "link" : "cats\/effect\/laws\/AsyncTests.html#laws:cats.effect.laws.AsyncLaws[F]", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.ClockLaws", "object" : "cats\/effect\/laws\/ClockLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.Clock[F]): ClockLaws[F]", "member" : "cats.effect.laws.ClockLaws.apply", "link" : "cats\/effect\/laws\/ClockLaws$.html#apply[F[_]](implicitF0:cats.effect.kernel.Clock[F]):cats.effect.laws.ClockLaws[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/ClockLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/ClockLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/ClockLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/ClockLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/ClockLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/ClockLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/ClockLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/ClockLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/ClockLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/ClockLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/ClockLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/ClockLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/ClockLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/ClockLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/ClockLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/ClockLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/ClockLaws.html", "kind" : "trait", "members_trait" : [{"label" : "monotonicity", "tail" : "(): F[Boolean]", "member" : "cats.effect.laws.ClockLaws.monotonicity", "link" : "cats\/effect\/laws\/ClockLaws.html#monotonicity:F[Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/ClockLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/ClockLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/ClockLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/ClockLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/ClockLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/ClockLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/ClockLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/ClockLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/ClockLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/ClockLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/ClockLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/ClockLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/ClockLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/ClockLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/ClockLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/ClockLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": kernel.Clock[F]", "member" : "cats.effect.laws.ClockLaws.F", "link" : "cats\/effect\/laws\/ClockLaws.html#F:cats.effect.kernel.Clock[F]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.ClockTests", "object" : "cats\/effect\/laws\/ClockTests$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.Clock[F]): ClockTests[F]", "member" : "cats.effect.laws.ClockTests.apply", "link" : "cats\/effect\/laws\/ClockTests$.html#apply[F[_]](implicitF0:cats.effect.kernel.Clock[F]):cats.effect.laws.ClockTests[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/ClockTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/ClockTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/ClockTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/ClockTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/ClockTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/ClockTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/ClockTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/ClockTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/ClockTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/ClockTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/ClockTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/ClockTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/ClockTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/ClockTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/ClockTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/ClockTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/ClockTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cats\/effect\/laws\/ClockTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cats\/effect\/laws\/ClockTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cats\/effect\/laws\/ClockTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cats\/effect\/laws\/ClockTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "clock", "tail" : "(exec: (F[Boolean]) => Prop): RuleSet", "member" : "cats.effect.laws.ClockTests.clock", "link" : "cats\/effect\/laws\/ClockTests.html#clock(implicitexec:F[Boolean]=>org.scalacheck.Prop):ClockTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cats\/effect\/laws\/ClockTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/ClockTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/ClockTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/ClockTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/ClockTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/ClockTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/ClockTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/ClockTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/ClockTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/ClockTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/ClockTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/ClockTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/ClockTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/ClockTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/ClockTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/ClockTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/ClockTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/ClockTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : ": ClockLaws[F]", "member" : "cats.effect.laws.ClockTests.laws", "link" : "cats\/effect\/laws\/ClockTests.html#laws:cats.effect.laws.ClockLaws[F]", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.GenSpawnLaws", "object" : "cats\/effect\/laws\/GenSpawnLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.GenSpawn[F, E]): GenSpawnLaws[F, E]", "member" : "cats.effect.laws.GenSpawnLaws.apply", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#apply[F[_],E](implicitF0:cats.effect.kernel.GenSpawn[F,E]):cats.effect.laws.GenSpawnLaws[F,E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/GenSpawnLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/GenSpawnLaws.html", "kind" : "trait", "members_trait" : [{"label" : "forceRNeverIsNever", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.GenSpawnLaws.forceRNeverIsNever", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#forceRNeverIsNever[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableStartIsCancelable", "tail" : "(): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.uncancelableStartIsCancelable", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#uncancelableStartIsCancelable:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "uncancelableCancelCancels", "tail" : "(): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.uncancelableCancelCancels", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#uncancelableCancelCancels:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "uncancelableRaceNotInherited", "tail" : "(): IsEq[F[Unit]]", "member" : "cats.effect.laws.GenSpawnLaws.uncancelableRaceNotInherited", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#uncancelableRaceNotInherited:cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "neverDominatesOverFlatMap", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.GenSpawnLaws.neverDominatesOverFlatMap", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#neverDominatesOverFlatMap[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "fiberStartOfNeverIsUnit", "tail" : "(): IsEq[F[Unit]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberStartOfNeverIsUnit", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#fiberStartOfNeverIsUnit:cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "fiberNeverIsNever", "tail" : "(): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberNeverIsNever", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#fiberNeverIsNever:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberCanceledIsOutcomeCanceled", "tail" : "(): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberCanceledIsOutcomeCanceled", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#fiberCanceledIsOutcomeCanceled:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberCancelationIsOutcomeCanceled", "tail" : "(): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberCancelationIsOutcomeCanceled", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#fiberCancelationIsOutcomeCanceled:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberErrorIsOutcomeErrored", "tail" : "(e: E): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberErrorIsOutcomeErrored", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#fiberErrorIsOutcomeErrored(e:E):cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberPureIsOutcomeCompletedPure", "tail" : "(a: A): IsEq[F[kernel.Outcome[F, E, A]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberPureIsOutcomeCompletedPure", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#fiberPureIsOutcomeCompletedPure[A](a:A):cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,A]]]", "kind" : "def"}, {"label" : "raceNeverNoncanceledIdentityRight", "tail" : "(fa: F[A]): IsEq[F[Either[A, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceNeverNoncanceledIdentityRight", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#raceNeverNoncanceledIdentityRight[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[A,Unit]]]", "kind" : "def"}, {"label" : "raceNeverNoncanceledIdentityLeft", "tail" : "(fa: F[A]): IsEq[F[Either[Unit, A]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceNeverNoncanceledIdentityLeft", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#raceNeverNoncanceledIdentityLeft[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[Unit,A]]]", "kind" : "def"}, {"label" : "raceCanceledIdentityRight", "tail" : "(fa: F[A]): IsEq[F[Either[A, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceCanceledIdentityRight", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#raceCanceledIdentityRight[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[A,Unit]]]", "kind" : "def"}, {"label" : "raceCanceledIdentityLeft", "tail" : "(fa: F[A]): IsEq[F[Either[Unit, A]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceCanceledIdentityLeft", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#raceCanceledIdentityLeft[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[Unit,A]]]", "kind" : "def"}, {"label" : "raceDerivesFromRacePairRight", "tail" : "(fb: F[B]): IsEq[F[Either[A, B]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceDerivesFromRacePairRight", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#raceDerivesFromRacePairRight[A,B](fb:F[B]):cats.effect.laws.IsEq[F[Either[A,B]]]", "kind" : "def"}, {"label" : "raceDerivesFromRacePairLeft", "tail" : "(fa: F[A]): IsEq[F[Either[A, B]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceDerivesFromRacePairLeft", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#raceDerivesFromRacePairLeft[A,B](fa:F[A]):cats.effect.laws.IsEq[F[Either[A,B]]]", "kind" : "def"}, {"label" : "uniqueness", "tail" : "(): F[Boolean]", "member" : "cats.effect.laws.UniqueLaws.uniqueness", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#uniqueness:F[Boolean]", "kind" : "def"}, {"label" : "canceledUnitIdentity", "tail" : "(): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledUnitIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#canceledUnitIdentity:cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableIdentity", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#uncancelableIdentity[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "canceledAssociatesLeftOverFlatMap", "tail" : "(fa: F[A]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledAssociatesLeftOverFlatMap", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#canceledAssociatesLeftOverFlatMap[A](fa:F[A]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableCanceledAssociatesRightOverFlatMapAttempt", "tail" : "(fa: F[A]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableCanceledAssociatesRightOverFlatMapAttempt", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#uncancelableCanceledAssociatesRightOverFlatMapAttempt[A](fa:F[A]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "canceledSequencesOnCancelInOrder", "tail" : "(fin1: F[Unit], fin2: F[Unit]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledSequencesOnCancelInOrder", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#canceledSequencesOnCancelInOrder(fin1:F[Unit],fin2:F[Unit]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableFinalizers", "tail" : "(fin: F[Unit]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableFinalizers", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#uncancelableFinalizers[A](fin:F[Unit]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "forceRCanceledShortCircuits", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRCanceledShortCircuits", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#forceRCanceledShortCircuits[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "forceRDiscardsError", "tail" : "(e: E, fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRDiscardsError", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#forceRDiscardsError[A](e:E,fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "forceRDiscardsPure", "tail" : "(a: A, fa: F[B]): IsEq[F[B]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRDiscardsPure", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#forceRDiscardsPure[A,B](a:A,fa:F[B]):cats.effect.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "onCancelAssociatesOverUncancelableBoundary", "tail" : "(fa: F[A], fin: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.onCancelAssociatesOverUncancelableBoundary", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#onCancelAssociatesOverUncancelableBoundary[A](fa:F[A],fin:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableEliminatesOnCancel", "tail" : "(fa: F[A], fin: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableEliminatesOnCancel", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#uncancelableEliminatesOnCancel[A](fa:F[A],fin:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelablePollInverseNestIsUncancelable", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelablePollInverseNestIsUncancelable", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#uncancelablePollInverseNestIsUncancelable[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableIgnoredPollEliminatesNesting", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableIgnoredPollEliminatesNesting", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#uncancelableIgnoredPollEliminatesNesting[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelablePollIsIdentity", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelablePollIsIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#uncancelablePollIsIdentity[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "adaptErrorRaise", "tail" : "(e: E, f: (E) => E): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.adaptErrorRaise", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#adaptErrorRaise[A](e:E,f:E=>E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "adaptErrorPure", "tail" : "(a: A, f: (E) => E): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.adaptErrorPure", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#adaptErrorPure[A](a:A,f:E=>E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "redeemWithDerivedFromAttemptFlatMap", "tail" : "(fa: F[A], fe: (E) => F[B], fs: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadErrorLaws.redeemWithDerivedFromAttemptFlatMap", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#redeemWithDerivedFromAttemptFlatMap[A,B](fa:F[A],fe:E=>F[B],fs:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "rethrowAttempt", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.rethrowAttempt", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#rethrowAttempt[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorEnsureOrConsistency", "tail" : "(fa: F[A], e: (A) => E, p: (A) => Boolean): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.monadErrorEnsureOrConsistency", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#monadErrorEnsureOrConsistency[A](fa:F[A],e:A=>E,p:A=>Boolean):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorEnsureConsistency", "tail" : "(fa: F[A], e: E, p: (A) => Boolean): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.monadErrorEnsureConsistency", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#monadErrorEnsureConsistency[A](fa:F[A],e:E,p:A=>Boolean):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorLeftZero", "tail" : "(e: E, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadErrorLaws.monadErrorLeftZero", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#monadErrorLeftZero[A,B](e:E,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "tailRecMStackSafety", "tail" : ": laws.IsEq[F[Int]]", "member" : "cats.laws.MonadLaws.tailRecMStackSafety", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#tailRecMStackSafety:cats.laws.IsEq[F[Int]]", "kind" : "lazy val"}, {"label" : "mapFlatMapCoherence", "tail" : "(fa: F[A], f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.mapFlatMapCoherence", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#mapFlatMapCoherence[A,B](fa:F[A],f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "kleisliRightIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.kleisliRightIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#kleisliRightIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "kleisliLeftIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.kleisliLeftIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#kleisliLeftIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "monadRightIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.MonadLaws.monadRightIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#monadRightIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadLeftIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.monadLeftIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#monadLeftIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "flatMapFromTailRecMConsistency", "tail" : "(fa: F[A], fn: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.FlatMapLaws.flatMapFromTailRecMConsistency", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#flatMapFromTailRecMConsistency[A,B](fa:F[A],fn:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "tailRecMConsistentFlatMap", "tail" : "(a: A, f: (A) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.FlatMapLaws.tailRecMConsistentFlatMap", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#tailRecMConsistentFlatMap[A](a:A,f:A=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "mproductConsistency", "tail" : "(fa: F[A], fb: (A) => F[B]): laws.IsEq[F[(A, B)]]", "member" : "cats.laws.FlatMapLaws.mproductConsistency", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#mproductConsistency[A,B](fa:F[A],fb:A=>F[B]):cats.laws.IsEq[F[(A,B)]]", "kind" : "def"}, {"label" : "kleisliAssociativity", "tail" : "(f: (A) => F[B], g: (B) => F[C], h: (C) => F[D], a: A): laws.IsEq[F[D]]", "member" : "cats.laws.FlatMapLaws.kleisliAssociativity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#kleisliAssociativity[A,B,C,D](f:A=>F[B],g:B=>F[C],h:C=>F[D],a:A):cats.laws.IsEq[F[D]]", "kind" : "def"}, {"label" : "flatMapConsistentApply", "tail" : "(fa: F[A], fab: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.FlatMapLaws.flatMapConsistentApply", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#flatMapConsistentApply[A,B](fa:F[A],fab:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "flatMapAssociativity", "tail" : "(fa: F[A], f: (A) => F[B], g: (B) => F[C]): laws.IsEq[F[C]]", "member" : "cats.laws.FlatMapLaws.flatMapAssociativity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#flatMapAssociativity[A,B,C](fa:F[A],f:A=>F[B],g:B=>F[C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "raiseErrorDistributesOverApRight", "tail" : "(h: (E) => F[A], e: E): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorDistributesOverApRight", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#raiseErrorDistributesOverApRight[A](h:E=>F[A],e:E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "raiseErrorDistributesOverApLeft", "tail" : "(h: (E) => F[A], e: E): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorDistributesOverApLeft", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#raiseErrorDistributesOverApLeft[A](h:E=>F[A],e:E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "redeemDerivedFromAttemptMap", "tail" : "(fa: F[A], fe: (E) => B, fs: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeErrorLaws.redeemDerivedFromAttemptMap", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#redeemDerivedFromAttemptMap[A,B](fa:F[A],fe:E=>B,fs:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "onErrorRaise", "tail" : "(fa: F[A], e: E, fb: F[Unit]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.onErrorRaise", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#onErrorRaise[A](fa:F[A],e:E,fb:F[Unit]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "onErrorPure", "tail" : "(a: A, f: (E) => F[Unit]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.onErrorPure", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#onErrorPure[A](a:A,f:E=>F[Unit]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "attemptFromEitherConsistentWithPure", "tail" : "(eab: Either[E, A]): laws.IsEq[F[Either[E, A]]]", "member" : "cats.laws.ApplicativeErrorLaws.attemptFromEitherConsistentWithPure", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#attemptFromEitherConsistentWithPure[A](eab:Either[E,A]):cats.laws.IsEq[F[Either[E,A]]]", "kind" : "def"}, {"label" : "attemptConsistentWithAttemptT", "tail" : "(fa: F[A]): laws.IsEq[EitherT[F, E, A]]", "member" : "cats.laws.ApplicativeErrorLaws.attemptConsistentWithAttemptT", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#attemptConsistentWithAttemptT[A](fa:F[A]):cats.laws.IsEq[cats.data.EitherT[F,E,A]]", "kind" : "def"}, {"label" : "recoverConsistentWithRecoverWith", "tail" : "(fa: F[A], pf: PartialFunction[E, A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.recoverConsistentWithRecoverWith", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#recoverConsistentWithRecoverWith[A](fa:F[A],pf:PartialFunction[E,A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorConsistentWithRecover", "tail" : "(fa: F[A], f: (E) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorConsistentWithRecover", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#handleErrorConsistentWithRecover[A](fa:F[A],f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorWithConsistentWithRecoverWith", "tail" : "(fa: F[A], f: (E) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorWithConsistentWithRecoverWith", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#handleErrorWithConsistentWithRecoverWith[A](fa:F[A],f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "pureAttempt", "tail" : "(a: A): laws.IsEq[F[Either[E, A]]]", "member" : "cats.laws.ApplicativeErrorLaws.pureAttempt", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#pureAttempt[A](a:A):cats.laws.IsEq[F[Either[E,A]]]", "kind" : "def"}, {"label" : "raiseErrorAttempt", "tail" : "(e: E): laws.IsEq[F[Either[E, Unit]]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorAttempt", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#raiseErrorAttempt(e:E):cats.laws.IsEq[F[Either[E,Unit]]]", "kind" : "def"}, {"label" : "handleErrorPure", "tail" : "(a: A, f: (E) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorPure", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#handleErrorPure[A](a:A,f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorWithPure", "tail" : "(a: A, f: (E) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorWithPure", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#handleErrorWithPure[A](a:A,f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "applicativeErrorHandle", "tail" : "(e: E, f: (E) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.applicativeErrorHandle", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#applicativeErrorHandle[A](e:E,f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "applicativeErrorHandleWith", "tail" : "(e: E, f: (E) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.applicativeErrorHandleWith", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#applicativeErrorHandleWith[A](e:E,f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monoidalRightIdentity", "tail" : "(fa: F[A]): (F[(A, Unit)], F[A])", "member" : "cats.laws.ApplicativeLaws.monoidalRightIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#monoidalRightIdentity[A](fa:F[A]):(F[(A,Unit)],F[A])", "kind" : "def"}, {"label" : "monoidalLeftIdentity", "tail" : "(fa: F[A]): (F[(Unit, A)], F[A])", "member" : "cats.laws.ApplicativeLaws.monoidalLeftIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#monoidalLeftIdentity[A](fa:F[A]):(F[(Unit,A)],F[A])", "kind" : "def"}, {"label" : "applicativeUnit", "tail" : "(a: A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeLaws.applicativeUnit", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#applicativeUnit[A](a:A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "apProductConsistent", "tail" : "(fa: F[A], f: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.apProductConsistent", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#apProductConsistent[A,B](fa:F[A],f:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeComposition", "tail" : "(fa: F[A], fab: F[(A) => B], fbc: F[(B) => C]): laws.IsEq[F[C]]", "member" : "cats.laws.ApplicativeLaws.applicativeComposition", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#applicativeComposition[A,B,C](fa:F[A],fab:F[A=>B],fbc:F[B=>C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "applicativeMap", "tail" : "(fa: F[A], f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeMap", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#applicativeMap[A,B](fa:F[A],f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeInterchange", "tail" : "(a: A, ff: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeInterchange", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#applicativeInterchange[A,B](a:A,ff:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeHomomorphism", "tail" : "(a: A, f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeHomomorphism", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#applicativeHomomorphism[A,B](a:A,f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeLaws.applicativeIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#applicativeIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "productLConsistency", "tail" : "(fa: F[A], fb: F[B]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplyLaws.productLConsistency", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#productLConsistency[A,B](fa:F[A],fb:F[B]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "productRConsistency", "tail" : "(fa: F[A], fb: F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplyLaws.productRConsistency", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#productRConsistency[A,B](fa:F[A],fb:F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "map2EvalConsistency", "tail" : "(fa: F[A], fb: F[B], f: (A, B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.map2EvalConsistency", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#map2EvalConsistency[A,B,C](fa:F[A],fb:F[B],f:(A,B)=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "map2ProductConsistency", "tail" : "(fa: F[A], fb: F[B], f: (A, B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.map2ProductConsistency", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#map2ProductConsistency[A,B,C](fa:F[A],fb:F[B],f:(A,B)=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "applyComposition", "tail" : "(fa: F[A], fab: F[(A) => B], fbc: F[(B) => C]): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.applyComposition", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#applyComposition[A,B,C](fa:F[A],fab:F[A=>B],fbc:F[B=>C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "semigroupalAssociativity", "tail" : "(fa: F[A], fb: F[B], fc: F[C]): (F[(A, (B, C))], F[((A, B), C)])", "member" : "cats.laws.SemigroupalLaws.semigroupalAssociativity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#semigroupalAssociativity[A,B,C](fa:F[A],fb:F[B],fc:F[C]):(F[(A,(B,C))],F[((A,B),C)])", "kind" : "def"}, {"label" : "covariantComposition", "tail" : "(fa: F[A], f: (A) => B, g: (B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.FunctorLaws.covariantComposition", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#covariantComposition[A,B,C](fa:F[A],f:A=>B,g:B=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "covariantIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.FunctorLaws.covariantIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#covariantIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "invariantComposition", "tail" : "(fa: F[A], f1: (A) => B, f2: (B) => A, g1: (B) => C, g2: (C) => B): laws.IsEq[F[C]]", "member" : "cats.laws.InvariantLaws.invariantComposition", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#invariantComposition[A,B,C](fa:F[A],f1:A=>B,f2:B=>A,g1:B=>C,g2:C=>B):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "invariantIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.InvariantLaws.invariantIdentity", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#invariantIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/GenSpawnLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": kernel.GenSpawn[F, E]", "member" : "cats.effect.laws.GenSpawnLaws.F", "link" : "cats\/effect\/laws\/GenSpawnLaws.html#F:cats.effect.kernel.GenSpawn[F,E]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.GenSpawnTests", "object" : "cats\/effect\/laws\/GenSpawnTests$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.GenSpawn[F, E]): GenSpawnTests[F, E]", "member" : "cats.effect.laws.GenSpawnTests.apply", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#apply[F[_],E](implicitF0:cats.effect.kernel.GenSpawn[F,E]):cats.effect.laws.GenSpawnTests[F,E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/GenSpawnTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/GenSpawnTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/GenSpawnTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cats\/effect\/laws\/GenSpawnTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cats\/effect\/laws\/GenSpawnTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cats\/effect\/laws\/GenSpawnTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cats\/effect\/laws\/GenSpawnTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "spawn", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[E], EqFAB: Eq[F[Either[A, B]]], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqFEitherUA: Eq[F[Either[Unit, A]]], EqFEitherAU: Eq[F[Either[A, Unit]]], EqFOutcomeEA: Eq[F[kernel.Outcome[F, E, A]]], EqFOutcomeEU: Eq[F[kernel.Outcome[F, E, Unit]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F], faPP: (F[A]) => Pretty, fuPP: (F[Unit]) => Pretty, ePP: (E) => Pretty, foaPP: (F[kernel.Outcome[F, E, A]]) => Pretty, feauPP: (F[Either[A, Unit]]) => Pretty, feuaPP: (F[Either[Unit, A]]) => Pretty, fouPP: (F[kernel.Outcome[F, E, Unit]]) => Pretty): RuleSet", "member" : "cats.effect.laws.GenSpawnTests.spawn", "link" : "cats\/effect\/laws\/GenSpawnTests.html#spawn[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[E],implicitEqFAB:cats.Eq[F[Either[A,B]]],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqFEitherUA:cats.Eq[F[Either[Unit,A]]],implicitEqFEitherAU:cats.Eq[F[Either[A,Unit]]],implicitEqFOutcomeEA:cats.Eq[F[cats.effect.kernel.Outcome[F,E,A]]],implicitEqFOutcomeEU:cats.Eq[F[cats.effect.kernel.Outcome[F,E,Unit]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitfaPP:F[A]=>org.scalacheck.util.Pretty,implicitfuPP:F[Unit]=>org.scalacheck.util.Pretty,implicitePP:E=>org.scalacheck.util.Pretty,implicitfoaPP:F[cats.effect.kernel.Outcome[F,E,A]]=>org.scalacheck.util.Pretty,implicitfeauPP:F[Either[A,Unit]]=>org.scalacheck.util.Pretty,implicitfeuaPP:F[Either[Unit,A]]=>org.scalacheck.util.Pretty,implicitfouPP:F[cats.effect.kernel.Outcome[F,E,Unit]]=>org.scalacheck.util.Pretty):GenSpawnTests.this.RuleSet", "kind" : "def"}, {"label" : "unique", "tail" : "(exec: (F[Boolean]) => Prop): RuleSet", "member" : "cats.effect.laws.UniqueTests.unique", "link" : "cats\/effect\/laws\/GenSpawnTests.html#unique(implicitexec:F[Boolean]=>org.scalacheck.Prop):UniqueTests.this.RuleSet", "kind" : "def"}, {"label" : "monadCancel", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[E], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F], faPP: (F[A]) => Pretty, fuPP: (F[Unit]) => Pretty, ePP: (E) => Pretty): RuleSet", "member" : "cats.effect.laws.MonadCancelTests.monadCancel", "link" : "cats\/effect\/laws\/GenSpawnTests.html#monadCancel[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitfaPP:F[A]=>org.scalacheck.util.Pretty,implicitfuPP:F[Unit]=>org.scalacheck.util.Pretty,implicitePP:E=>org.scalacheck.util.Pretty):MonadCancelTests.this.RuleSet", "kind" : "def"}, {"label" : "monadError", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqE: Eq[E], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqEitherTFEA: Eq[EitherT[F, E, A]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadErrorTests.monadError", "link" : "cats\/effect\/laws\/GenSpawnTests.html#monadError[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqEitherTFEA:cats.Eq[cats.data.EitherT[F,E,A]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadErrorTests.this.RuleSet", "kind" : "def"}, {"label" : "stackUnsafeMonad", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadTests.stackUnsafeMonad", "link" : "cats\/effect\/laws\/GenSpawnTests.html#stackUnsafeMonad[A,B,C](implicitevidence$7:org.scalacheck.Arbitrary[A],implicitevidence$8:cats.Eq[A],implicitevidence$9:org.scalacheck.Arbitrary[B],implicitevidence$10:cats.Eq[B],implicitevidence$11:org.scalacheck.Arbitrary[C],implicitevidence$12:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadTests.this.RuleSet", "kind" : "def"}, {"label" : "monad", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadTests.monad", "link" : "cats\/effect\/laws\/GenSpawnTests.html#monad[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadTests.this.RuleSet", "kind" : "def"}, {"label" : "flatMap", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.FlatMapTests.flatMap", "link" : "cats\/effect\/laws\/GenSpawnTests.html#flatMap[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):FlatMapTests.this.RuleSet", "kind" : "def"}, {"label" : "applicativeError", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqE: Eq[E], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqEitherTFEA: Eq[EitherT[F, E, A]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplicativeErrorTests.applicativeError", "link" : "cats\/effect\/laws\/GenSpawnTests.html#applicativeError[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqEitherTFEA:cats.Eq[cats.data.EitherT[F,E,A]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplicativeErrorTests.this.RuleSet", "kind" : "def"}, {"label" : "applicative", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplicativeTests.applicative", "link" : "cats\/effect\/laws\/GenSpawnTests.html#applicative[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplicativeTests.this.RuleSet", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplyTests.apply", "link" : "cats\/effect\/laws\/GenSpawnTests.html#apply[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplyTests.this.RuleSet", "kind" : "def"}, {"label" : "semigroupal", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], iso: Isomorphisms[F], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], EqFA: Eq[F[A]], EqFABC: Eq[F[(A, B, C)]]): RuleSet", "member" : "cats.laws.discipline.SemigroupalTests.semigroupal", "link" : "cats\/effect\/laws\/GenSpawnTests.html#semigroupal[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitEqFA:cats.Eq[F[A]],implicitEqFABC:cats.Eq[F[(A,B,C)]]):SemigroupalTests.this.RuleSet", "kind" : "def"}, {"label" : "functor", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]]): RuleSet", "member" : "cats.laws.discipline.FunctorTests.functor", "link" : "cats\/effect\/laws\/GenSpawnTests.html#functor[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]]):FunctorTests.this.RuleSet", "kind" : "def"}, {"label" : "invariant", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]]): RuleSet", "member" : "cats.laws.discipline.InvariantTests.invariant", "link" : "cats\/effect\/laws\/GenSpawnTests.html#invariant[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]]):InvariantTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cats\/effect\/laws\/GenSpawnTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/GenSpawnTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/GenSpawnTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/GenSpawnTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/GenSpawnTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/GenSpawnTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/GenSpawnTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/GenSpawnTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenSpawnTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/GenSpawnTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/GenSpawnTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/GenSpawnTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/GenSpawnTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/GenSpawnTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/GenSpawnTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/GenSpawnTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/GenSpawnTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/GenSpawnTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : ": GenSpawnLaws[F, E]", "member" : "cats.effect.laws.GenSpawnTests.laws", "link" : "cats\/effect\/laws\/GenSpawnTests.html#laws:cats.effect.laws.GenSpawnLaws[F,E]", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.GenTemporalLaws", "object" : "cats\/effect\/laws\/GenTemporalLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.GenTemporal[F, E]): GenTemporalLaws[F, E]", "member" : "cats.effect.laws.GenTemporalLaws.apply", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#apply[F[_],E](implicitF0:cats.effect.kernel.GenTemporal[F,E]):cats.effect.laws.GenTemporalLaws[F,E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/GenTemporalLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/GenTemporalLaws.html", "kind" : "trait", "members_trait" : [{"label" : "startSleepMaximum", "tail" : "(d1: FiniteDuration, d2: FiniteDuration): IsEq[F[FiniteDuration]]", "member" : "cats.effect.laws.GenTemporalLaws.startSleepMaximum", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#startSleepMaximum(d1:scala.concurrent.duration.FiniteDuration,d2:scala.concurrent.duration.FiniteDuration):cats.effect.laws.IsEq[F[scala.concurrent.duration.FiniteDuration]]", "kind" : "def"}, {"label" : "sleepRaceMinimum", "tail" : "(d1: FiniteDuration, d2: FiniteDuration): IsEq[F[FiniteDuration]]", "member" : "cats.effect.laws.GenTemporalLaws.sleepRaceMinimum", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#sleepRaceMinimum(d1:scala.concurrent.duration.FiniteDuration,d2:scala.concurrent.duration.FiniteDuration):cats.effect.laws.IsEq[F[scala.concurrent.duration.FiniteDuration]]", "kind" : "def"}, {"label" : "monotonicSleepSumIdentity", "tail" : "(delta: FiniteDuration): IsEq[F[FiniteDuration]]", "member" : "cats.effect.laws.GenTemporalLaws.monotonicSleepSumIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#monotonicSleepSumIdentity(delta:scala.concurrent.duration.FiniteDuration):cats.effect.laws.IsEq[F[scala.concurrent.duration.FiniteDuration]]", "kind" : "def"}, {"label" : "monotonicity", "tail" : "(): F[Boolean]", "member" : "cats.effect.laws.ClockLaws.monotonicity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#monotonicity:F[Boolean]", "kind" : "def"}, {"label" : "forceRNeverIsNever", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.GenSpawnLaws.forceRNeverIsNever", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#forceRNeverIsNever[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableStartIsCancelable", "tail" : "(): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.uncancelableStartIsCancelable", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#uncancelableStartIsCancelable:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "uncancelableCancelCancels", "tail" : "(): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.uncancelableCancelCancels", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#uncancelableCancelCancels:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "uncancelableRaceNotInherited", "tail" : "(): IsEq[F[Unit]]", "member" : "cats.effect.laws.GenSpawnLaws.uncancelableRaceNotInherited", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#uncancelableRaceNotInherited:cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "neverDominatesOverFlatMap", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.GenSpawnLaws.neverDominatesOverFlatMap", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#neverDominatesOverFlatMap[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "fiberStartOfNeverIsUnit", "tail" : "(): IsEq[F[Unit]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberStartOfNeverIsUnit", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#fiberStartOfNeverIsUnit:cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "fiberNeverIsNever", "tail" : "(): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberNeverIsNever", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#fiberNeverIsNever:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberCanceledIsOutcomeCanceled", "tail" : "(): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberCanceledIsOutcomeCanceled", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#fiberCanceledIsOutcomeCanceled:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberCancelationIsOutcomeCanceled", "tail" : "(): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberCancelationIsOutcomeCanceled", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#fiberCancelationIsOutcomeCanceled:cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberErrorIsOutcomeErrored", "tail" : "(e: E): IsEq[F[kernel.Outcome[F, E, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberErrorIsOutcomeErrored", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#fiberErrorIsOutcomeErrored(e:E):cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,Unit]]]", "kind" : "def"}, {"label" : "fiberPureIsOutcomeCompletedPure", "tail" : "(a: A): IsEq[F[kernel.Outcome[F, E, A]]]", "member" : "cats.effect.laws.GenSpawnLaws.fiberPureIsOutcomeCompletedPure", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#fiberPureIsOutcomeCompletedPure[A](a:A):cats.effect.laws.IsEq[F[cats.effect.kernel.Outcome[F,E,A]]]", "kind" : "def"}, {"label" : "raceNeverNoncanceledIdentityRight", "tail" : "(fa: F[A]): IsEq[F[Either[A, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceNeverNoncanceledIdentityRight", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#raceNeverNoncanceledIdentityRight[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[A,Unit]]]", "kind" : "def"}, {"label" : "raceNeverNoncanceledIdentityLeft", "tail" : "(fa: F[A]): IsEq[F[Either[Unit, A]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceNeverNoncanceledIdentityLeft", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#raceNeverNoncanceledIdentityLeft[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[Unit,A]]]", "kind" : "def"}, {"label" : "raceCanceledIdentityRight", "tail" : "(fa: F[A]): IsEq[F[Either[A, Unit]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceCanceledIdentityRight", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#raceCanceledIdentityRight[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[A,Unit]]]", "kind" : "def"}, {"label" : "raceCanceledIdentityLeft", "tail" : "(fa: F[A]): IsEq[F[Either[Unit, A]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceCanceledIdentityLeft", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#raceCanceledIdentityLeft[A](fa:F[A]):cats.effect.laws.IsEq[F[Either[Unit,A]]]", "kind" : "def"}, {"label" : "raceDerivesFromRacePairRight", "tail" : "(fb: F[B]): IsEq[F[Either[A, B]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceDerivesFromRacePairRight", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#raceDerivesFromRacePairRight[A,B](fb:F[B]):cats.effect.laws.IsEq[F[Either[A,B]]]", "kind" : "def"}, {"label" : "raceDerivesFromRacePairLeft", "tail" : "(fa: F[A]): IsEq[F[Either[A, B]]]", "member" : "cats.effect.laws.GenSpawnLaws.raceDerivesFromRacePairLeft", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#raceDerivesFromRacePairLeft[A,B](fa:F[A]):cats.effect.laws.IsEq[F[Either[A,B]]]", "kind" : "def"}, {"label" : "uniqueness", "tail" : "(): F[Boolean]", "member" : "cats.effect.laws.UniqueLaws.uniqueness", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#uniqueness:F[Boolean]", "kind" : "def"}, {"label" : "canceledUnitIdentity", "tail" : "(): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledUnitIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#canceledUnitIdentity:cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableIdentity", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#uncancelableIdentity[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "canceledAssociatesLeftOverFlatMap", "tail" : "(fa: F[A]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledAssociatesLeftOverFlatMap", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#canceledAssociatesLeftOverFlatMap[A](fa:F[A]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableCanceledAssociatesRightOverFlatMapAttempt", "tail" : "(fa: F[A]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableCanceledAssociatesRightOverFlatMapAttempt", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#uncancelableCanceledAssociatesRightOverFlatMapAttempt[A](fa:F[A]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "canceledSequencesOnCancelInOrder", "tail" : "(fin1: F[Unit], fin2: F[Unit]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledSequencesOnCancelInOrder", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#canceledSequencesOnCancelInOrder(fin1:F[Unit],fin2:F[Unit]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableFinalizers", "tail" : "(fin: F[Unit]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableFinalizers", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#uncancelableFinalizers[A](fin:F[Unit]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "forceRCanceledShortCircuits", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRCanceledShortCircuits", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#forceRCanceledShortCircuits[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "forceRDiscardsError", "tail" : "(e: E, fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRDiscardsError", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#forceRDiscardsError[A](e:E,fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "forceRDiscardsPure", "tail" : "(a: A, fa: F[B]): IsEq[F[B]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRDiscardsPure", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#forceRDiscardsPure[A,B](a:A,fa:F[B]):cats.effect.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "onCancelAssociatesOverUncancelableBoundary", "tail" : "(fa: F[A], fin: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.onCancelAssociatesOverUncancelableBoundary", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#onCancelAssociatesOverUncancelableBoundary[A](fa:F[A],fin:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableEliminatesOnCancel", "tail" : "(fa: F[A], fin: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableEliminatesOnCancel", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#uncancelableEliminatesOnCancel[A](fa:F[A],fin:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelablePollInverseNestIsUncancelable", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelablePollInverseNestIsUncancelable", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#uncancelablePollInverseNestIsUncancelable[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableIgnoredPollEliminatesNesting", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableIgnoredPollEliminatesNesting", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#uncancelableIgnoredPollEliminatesNesting[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelablePollIsIdentity", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelablePollIsIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#uncancelablePollIsIdentity[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "adaptErrorRaise", "tail" : "(e: E, f: (E) => E): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.adaptErrorRaise", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#adaptErrorRaise[A](e:E,f:E=>E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "adaptErrorPure", "tail" : "(a: A, f: (E) => E): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.adaptErrorPure", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#adaptErrorPure[A](a:A,f:E=>E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "redeemWithDerivedFromAttemptFlatMap", "tail" : "(fa: F[A], fe: (E) => F[B], fs: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadErrorLaws.redeemWithDerivedFromAttemptFlatMap", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#redeemWithDerivedFromAttemptFlatMap[A,B](fa:F[A],fe:E=>F[B],fs:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "rethrowAttempt", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.rethrowAttempt", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#rethrowAttempt[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorEnsureOrConsistency", "tail" : "(fa: F[A], e: (A) => E, p: (A) => Boolean): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.monadErrorEnsureOrConsistency", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#monadErrorEnsureOrConsistency[A](fa:F[A],e:A=>E,p:A=>Boolean):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorEnsureConsistency", "tail" : "(fa: F[A], e: E, p: (A) => Boolean): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.monadErrorEnsureConsistency", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#monadErrorEnsureConsistency[A](fa:F[A],e:E,p:A=>Boolean):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorLeftZero", "tail" : "(e: E, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadErrorLaws.monadErrorLeftZero", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#monadErrorLeftZero[A,B](e:E,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "tailRecMStackSafety", "tail" : ": laws.IsEq[F[Int]]", "member" : "cats.laws.MonadLaws.tailRecMStackSafety", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#tailRecMStackSafety:cats.laws.IsEq[F[Int]]", "kind" : "lazy val"}, {"label" : "mapFlatMapCoherence", "tail" : "(fa: F[A], f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.mapFlatMapCoherence", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#mapFlatMapCoherence[A,B](fa:F[A],f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "kleisliRightIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.kleisliRightIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#kleisliRightIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "kleisliLeftIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.kleisliLeftIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#kleisliLeftIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "monadRightIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.MonadLaws.monadRightIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#monadRightIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadLeftIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.monadLeftIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#monadLeftIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "flatMapFromTailRecMConsistency", "tail" : "(fa: F[A], fn: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.FlatMapLaws.flatMapFromTailRecMConsistency", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#flatMapFromTailRecMConsistency[A,B](fa:F[A],fn:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "tailRecMConsistentFlatMap", "tail" : "(a: A, f: (A) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.FlatMapLaws.tailRecMConsistentFlatMap", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#tailRecMConsistentFlatMap[A](a:A,f:A=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "mproductConsistency", "tail" : "(fa: F[A], fb: (A) => F[B]): laws.IsEq[F[(A, B)]]", "member" : "cats.laws.FlatMapLaws.mproductConsistency", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#mproductConsistency[A,B](fa:F[A],fb:A=>F[B]):cats.laws.IsEq[F[(A,B)]]", "kind" : "def"}, {"label" : "kleisliAssociativity", "tail" : "(f: (A) => F[B], g: (B) => F[C], h: (C) => F[D], a: A): laws.IsEq[F[D]]", "member" : "cats.laws.FlatMapLaws.kleisliAssociativity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#kleisliAssociativity[A,B,C,D](f:A=>F[B],g:B=>F[C],h:C=>F[D],a:A):cats.laws.IsEq[F[D]]", "kind" : "def"}, {"label" : "flatMapConsistentApply", "tail" : "(fa: F[A], fab: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.FlatMapLaws.flatMapConsistentApply", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#flatMapConsistentApply[A,B](fa:F[A],fab:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "flatMapAssociativity", "tail" : "(fa: F[A], f: (A) => F[B], g: (B) => F[C]): laws.IsEq[F[C]]", "member" : "cats.laws.FlatMapLaws.flatMapAssociativity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#flatMapAssociativity[A,B,C](fa:F[A],f:A=>F[B],g:B=>F[C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "raiseErrorDistributesOverApRight", "tail" : "(h: (E) => F[A], e: E): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorDistributesOverApRight", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#raiseErrorDistributesOverApRight[A](h:E=>F[A],e:E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "raiseErrorDistributesOverApLeft", "tail" : "(h: (E) => F[A], e: E): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorDistributesOverApLeft", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#raiseErrorDistributesOverApLeft[A](h:E=>F[A],e:E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "redeemDerivedFromAttemptMap", "tail" : "(fa: F[A], fe: (E) => B, fs: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeErrorLaws.redeemDerivedFromAttemptMap", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#redeemDerivedFromAttemptMap[A,B](fa:F[A],fe:E=>B,fs:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "onErrorRaise", "tail" : "(fa: F[A], e: E, fb: F[Unit]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.onErrorRaise", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#onErrorRaise[A](fa:F[A],e:E,fb:F[Unit]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "onErrorPure", "tail" : "(a: A, f: (E) => F[Unit]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.onErrorPure", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#onErrorPure[A](a:A,f:E=>F[Unit]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "attemptFromEitherConsistentWithPure", "tail" : "(eab: Either[E, A]): laws.IsEq[F[Either[E, A]]]", "member" : "cats.laws.ApplicativeErrorLaws.attemptFromEitherConsistentWithPure", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#attemptFromEitherConsistentWithPure[A](eab:Either[E,A]):cats.laws.IsEq[F[Either[E,A]]]", "kind" : "def"}, {"label" : "attemptConsistentWithAttemptT", "tail" : "(fa: F[A]): laws.IsEq[EitherT[F, E, A]]", "member" : "cats.laws.ApplicativeErrorLaws.attemptConsistentWithAttemptT", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#attemptConsistentWithAttemptT[A](fa:F[A]):cats.laws.IsEq[cats.data.EitherT[F,E,A]]", "kind" : "def"}, {"label" : "recoverConsistentWithRecoverWith", "tail" : "(fa: F[A], pf: PartialFunction[E, A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.recoverConsistentWithRecoverWith", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#recoverConsistentWithRecoverWith[A](fa:F[A],pf:PartialFunction[E,A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorConsistentWithRecover", "tail" : "(fa: F[A], f: (E) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorConsistentWithRecover", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#handleErrorConsistentWithRecover[A](fa:F[A],f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorWithConsistentWithRecoverWith", "tail" : "(fa: F[A], f: (E) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorWithConsistentWithRecoverWith", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#handleErrorWithConsistentWithRecoverWith[A](fa:F[A],f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "pureAttempt", "tail" : "(a: A): laws.IsEq[F[Either[E, A]]]", "member" : "cats.laws.ApplicativeErrorLaws.pureAttempt", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#pureAttempt[A](a:A):cats.laws.IsEq[F[Either[E,A]]]", "kind" : "def"}, {"label" : "raiseErrorAttempt", "tail" : "(e: E): laws.IsEq[F[Either[E, Unit]]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorAttempt", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#raiseErrorAttempt(e:E):cats.laws.IsEq[F[Either[E,Unit]]]", "kind" : "def"}, {"label" : "handleErrorPure", "tail" : "(a: A, f: (E) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorPure", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#handleErrorPure[A](a:A,f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorWithPure", "tail" : "(a: A, f: (E) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorWithPure", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#handleErrorWithPure[A](a:A,f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "applicativeErrorHandle", "tail" : "(e: E, f: (E) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.applicativeErrorHandle", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#applicativeErrorHandle[A](e:E,f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "applicativeErrorHandleWith", "tail" : "(e: E, f: (E) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.applicativeErrorHandleWith", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#applicativeErrorHandleWith[A](e:E,f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monoidalRightIdentity", "tail" : "(fa: F[A]): (F[(A, Unit)], F[A])", "member" : "cats.laws.ApplicativeLaws.monoidalRightIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#monoidalRightIdentity[A](fa:F[A]):(F[(A,Unit)],F[A])", "kind" : "def"}, {"label" : "monoidalLeftIdentity", "tail" : "(fa: F[A]): (F[(Unit, A)], F[A])", "member" : "cats.laws.ApplicativeLaws.monoidalLeftIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#monoidalLeftIdentity[A](fa:F[A]):(F[(Unit,A)],F[A])", "kind" : "def"}, {"label" : "applicativeUnit", "tail" : "(a: A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeLaws.applicativeUnit", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#applicativeUnit[A](a:A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "apProductConsistent", "tail" : "(fa: F[A], f: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.apProductConsistent", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#apProductConsistent[A,B](fa:F[A],f:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeComposition", "tail" : "(fa: F[A], fab: F[(A) => B], fbc: F[(B) => C]): laws.IsEq[F[C]]", "member" : "cats.laws.ApplicativeLaws.applicativeComposition", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#applicativeComposition[A,B,C](fa:F[A],fab:F[A=>B],fbc:F[B=>C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "applicativeMap", "tail" : "(fa: F[A], f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeMap", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#applicativeMap[A,B](fa:F[A],f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeInterchange", "tail" : "(a: A, ff: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeInterchange", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#applicativeInterchange[A,B](a:A,ff:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeHomomorphism", "tail" : "(a: A, f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeHomomorphism", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#applicativeHomomorphism[A,B](a:A,f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeLaws.applicativeIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#applicativeIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "productLConsistency", "tail" : "(fa: F[A], fb: F[B]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplyLaws.productLConsistency", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#productLConsistency[A,B](fa:F[A],fb:F[B]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "productRConsistency", "tail" : "(fa: F[A], fb: F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplyLaws.productRConsistency", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#productRConsistency[A,B](fa:F[A],fb:F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "map2EvalConsistency", "tail" : "(fa: F[A], fb: F[B], f: (A, B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.map2EvalConsistency", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#map2EvalConsistency[A,B,C](fa:F[A],fb:F[B],f:(A,B)=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "map2ProductConsistency", "tail" : "(fa: F[A], fb: F[B], f: (A, B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.map2ProductConsistency", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#map2ProductConsistency[A,B,C](fa:F[A],fb:F[B],f:(A,B)=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "applyComposition", "tail" : "(fa: F[A], fab: F[(A) => B], fbc: F[(B) => C]): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.applyComposition", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#applyComposition[A,B,C](fa:F[A],fab:F[A=>B],fbc:F[B=>C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "semigroupalAssociativity", "tail" : "(fa: F[A], fb: F[B], fc: F[C]): (F[(A, (B, C))], F[((A, B), C)])", "member" : "cats.laws.SemigroupalLaws.semigroupalAssociativity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#semigroupalAssociativity[A,B,C](fa:F[A],fb:F[B],fc:F[C]):(F[(A,(B,C))],F[((A,B),C)])", "kind" : "def"}, {"label" : "covariantComposition", "tail" : "(fa: F[A], f: (A) => B, g: (B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.FunctorLaws.covariantComposition", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#covariantComposition[A,B,C](fa:F[A],f:A=>B,g:B=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "covariantIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.FunctorLaws.covariantIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#covariantIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "invariantComposition", "tail" : "(fa: F[A], f1: (A) => B, f2: (B) => A, g1: (B) => C, g2: (C) => B): laws.IsEq[F[C]]", "member" : "cats.laws.InvariantLaws.invariantComposition", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#invariantComposition[A,B,C](fa:F[A],f1:A=>B,f2:B=>A,g1:B=>C,g2:C=>B):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "invariantIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.InvariantLaws.invariantIdentity", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#invariantIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/GenTemporalLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": kernel.GenTemporal[F, E]", "member" : "cats.effect.laws.GenTemporalLaws.F", "link" : "cats\/effect\/laws\/GenTemporalLaws.html#F:cats.effect.kernel.GenTemporal[F,E]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.GenTemporalTests", "object" : "cats\/effect\/laws\/GenTemporalTests$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.GenTemporal[F, E]): GenTemporalTests[F, E]", "member" : "cats.effect.laws.GenTemporalTests.apply", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#apply[F[_],E](implicitF0:cats.effect.kernel.GenTemporal[F,E]):cats.effect.laws.GenTemporalTests[F,E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/GenTemporalTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/GenTemporalTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/GenTemporalTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cats\/effect\/laws\/GenTemporalTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cats\/effect\/laws\/GenTemporalTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cats\/effect\/laws\/GenTemporalTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cats\/effect\/laws\/GenTemporalTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "temporal", "tail" : "(tolerance: FiniteDuration)(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], ArbFiniteDuration: Arbitrary[FiniteDuration], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[E], EqFAB: Eq[F[Either[A, B]]], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqFEitherUA: Eq[F[Either[Unit, A]]], EqFEitherAU: Eq[F[Either[A, Unit]]], EqFOutcomeEA: Eq[F[kernel.Outcome[F, E, A]]], EqFOutcomeEU: Eq[F[kernel.Outcome[F, E, Unit]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], OrdFFD: Order[F[FiniteDuration]], GroupFD: Group[FiniteDuration], exec: (F[Boolean]) => Prop, iso: Isomorphisms[F], faPP: (F[A]) => Pretty, fuPP: (F[Unit]) => Pretty, ePP: (E) => Pretty, foaPP: (F[kernel.Outcome[F, E, A]]) => Pretty, feauPP: (F[Either[A, Unit]]) => Pretty, feuaPP: (F[Either[Unit, A]]) => Pretty, fouPP: (F[kernel.Outcome[F, E, Unit]]) => Pretty): RuleSet", "member" : "cats.effect.laws.GenTemporalTests.temporal", "link" : "cats\/effect\/laws\/GenTemporalTests.html#temporal[A,B,C](tolerance:scala.concurrent.duration.FiniteDuration)(implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitArbFiniteDuration:org.scalacheck.Arbitrary[scala.concurrent.duration.FiniteDuration],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[E],implicitEqFAB:cats.Eq[F[Either[A,B]]],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqFEitherUA:cats.Eq[F[Either[Unit,A]]],implicitEqFEitherAU:cats.Eq[F[Either[A,Unit]]],implicitEqFOutcomeEA:cats.Eq[F[cats.effect.kernel.Outcome[F,E,A]]],implicitEqFOutcomeEU:cats.Eq[F[cats.effect.kernel.Outcome[F,E,Unit]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitOrdFFD:cats.Order[F[scala.concurrent.duration.FiniteDuration]],implicitGroupFD:cats.Group[scala.concurrent.duration.FiniteDuration],implicitexec:F[Boolean]=>org.scalacheck.Prop,implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitfaPP:F[A]=>org.scalacheck.util.Pretty,implicitfuPP:F[Unit]=>org.scalacheck.util.Pretty,implicitePP:E=>org.scalacheck.util.Pretty,implicitfoaPP:F[cats.effect.kernel.Outcome[F,E,A]]=>org.scalacheck.util.Pretty,implicitfeauPP:F[Either[A,Unit]]=>org.scalacheck.util.Pretty,implicitfeuaPP:F[Either[Unit,A]]=>org.scalacheck.util.Pretty,implicitfouPP:F[cats.effect.kernel.Outcome[F,E,Unit]]=>org.scalacheck.util.Pretty):GenTemporalTests.this.RuleSet", "kind" : "def"}, {"label" : "clock", "tail" : "(exec: (F[Boolean]) => Prop): RuleSet", "member" : "cats.effect.laws.ClockTests.clock", "link" : "cats\/effect\/laws\/GenTemporalTests.html#clock(implicitexec:F[Boolean]=>org.scalacheck.Prop):ClockTests.this.RuleSet", "kind" : "def"}, {"label" : "spawn", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[E], EqFAB: Eq[F[Either[A, B]]], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqFEitherUA: Eq[F[Either[Unit, A]]], EqFEitherAU: Eq[F[Either[A, Unit]]], EqFOutcomeEA: Eq[F[kernel.Outcome[F, E, A]]], EqFOutcomeEU: Eq[F[kernel.Outcome[F, E, Unit]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F], faPP: (F[A]) => Pretty, fuPP: (F[Unit]) => Pretty, ePP: (E) => Pretty, foaPP: (F[kernel.Outcome[F, E, A]]) => Pretty, feauPP: (F[Either[A, Unit]]) => Pretty, feuaPP: (F[Either[Unit, A]]) => Pretty, fouPP: (F[kernel.Outcome[F, E, Unit]]) => Pretty): RuleSet", "member" : "cats.effect.laws.GenSpawnTests.spawn", "link" : "cats\/effect\/laws\/GenTemporalTests.html#spawn[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[E],implicitEqFAB:cats.Eq[F[Either[A,B]]],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqFEitherUA:cats.Eq[F[Either[Unit,A]]],implicitEqFEitherAU:cats.Eq[F[Either[A,Unit]]],implicitEqFOutcomeEA:cats.Eq[F[cats.effect.kernel.Outcome[F,E,A]]],implicitEqFOutcomeEU:cats.Eq[F[cats.effect.kernel.Outcome[F,E,Unit]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitfaPP:F[A]=>org.scalacheck.util.Pretty,implicitfuPP:F[Unit]=>org.scalacheck.util.Pretty,implicitePP:E=>org.scalacheck.util.Pretty,implicitfoaPP:F[cats.effect.kernel.Outcome[F,E,A]]=>org.scalacheck.util.Pretty,implicitfeauPP:F[Either[A,Unit]]=>org.scalacheck.util.Pretty,implicitfeuaPP:F[Either[Unit,A]]=>org.scalacheck.util.Pretty,implicitfouPP:F[cats.effect.kernel.Outcome[F,E,Unit]]=>org.scalacheck.util.Pretty):GenSpawnTests.this.RuleSet", "kind" : "def"}, {"label" : "unique", "tail" : "(exec: (F[Boolean]) => Prop): RuleSet", "member" : "cats.effect.laws.UniqueTests.unique", "link" : "cats\/effect\/laws\/GenTemporalTests.html#unique(implicitexec:F[Boolean]=>org.scalacheck.Prop):UniqueTests.this.RuleSet", "kind" : "def"}, {"label" : "monadCancel", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[E], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F], faPP: (F[A]) => Pretty, fuPP: (F[Unit]) => Pretty, ePP: (E) => Pretty): RuleSet", "member" : "cats.effect.laws.MonadCancelTests.monadCancel", "link" : "cats\/effect\/laws\/GenTemporalTests.html#monadCancel[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitfaPP:F[A]=>org.scalacheck.util.Pretty,implicitfuPP:F[Unit]=>org.scalacheck.util.Pretty,implicitePP:E=>org.scalacheck.util.Pretty):MonadCancelTests.this.RuleSet", "kind" : "def"}, {"label" : "monadError", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqE: Eq[E], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqEitherTFEA: Eq[EitherT[F, E, A]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadErrorTests.monadError", "link" : "cats\/effect\/laws\/GenTemporalTests.html#monadError[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqEitherTFEA:cats.Eq[cats.data.EitherT[F,E,A]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadErrorTests.this.RuleSet", "kind" : "def"}, {"label" : "stackUnsafeMonad", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadTests.stackUnsafeMonad", "link" : "cats\/effect\/laws\/GenTemporalTests.html#stackUnsafeMonad[A,B,C](implicitevidence$7:org.scalacheck.Arbitrary[A],implicitevidence$8:cats.Eq[A],implicitevidence$9:org.scalacheck.Arbitrary[B],implicitevidence$10:cats.Eq[B],implicitevidence$11:org.scalacheck.Arbitrary[C],implicitevidence$12:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadTests.this.RuleSet", "kind" : "def"}, {"label" : "monad", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadTests.monad", "link" : "cats\/effect\/laws\/GenTemporalTests.html#monad[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadTests.this.RuleSet", "kind" : "def"}, {"label" : "flatMap", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.FlatMapTests.flatMap", "link" : "cats\/effect\/laws\/GenTemporalTests.html#flatMap[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):FlatMapTests.this.RuleSet", "kind" : "def"}, {"label" : "applicativeError", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqE: Eq[E], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqEitherTFEA: Eq[EitherT[F, E, A]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplicativeErrorTests.applicativeError", "link" : "cats\/effect\/laws\/GenTemporalTests.html#applicativeError[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqEitherTFEA:cats.Eq[cats.data.EitherT[F,E,A]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplicativeErrorTests.this.RuleSet", "kind" : "def"}, {"label" : "applicative", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplicativeTests.applicative", "link" : "cats\/effect\/laws\/GenTemporalTests.html#applicative[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplicativeTests.this.RuleSet", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplyTests.apply", "link" : "cats\/effect\/laws\/GenTemporalTests.html#apply[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplyTests.this.RuleSet", "kind" : "def"}, {"label" : "semigroupal", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], iso: Isomorphisms[F], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], EqFA: Eq[F[A]], EqFABC: Eq[F[(A, B, C)]]): RuleSet", "member" : "cats.laws.discipline.SemigroupalTests.semigroupal", "link" : "cats\/effect\/laws\/GenTemporalTests.html#semigroupal[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitEqFA:cats.Eq[F[A]],implicitEqFABC:cats.Eq[F[(A,B,C)]]):SemigroupalTests.this.RuleSet", "kind" : "def"}, {"label" : "functor", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]]): RuleSet", "member" : "cats.laws.discipline.FunctorTests.functor", "link" : "cats\/effect\/laws\/GenTemporalTests.html#functor[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]]):FunctorTests.this.RuleSet", "kind" : "def"}, {"label" : "invariant", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]]): RuleSet", "member" : "cats.laws.discipline.InvariantTests.invariant", "link" : "cats\/effect\/laws\/GenTemporalTests.html#invariant[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]]):InvariantTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cats\/effect\/laws\/GenTemporalTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/GenTemporalTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/GenTemporalTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/GenTemporalTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/GenTemporalTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/GenTemporalTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/GenTemporalTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/GenTemporalTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/GenTemporalTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/GenTemporalTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/GenTemporalTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/GenTemporalTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/GenTemporalTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/GenTemporalTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/GenTemporalTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/GenTemporalTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/GenTemporalTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/GenTemporalTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : ": GenTemporalLaws[F, E]", "member" : "cats.effect.laws.GenTemporalTests.laws", "link" : "cats\/effect\/laws\/GenTemporalTests.html#laws:cats.effect.laws.GenTemporalLaws[F,E]", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.IsEq", "object" : "cats\/effect\/laws\/IsEq$.html", "members_object" : [{"label" : "Assert", "tail" : "", "member" : "cats.effect.laws.IsEq.Assert", "link" : "cats\/effect\/laws\/IsEq$.html#Assert[A]extendsIsEq[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "apply", "tail" : "(lhs: A, rhs: A): IsEq[A]", "member" : "cats.effect.laws.IsEq.apply", "link" : "cats\/effect\/laws\/IsEq$.html#apply[A](lhs:A,rhs:A):cats.effect.laws.IsEq[A]", "kind" : "def"}, {"label" : "toPropTolerant", "tail" : "(isEq: IsEq[F[A]])(F: Applicative[F], ord: Order[F[A]], g: Group[A], tolerance: Tolerance[A], pp: (F[A]) => Pretty): Prop", "member" : "cats.effect.laws.IsEq.toPropTolerant", "link" : "cats\/effect\/laws\/IsEq$.html#toPropTolerant[F[_],A](isEq:cats.effect.laws.IsEq[F[A]])(implicitF:cats.Applicative[F],implicitord:cats.Order[F[A]],implicitg:cats.Group[A],implicittolerance:cats.effect.laws.Tolerance[A],implicitpp:F[A]=>org.scalacheck.util.Pretty):org.scalacheck.Prop", "kind" : "implicit def"}, {"label" : "toProp", "tail" : "(isEq: IsEq[A])(arg0: Eq[A], pp: (A) => Pretty): Prop", "member" : "cats.effect.laws.IsEqLowPriorityImplicits.toProp", "link" : "cats\/effect\/laws\/IsEq$.html#toProp[A](isEq:cats.effect.laws.IsEq[A])(implicitevidence$1:cats.Eq[A],implicitpp:A=>org.scalacheck.util.Pretty):org.scalacheck.Prop", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/IsEq$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/IsEq$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/IsEq$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/IsEq$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/IsEq$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/IsEq$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/IsEq$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/IsEq$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/IsEq$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/IsEq$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/IsEq$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/IsEq$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/IsEq$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/IsEq$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/IsEq$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/IsEq$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/IsEq$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/IsEq$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/IsEq$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/IsEq.html", "kind" : "trait", "members_trait" : [{"label" : "toProp", "tail" : "(A: Eq[A], pp: (A) => Pretty): Prop", "member" : "cats.effect.laws.IsEq.toProp", "link" : "cats\/effect\/laws\/IsEq.html#toProp(implicitA:cats.Eq[A],implicitpp:A=>org.scalacheck.util.Pretty):org.scalacheck.Prop", "kind" : "def"}, {"label" : "toPropTolerant", "tail" : "(ev: =:=[A, F[B]], F: Applicative[F], ord: Order[F[B]], g: Group[B], tolerance: Tolerance[B], pp: (A) => Pretty): Prop", "member" : "cats.effect.laws.IsEq.toPropTolerant", "link" : "cats\/effect\/laws\/IsEq.html#toPropTolerant[F[_],B](implicitev:A=:=F[B],implicitF:cats.Applicative[F],implicitord:cats.Order[F[B]],implicitg:cats.Group[B],implicittolerance:cats.effect.laws.Tolerance[B],implicitpp:A=>org.scalacheck.util.Pretty):org.scalacheck.Prop", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/IsEq.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/IsEq.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/IsEq.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/IsEq.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/IsEq.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/IsEq.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/IsEq.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/IsEq.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/IsEq.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/IsEq.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/IsEq.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/IsEq.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/IsEq.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/IsEq.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/IsEq.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/IsEq.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/IsEq.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/IsEq.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/IsEq.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.IsEqArrow", "shortDescription" : "", "members_class" : [{"label" : "<->", "tail" : "(rhs: A): IsEq[A]", "member" : "cats.effect.laws.IsEqArrow.<->", "link" : "cats\/effect\/laws\/package$$IsEqArrow.html#<->(rhs:A):cats.effect.laws.IsEq[A]", "kind" : "def"}, {"member" : "cats.effect.laws.IsEqArrow#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cats\/effect\/laws\/package$$IsEqArrow.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cats\/effect\/laws\/package$$IsEqArrow.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/package$$IsEqArrow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/package$$IsEqArrow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "cats\/effect\/laws\/package$$IsEqArrow.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cats\/effect\/laws\/package$$IsEqArrow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cats\/effect\/laws\/package$$IsEqArrow.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "cats\/effect\/laws\/package$$IsEqArrow.html", "kind" : "class"}, {"name" : "cats.effect.laws.MonadCancelLaws", "object" : "cats\/effect\/laws\/MonadCancelLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.MonadCancel[F, E]): MonadCancelLaws[F, E]", "member" : "cats.effect.laws.MonadCancelLaws.apply", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#apply[F[_],E](implicitF0:cats.effect.kernel.MonadCancel[F,E]):cats.effect.laws.MonadCancelLaws[F,E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/MonadCancelLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/MonadCancelLaws.html", "kind" : "trait", "members_trait" : [{"label" : "canceledUnitIdentity", "tail" : "(): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledUnitIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#canceledUnitIdentity:cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableIdentity", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#uncancelableIdentity[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "canceledAssociatesLeftOverFlatMap", "tail" : "(fa: F[A]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledAssociatesLeftOverFlatMap", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#canceledAssociatesLeftOverFlatMap[A](fa:F[A]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableCanceledAssociatesRightOverFlatMapAttempt", "tail" : "(fa: F[A]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableCanceledAssociatesRightOverFlatMapAttempt", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#uncancelableCanceledAssociatesRightOverFlatMapAttempt[A](fa:F[A]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "canceledSequencesOnCancelInOrder", "tail" : "(fin1: F[Unit], fin2: F[Unit]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledSequencesOnCancelInOrder", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#canceledSequencesOnCancelInOrder(fin1:F[Unit],fin2:F[Unit]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableFinalizers", "tail" : "(fin: F[Unit]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableFinalizers", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#uncancelableFinalizers[A](fin:F[Unit]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "forceRCanceledShortCircuits", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRCanceledShortCircuits", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#forceRCanceledShortCircuits[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "forceRDiscardsError", "tail" : "(e: E, fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRDiscardsError", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#forceRDiscardsError[A](e:E,fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "forceRDiscardsPure", "tail" : "(a: A, fa: F[B]): IsEq[F[B]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRDiscardsPure", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#forceRDiscardsPure[A,B](a:A,fa:F[B]):cats.effect.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "onCancelAssociatesOverUncancelableBoundary", "tail" : "(fa: F[A], fin: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.onCancelAssociatesOverUncancelableBoundary", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#onCancelAssociatesOverUncancelableBoundary[A](fa:F[A],fin:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableEliminatesOnCancel", "tail" : "(fa: F[A], fin: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableEliminatesOnCancel", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#uncancelableEliminatesOnCancel[A](fa:F[A],fin:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelablePollInverseNestIsUncancelable", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelablePollInverseNestIsUncancelable", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#uncancelablePollInverseNestIsUncancelable[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableIgnoredPollEliminatesNesting", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableIgnoredPollEliminatesNesting", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#uncancelableIgnoredPollEliminatesNesting[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelablePollIsIdentity", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelablePollIsIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#uncancelablePollIsIdentity[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "adaptErrorRaise", "tail" : "(e: E, f: (E) => E): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.adaptErrorRaise", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#adaptErrorRaise[A](e:E,f:E=>E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "adaptErrorPure", "tail" : "(a: A, f: (E) => E): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.adaptErrorPure", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#adaptErrorPure[A](a:A,f:E=>E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "redeemWithDerivedFromAttemptFlatMap", "tail" : "(fa: F[A], fe: (E) => F[B], fs: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadErrorLaws.redeemWithDerivedFromAttemptFlatMap", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#redeemWithDerivedFromAttemptFlatMap[A,B](fa:F[A],fe:E=>F[B],fs:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "rethrowAttempt", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.rethrowAttempt", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#rethrowAttempt[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorEnsureOrConsistency", "tail" : "(fa: F[A], e: (A) => E, p: (A) => Boolean): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.monadErrorEnsureOrConsistency", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#monadErrorEnsureOrConsistency[A](fa:F[A],e:A=>E,p:A=>Boolean):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorEnsureConsistency", "tail" : "(fa: F[A], e: E, p: (A) => Boolean): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.monadErrorEnsureConsistency", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#monadErrorEnsureConsistency[A](fa:F[A],e:E,p:A=>Boolean):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorLeftZero", "tail" : "(e: E, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadErrorLaws.monadErrorLeftZero", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#monadErrorLeftZero[A,B](e:E,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "tailRecMStackSafety", "tail" : ": laws.IsEq[F[Int]]", "member" : "cats.laws.MonadLaws.tailRecMStackSafety", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#tailRecMStackSafety:cats.laws.IsEq[F[Int]]", "kind" : "lazy val"}, {"label" : "mapFlatMapCoherence", "tail" : "(fa: F[A], f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.mapFlatMapCoherence", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#mapFlatMapCoherence[A,B](fa:F[A],f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "kleisliRightIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.kleisliRightIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#kleisliRightIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "kleisliLeftIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.kleisliLeftIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#kleisliLeftIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "monadRightIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.MonadLaws.monadRightIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#monadRightIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadLeftIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.monadLeftIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#monadLeftIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "flatMapFromTailRecMConsistency", "tail" : "(fa: F[A], fn: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.FlatMapLaws.flatMapFromTailRecMConsistency", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#flatMapFromTailRecMConsistency[A,B](fa:F[A],fn:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "tailRecMConsistentFlatMap", "tail" : "(a: A, f: (A) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.FlatMapLaws.tailRecMConsistentFlatMap", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#tailRecMConsistentFlatMap[A](a:A,f:A=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "mproductConsistency", "tail" : "(fa: F[A], fb: (A) => F[B]): laws.IsEq[F[(A, B)]]", "member" : "cats.laws.FlatMapLaws.mproductConsistency", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#mproductConsistency[A,B](fa:F[A],fb:A=>F[B]):cats.laws.IsEq[F[(A,B)]]", "kind" : "def"}, {"label" : "kleisliAssociativity", "tail" : "(f: (A) => F[B], g: (B) => F[C], h: (C) => F[D], a: A): laws.IsEq[F[D]]", "member" : "cats.laws.FlatMapLaws.kleisliAssociativity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#kleisliAssociativity[A,B,C,D](f:A=>F[B],g:B=>F[C],h:C=>F[D],a:A):cats.laws.IsEq[F[D]]", "kind" : "def"}, {"label" : "flatMapConsistentApply", "tail" : "(fa: F[A], fab: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.FlatMapLaws.flatMapConsistentApply", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#flatMapConsistentApply[A,B](fa:F[A],fab:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "flatMapAssociativity", "tail" : "(fa: F[A], f: (A) => F[B], g: (B) => F[C]): laws.IsEq[F[C]]", "member" : "cats.laws.FlatMapLaws.flatMapAssociativity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#flatMapAssociativity[A,B,C](fa:F[A],f:A=>F[B],g:B=>F[C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "raiseErrorDistributesOverApRight", "tail" : "(h: (E) => F[A], e: E): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorDistributesOverApRight", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#raiseErrorDistributesOverApRight[A](h:E=>F[A],e:E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "raiseErrorDistributesOverApLeft", "tail" : "(h: (E) => F[A], e: E): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorDistributesOverApLeft", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#raiseErrorDistributesOverApLeft[A](h:E=>F[A],e:E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "redeemDerivedFromAttemptMap", "tail" : "(fa: F[A], fe: (E) => B, fs: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeErrorLaws.redeemDerivedFromAttemptMap", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#redeemDerivedFromAttemptMap[A,B](fa:F[A],fe:E=>B,fs:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "onErrorRaise", "tail" : "(fa: F[A], e: E, fb: F[Unit]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.onErrorRaise", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#onErrorRaise[A](fa:F[A],e:E,fb:F[Unit]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "onErrorPure", "tail" : "(a: A, f: (E) => F[Unit]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.onErrorPure", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#onErrorPure[A](a:A,f:E=>F[Unit]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "attemptFromEitherConsistentWithPure", "tail" : "(eab: Either[E, A]): laws.IsEq[F[Either[E, A]]]", "member" : "cats.laws.ApplicativeErrorLaws.attemptFromEitherConsistentWithPure", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#attemptFromEitherConsistentWithPure[A](eab:Either[E,A]):cats.laws.IsEq[F[Either[E,A]]]", "kind" : "def"}, {"label" : "attemptConsistentWithAttemptT", "tail" : "(fa: F[A]): laws.IsEq[EitherT[F, E, A]]", "member" : "cats.laws.ApplicativeErrorLaws.attemptConsistentWithAttemptT", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#attemptConsistentWithAttemptT[A](fa:F[A]):cats.laws.IsEq[cats.data.EitherT[F,E,A]]", "kind" : "def"}, {"label" : "recoverConsistentWithRecoverWith", "tail" : "(fa: F[A], pf: PartialFunction[E, A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.recoverConsistentWithRecoverWith", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#recoverConsistentWithRecoverWith[A](fa:F[A],pf:PartialFunction[E,A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorConsistentWithRecover", "tail" : "(fa: F[A], f: (E) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorConsistentWithRecover", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#handleErrorConsistentWithRecover[A](fa:F[A],f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorWithConsistentWithRecoverWith", "tail" : "(fa: F[A], f: (E) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorWithConsistentWithRecoverWith", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#handleErrorWithConsistentWithRecoverWith[A](fa:F[A],f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "pureAttempt", "tail" : "(a: A): laws.IsEq[F[Either[E, A]]]", "member" : "cats.laws.ApplicativeErrorLaws.pureAttempt", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#pureAttempt[A](a:A):cats.laws.IsEq[F[Either[E,A]]]", "kind" : "def"}, {"label" : "raiseErrorAttempt", "tail" : "(e: E): laws.IsEq[F[Either[E, Unit]]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorAttempt", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#raiseErrorAttempt(e:E):cats.laws.IsEq[F[Either[E,Unit]]]", "kind" : "def"}, {"label" : "handleErrorPure", "tail" : "(a: A, f: (E) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorPure", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#handleErrorPure[A](a:A,f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorWithPure", "tail" : "(a: A, f: (E) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorWithPure", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#handleErrorWithPure[A](a:A,f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "applicativeErrorHandle", "tail" : "(e: E, f: (E) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.applicativeErrorHandle", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#applicativeErrorHandle[A](e:E,f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "applicativeErrorHandleWith", "tail" : "(e: E, f: (E) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.applicativeErrorHandleWith", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#applicativeErrorHandleWith[A](e:E,f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monoidalRightIdentity", "tail" : "(fa: F[A]): (F[(A, Unit)], F[A])", "member" : "cats.laws.ApplicativeLaws.monoidalRightIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#monoidalRightIdentity[A](fa:F[A]):(F[(A,Unit)],F[A])", "kind" : "def"}, {"label" : "monoidalLeftIdentity", "tail" : "(fa: F[A]): (F[(Unit, A)], F[A])", "member" : "cats.laws.ApplicativeLaws.monoidalLeftIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#monoidalLeftIdentity[A](fa:F[A]):(F[(Unit,A)],F[A])", "kind" : "def"}, {"label" : "applicativeUnit", "tail" : "(a: A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeLaws.applicativeUnit", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#applicativeUnit[A](a:A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "apProductConsistent", "tail" : "(fa: F[A], f: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.apProductConsistent", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#apProductConsistent[A,B](fa:F[A],f:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeComposition", "tail" : "(fa: F[A], fab: F[(A) => B], fbc: F[(B) => C]): laws.IsEq[F[C]]", "member" : "cats.laws.ApplicativeLaws.applicativeComposition", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#applicativeComposition[A,B,C](fa:F[A],fab:F[A=>B],fbc:F[B=>C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "applicativeMap", "tail" : "(fa: F[A], f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeMap", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#applicativeMap[A,B](fa:F[A],f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeInterchange", "tail" : "(a: A, ff: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeInterchange", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#applicativeInterchange[A,B](a:A,ff:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeHomomorphism", "tail" : "(a: A, f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeHomomorphism", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#applicativeHomomorphism[A,B](a:A,f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeLaws.applicativeIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#applicativeIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "productLConsistency", "tail" : "(fa: F[A], fb: F[B]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplyLaws.productLConsistency", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#productLConsistency[A,B](fa:F[A],fb:F[B]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "productRConsistency", "tail" : "(fa: F[A], fb: F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplyLaws.productRConsistency", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#productRConsistency[A,B](fa:F[A],fb:F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "map2EvalConsistency", "tail" : "(fa: F[A], fb: F[B], f: (A, B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.map2EvalConsistency", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#map2EvalConsistency[A,B,C](fa:F[A],fb:F[B],f:(A,B)=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "map2ProductConsistency", "tail" : "(fa: F[A], fb: F[B], f: (A, B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.map2ProductConsistency", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#map2ProductConsistency[A,B,C](fa:F[A],fb:F[B],f:(A,B)=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "applyComposition", "tail" : "(fa: F[A], fab: F[(A) => B], fbc: F[(B) => C]): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.applyComposition", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#applyComposition[A,B,C](fa:F[A],fab:F[A=>B],fbc:F[B=>C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "semigroupalAssociativity", "tail" : "(fa: F[A], fb: F[B], fc: F[C]): (F[(A, (B, C))], F[((A, B), C)])", "member" : "cats.laws.SemigroupalLaws.semigroupalAssociativity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#semigroupalAssociativity[A,B,C](fa:F[A],fb:F[B],fc:F[C]):(F[(A,(B,C))],F[((A,B),C)])", "kind" : "def"}, {"label" : "covariantComposition", "tail" : "(fa: F[A], f: (A) => B, g: (B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.FunctorLaws.covariantComposition", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#covariantComposition[A,B,C](fa:F[A],f:A=>B,g:B=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "covariantIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.FunctorLaws.covariantIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#covariantIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "invariantComposition", "tail" : "(fa: F[A], f1: (A) => B, f2: (B) => A, g1: (B) => C, g2: (C) => B): laws.IsEq[F[C]]", "member" : "cats.laws.InvariantLaws.invariantComposition", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#invariantComposition[A,B,C](fa:F[A],f1:A=>B,f2:B=>A,g1:B=>C,g2:C=>B):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "invariantIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.InvariantLaws.invariantIdentity", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#invariantIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/MonadCancelLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": kernel.MonadCancel[F, E]", "member" : "cats.effect.laws.MonadCancelLaws.F", "link" : "cats\/effect\/laws\/MonadCancelLaws.html#F:cats.effect.kernel.MonadCancel[F,E]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.MonadCancelTests", "object" : "cats\/effect\/laws\/MonadCancelTests$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.MonadCancel[F, E]): MonadCancelTests[F, E]", "member" : "cats.effect.laws.MonadCancelTests.apply", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#apply[F[_],E](implicitF0:cats.effect.kernel.MonadCancel[F,E]):cats.effect.laws.MonadCancelTests[F,E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/MonadCancelTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/MonadCancelTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/MonadCancelTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cats\/effect\/laws\/MonadCancelTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cats\/effect\/laws\/MonadCancelTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cats\/effect\/laws\/MonadCancelTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cats\/effect\/laws\/MonadCancelTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "monadCancel", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[E], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F], faPP: (F[A]) => Pretty, fuPP: (F[Unit]) => Pretty, ePP: (E) => Pretty): RuleSet", "member" : "cats.effect.laws.MonadCancelTests.monadCancel", "link" : "cats\/effect\/laws\/MonadCancelTests.html#monadCancel[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitfaPP:F[A]=>org.scalacheck.util.Pretty,implicitfuPP:F[Unit]=>org.scalacheck.util.Pretty,implicitePP:E=>org.scalacheck.util.Pretty):MonadCancelTests.this.RuleSet", "kind" : "def"}, {"label" : "monadError", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqE: Eq[E], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqEitherTFEA: Eq[EitherT[F, E, A]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadErrorTests.monadError", "link" : "cats\/effect\/laws\/MonadCancelTests.html#monadError[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqEitherTFEA:cats.Eq[cats.data.EitherT[F,E,A]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadErrorTests.this.RuleSet", "kind" : "def"}, {"label" : "stackUnsafeMonad", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadTests.stackUnsafeMonad", "link" : "cats\/effect\/laws\/MonadCancelTests.html#stackUnsafeMonad[A,B,C](implicitevidence$7:org.scalacheck.Arbitrary[A],implicitevidence$8:cats.Eq[A],implicitevidence$9:org.scalacheck.Arbitrary[B],implicitevidence$10:cats.Eq[B],implicitevidence$11:org.scalacheck.Arbitrary[C],implicitevidence$12:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadTests.this.RuleSet", "kind" : "def"}, {"label" : "monad", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadTests.monad", "link" : "cats\/effect\/laws\/MonadCancelTests.html#monad[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadTests.this.RuleSet", "kind" : "def"}, {"label" : "flatMap", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.FlatMapTests.flatMap", "link" : "cats\/effect\/laws\/MonadCancelTests.html#flatMap[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):FlatMapTests.this.RuleSet", "kind" : "def"}, {"label" : "applicativeError", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[E], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[E], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqE: Eq[E], EqFEitherEU: Eq[F[Either[E, Unit]]], EqFEitherEA: Eq[F[Either[E, A]]], EqEitherTFEA: Eq[EitherT[F, E, A]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplicativeErrorTests.applicativeError", "link" : "cats\/effect\/laws\/MonadCancelTests.html#applicativeError[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqEitherTFEA:cats.Eq[cats.data.EitherT[F,E,A]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplicativeErrorTests.this.RuleSet", "kind" : "def"}, {"label" : "applicative", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplicativeTests.applicative", "link" : "cats\/effect\/laws\/MonadCancelTests.html#applicative[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplicativeTests.this.RuleSet", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplyTests.apply", "link" : "cats\/effect\/laws\/MonadCancelTests.html#apply[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplyTests.this.RuleSet", "kind" : "def"}, {"label" : "semigroupal", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], iso: Isomorphisms[F], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], EqFA: Eq[F[A]], EqFABC: Eq[F[(A, B, C)]]): RuleSet", "member" : "cats.laws.discipline.SemigroupalTests.semigroupal", "link" : "cats\/effect\/laws\/MonadCancelTests.html#semigroupal[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitEqFA:cats.Eq[F[A]],implicitEqFABC:cats.Eq[F[(A,B,C)]]):SemigroupalTests.this.RuleSet", "kind" : "def"}, {"label" : "functor", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]]): RuleSet", "member" : "cats.laws.discipline.FunctorTests.functor", "link" : "cats\/effect\/laws\/MonadCancelTests.html#functor[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]]):FunctorTests.this.RuleSet", "kind" : "def"}, {"label" : "invariant", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]]): RuleSet", "member" : "cats.laws.discipline.InvariantTests.invariant", "link" : "cats\/effect\/laws\/MonadCancelTests.html#invariant[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]]):InvariantTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cats\/effect\/laws\/MonadCancelTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/MonadCancelTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/MonadCancelTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/MonadCancelTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/MonadCancelTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/MonadCancelTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/MonadCancelTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/MonadCancelTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/MonadCancelTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/MonadCancelTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/MonadCancelTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/MonadCancelTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/MonadCancelTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/MonadCancelTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/MonadCancelTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/MonadCancelTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/MonadCancelTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/MonadCancelTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : ": MonadCancelLaws[F, E]", "member" : "cats.effect.laws.MonadCancelTests.laws", "link" : "cats\/effect\/laws\/MonadCancelTests.html#laws:cats.effect.laws.MonadCancelLaws[F,E]", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.SyncLaws", "object" : "cats\/effect\/laws\/SyncLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.Sync[F]): SyncLaws[F]", "member" : "cats.effect.laws.SyncLaws.apply", "link" : "cats\/effect\/laws\/SyncLaws$.html#apply[F[_]](implicitF0:cats.effect.kernel.Sync[F]):cats.effect.laws.SyncLaws[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/SyncLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/SyncLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/SyncLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/SyncLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/SyncLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/SyncLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/SyncLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/SyncLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/SyncLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/SyncLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/SyncLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/SyncLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/SyncLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/SyncLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/SyncLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/SyncLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/SyncLaws.html", "kind" : "trait", "members_trait" : [{"label" : "repeatedSuspendNotMemoized", "tail" : "(a: A, f: (A) => A, hint: Type): IsEq[F[A]]", "member" : "cats.effect.laws.SyncLaws.repeatedSuspendNotMemoized", "link" : "cats\/effect\/laws\/SyncLaws.html#repeatedSuspendNotMemoized[A](a:A,f:A=>A,hint:cats.effect.kernel.Sync.Type):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "unsequencedSuspendIsNoop", "tail" : "(a: A, f: (A) => A, hint: Type): IsEq[F[A]]", "member" : "cats.effect.laws.SyncLaws.unsequencedSuspendIsNoop", "link" : "cats\/effect\/laws\/SyncLaws.html#unsequencedSuspendIsNoop[A](a:A,f:A=>A,hint:cats.effect.kernel.Sync.Type):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "suspendThrowIsRaiseError", "tail" : "(e: Throwable, hint: Type): IsEq[F[A]]", "member" : "cats.effect.laws.SyncLaws.suspendThrowIsRaiseError", "link" : "cats\/effect\/laws\/SyncLaws.html#suspendThrowIsRaiseError[A](e:Throwable,hint:cats.effect.kernel.Sync.Type):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "suspendValueIsPure", "tail" : "(a: A, hint: Type): IsEq[F[A]]", "member" : "cats.effect.laws.SyncLaws.suspendValueIsPure", "link" : "cats\/effect\/laws\/SyncLaws.html#suspendValueIsPure[A](a:A,hint:cats.effect.kernel.Sync.Type):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uniqueness", "tail" : "(): F[Boolean]", "member" : "cats.effect.laws.UniqueLaws.uniqueness", "link" : "cats\/effect\/laws\/SyncLaws.html#uniqueness:F[Boolean]", "kind" : "def"}, {"label" : "monotonicity", "tail" : "(): F[Boolean]", "member" : "cats.effect.laws.ClockLaws.monotonicity", "link" : "cats\/effect\/laws\/SyncLaws.html#monotonicity:F[Boolean]", "kind" : "def"}, {"label" : "canceledUnitIdentity", "tail" : "(): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledUnitIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#canceledUnitIdentity:cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableIdentity", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#uncancelableIdentity[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "canceledAssociatesLeftOverFlatMap", "tail" : "(fa: F[A]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledAssociatesLeftOverFlatMap", "link" : "cats\/effect\/laws\/SyncLaws.html#canceledAssociatesLeftOverFlatMap[A](fa:F[A]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableCanceledAssociatesRightOverFlatMapAttempt", "tail" : "(fa: F[A]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableCanceledAssociatesRightOverFlatMapAttempt", "link" : "cats\/effect\/laws\/SyncLaws.html#uncancelableCanceledAssociatesRightOverFlatMapAttempt[A](fa:F[A]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "canceledSequencesOnCancelInOrder", "tail" : "(fin1: F[Unit], fin2: F[Unit]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.canceledSequencesOnCancelInOrder", "link" : "cats\/effect\/laws\/SyncLaws.html#canceledSequencesOnCancelInOrder(fin1:F[Unit],fin2:F[Unit]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "uncancelableFinalizers", "tail" : "(fin: F[Unit]): IsEq[F[Unit]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableFinalizers", "link" : "cats\/effect\/laws\/SyncLaws.html#uncancelableFinalizers[A](fin:F[Unit]):cats.effect.laws.IsEq[F[Unit]]", "kind" : "def"}, {"label" : "forceRCanceledShortCircuits", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRCanceledShortCircuits", "link" : "cats\/effect\/laws\/SyncLaws.html#forceRCanceledShortCircuits[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "forceRDiscardsError", "tail" : "(e: Throwable, fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRDiscardsError", "link" : "cats\/effect\/laws\/SyncLaws.html#forceRDiscardsError[A](e:E,fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "forceRDiscardsPure", "tail" : "(a: A, fa: F[B]): IsEq[F[B]]", "member" : "cats.effect.laws.MonadCancelLaws.forceRDiscardsPure", "link" : "cats\/effect\/laws\/SyncLaws.html#forceRDiscardsPure[A,B](a:A,fa:F[B]):cats.effect.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "onCancelAssociatesOverUncancelableBoundary", "tail" : "(fa: F[A], fin: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.onCancelAssociatesOverUncancelableBoundary", "link" : "cats\/effect\/laws\/SyncLaws.html#onCancelAssociatesOverUncancelableBoundary[A](fa:F[A],fin:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableEliminatesOnCancel", "tail" : "(fa: F[A], fin: F[Unit]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableEliminatesOnCancel", "link" : "cats\/effect\/laws\/SyncLaws.html#uncancelableEliminatesOnCancel[A](fa:F[A],fin:F[Unit]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelablePollInverseNestIsUncancelable", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelablePollInverseNestIsUncancelable", "link" : "cats\/effect\/laws\/SyncLaws.html#uncancelablePollInverseNestIsUncancelable[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelableIgnoredPollEliminatesNesting", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelableIgnoredPollEliminatesNesting", "link" : "cats\/effect\/laws\/SyncLaws.html#uncancelableIgnoredPollEliminatesNesting[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "uncancelablePollIsIdentity", "tail" : "(fa: F[A]): IsEq[F[A]]", "member" : "cats.effect.laws.MonadCancelLaws.uncancelablePollIsIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#uncancelablePollIsIdentity[A](fa:F[A]):cats.effect.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "adaptErrorRaise", "tail" : "(e: Throwable, f: (Throwable) => Throwable): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.adaptErrorRaise", "link" : "cats\/effect\/laws\/SyncLaws.html#adaptErrorRaise[A](e:E,f:E=>E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "adaptErrorPure", "tail" : "(a: A, f: (Throwable) => Throwable): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.adaptErrorPure", "link" : "cats\/effect\/laws\/SyncLaws.html#adaptErrorPure[A](a:A,f:E=>E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "redeemWithDerivedFromAttemptFlatMap", "tail" : "(fa: F[A], fe: (Throwable) => F[B], fs: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadErrorLaws.redeemWithDerivedFromAttemptFlatMap", "link" : "cats\/effect\/laws\/SyncLaws.html#redeemWithDerivedFromAttemptFlatMap[A,B](fa:F[A],fe:E=>F[B],fs:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "rethrowAttempt", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.rethrowAttempt", "link" : "cats\/effect\/laws\/SyncLaws.html#rethrowAttempt[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorEnsureOrConsistency", "tail" : "(fa: F[A], e: (A) => Throwable, p: (A) => Boolean): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.monadErrorEnsureOrConsistency", "link" : "cats\/effect\/laws\/SyncLaws.html#monadErrorEnsureOrConsistency[A](fa:F[A],e:A=>E,p:A=>Boolean):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorEnsureConsistency", "tail" : "(fa: F[A], e: Throwable, p: (A) => Boolean): laws.IsEq[F[A]]", "member" : "cats.laws.MonadErrorLaws.monadErrorEnsureConsistency", "link" : "cats\/effect\/laws\/SyncLaws.html#monadErrorEnsureConsistency[A](fa:F[A],e:E,p:A=>Boolean):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadErrorLeftZero", "tail" : "(e: Throwable, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadErrorLaws.monadErrorLeftZero", "link" : "cats\/effect\/laws\/SyncLaws.html#monadErrorLeftZero[A,B](e:E,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "tailRecMStackSafety", "tail" : ": laws.IsEq[F[Int]]", "member" : "cats.laws.MonadLaws.tailRecMStackSafety", "link" : "cats\/effect\/laws\/SyncLaws.html#tailRecMStackSafety:cats.laws.IsEq[F[Int]]", "kind" : "lazy val"}, {"label" : "mapFlatMapCoherence", "tail" : "(fa: F[A], f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.mapFlatMapCoherence", "link" : "cats\/effect\/laws\/SyncLaws.html#mapFlatMapCoherence[A,B](fa:F[A],f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "kleisliRightIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.kleisliRightIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#kleisliRightIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "kleisliLeftIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.kleisliLeftIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#kleisliLeftIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "monadRightIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.MonadLaws.monadRightIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#monadRightIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monadLeftIdentity", "tail" : "(a: A, f: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.MonadLaws.monadLeftIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#monadLeftIdentity[A,B](a:A,f:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "flatMapFromTailRecMConsistency", "tail" : "(fa: F[A], fn: (A) => F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.FlatMapLaws.flatMapFromTailRecMConsistency", "link" : "cats\/effect\/laws\/SyncLaws.html#flatMapFromTailRecMConsistency[A,B](fa:F[A],fn:A=>F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "tailRecMConsistentFlatMap", "tail" : "(a: A, f: (A) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.FlatMapLaws.tailRecMConsistentFlatMap", "link" : "cats\/effect\/laws\/SyncLaws.html#tailRecMConsistentFlatMap[A](a:A,f:A=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "mproductConsistency", "tail" : "(fa: F[A], fb: (A) => F[B]): laws.IsEq[F[(A, B)]]", "member" : "cats.laws.FlatMapLaws.mproductConsistency", "link" : "cats\/effect\/laws\/SyncLaws.html#mproductConsistency[A,B](fa:F[A],fb:A=>F[B]):cats.laws.IsEq[F[(A,B)]]", "kind" : "def"}, {"label" : "kleisliAssociativity", "tail" : "(f: (A) => F[B], g: (B) => F[C], h: (C) => F[D], a: A): laws.IsEq[F[D]]", "member" : "cats.laws.FlatMapLaws.kleisliAssociativity", "link" : "cats\/effect\/laws\/SyncLaws.html#kleisliAssociativity[A,B,C,D](f:A=>F[B],g:B=>F[C],h:C=>F[D],a:A):cats.laws.IsEq[F[D]]", "kind" : "def"}, {"label" : "flatMapConsistentApply", "tail" : "(fa: F[A], fab: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.FlatMapLaws.flatMapConsistentApply", "link" : "cats\/effect\/laws\/SyncLaws.html#flatMapConsistentApply[A,B](fa:F[A],fab:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "flatMapAssociativity", "tail" : "(fa: F[A], f: (A) => F[B], g: (B) => F[C]): laws.IsEq[F[C]]", "member" : "cats.laws.FlatMapLaws.flatMapAssociativity", "link" : "cats\/effect\/laws\/SyncLaws.html#flatMapAssociativity[A,B,C](fa:F[A],f:A=>F[B],g:B=>F[C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "raiseErrorDistributesOverApRight", "tail" : "(h: (Throwable) => F[A], e: Throwable): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorDistributesOverApRight", "link" : "cats\/effect\/laws\/SyncLaws.html#raiseErrorDistributesOverApRight[A](h:E=>F[A],e:E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "raiseErrorDistributesOverApLeft", "tail" : "(h: (Throwable) => F[A], e: Throwable): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorDistributesOverApLeft", "link" : "cats\/effect\/laws\/SyncLaws.html#raiseErrorDistributesOverApLeft[A](h:E=>F[A],e:E):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "redeemDerivedFromAttemptMap", "tail" : "(fa: F[A], fe: (Throwable) => B, fs: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeErrorLaws.redeemDerivedFromAttemptMap", "link" : "cats\/effect\/laws\/SyncLaws.html#redeemDerivedFromAttemptMap[A,B](fa:F[A],fe:E=>B,fs:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "onErrorRaise", "tail" : "(fa: F[A], e: Throwable, fb: F[Unit]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.onErrorRaise", "link" : "cats\/effect\/laws\/SyncLaws.html#onErrorRaise[A](fa:F[A],e:E,fb:F[Unit]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "onErrorPure", "tail" : "(a: A, f: (Throwable) => F[Unit]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.onErrorPure", "link" : "cats\/effect\/laws\/SyncLaws.html#onErrorPure[A](a:A,f:E=>F[Unit]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "attemptFromEitherConsistentWithPure", "tail" : "(eab: Either[Throwable, A]): laws.IsEq[F[Either[Throwable, A]]]", "member" : "cats.laws.ApplicativeErrorLaws.attemptFromEitherConsistentWithPure", "link" : "cats\/effect\/laws\/SyncLaws.html#attemptFromEitherConsistentWithPure[A](eab:Either[E,A]):cats.laws.IsEq[F[Either[E,A]]]", "kind" : "def"}, {"label" : "attemptConsistentWithAttemptT", "tail" : "(fa: F[A]): laws.IsEq[EitherT[F, Throwable, A]]", "member" : "cats.laws.ApplicativeErrorLaws.attemptConsistentWithAttemptT", "link" : "cats\/effect\/laws\/SyncLaws.html#attemptConsistentWithAttemptT[A](fa:F[A]):cats.laws.IsEq[cats.data.EitherT[F,E,A]]", "kind" : "def"}, {"label" : "recoverConsistentWithRecoverWith", "tail" : "(fa: F[A], pf: PartialFunction[Throwable, A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.recoverConsistentWithRecoverWith", "link" : "cats\/effect\/laws\/SyncLaws.html#recoverConsistentWithRecoverWith[A](fa:F[A],pf:PartialFunction[E,A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorConsistentWithRecover", "tail" : "(fa: F[A], f: (Throwable) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorConsistentWithRecover", "link" : "cats\/effect\/laws\/SyncLaws.html#handleErrorConsistentWithRecover[A](fa:F[A],f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorWithConsistentWithRecoverWith", "tail" : "(fa: F[A], f: (Throwable) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorWithConsistentWithRecoverWith", "link" : "cats\/effect\/laws\/SyncLaws.html#handleErrorWithConsistentWithRecoverWith[A](fa:F[A],f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "pureAttempt", "tail" : "(a: A): laws.IsEq[F[Either[Throwable, A]]]", "member" : "cats.laws.ApplicativeErrorLaws.pureAttempt", "link" : "cats\/effect\/laws\/SyncLaws.html#pureAttempt[A](a:A):cats.laws.IsEq[F[Either[E,A]]]", "kind" : "def"}, {"label" : "raiseErrorAttempt", "tail" : "(e: Throwable): laws.IsEq[F[Either[Throwable, Unit]]]", "member" : "cats.laws.ApplicativeErrorLaws.raiseErrorAttempt", "link" : "cats\/effect\/laws\/SyncLaws.html#raiseErrorAttempt(e:E):cats.laws.IsEq[F[Either[E,Unit]]]", "kind" : "def"}, {"label" : "handleErrorPure", "tail" : "(a: A, f: (Throwable) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorPure", "link" : "cats\/effect\/laws\/SyncLaws.html#handleErrorPure[A](a:A,f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "handleErrorWithPure", "tail" : "(a: A, f: (Throwable) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.handleErrorWithPure", "link" : "cats\/effect\/laws\/SyncLaws.html#handleErrorWithPure[A](a:A,f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "applicativeErrorHandle", "tail" : "(e: Throwable, f: (Throwable) => A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.applicativeErrorHandle", "link" : "cats\/effect\/laws\/SyncLaws.html#applicativeErrorHandle[A](e:E,f:E=>A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "applicativeErrorHandleWith", "tail" : "(e: Throwable, f: (Throwable) => F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeErrorLaws.applicativeErrorHandleWith", "link" : "cats\/effect\/laws\/SyncLaws.html#applicativeErrorHandleWith[A](e:E,f:E=>F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "monoidalRightIdentity", "tail" : "(fa: F[A]): (F[(A, Unit)], F[A])", "member" : "cats.laws.ApplicativeLaws.monoidalRightIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#monoidalRightIdentity[A](fa:F[A]):(F[(A,Unit)],F[A])", "kind" : "def"}, {"label" : "monoidalLeftIdentity", "tail" : "(fa: F[A]): (F[(Unit, A)], F[A])", "member" : "cats.laws.ApplicativeLaws.monoidalLeftIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#monoidalLeftIdentity[A](fa:F[A]):(F[(Unit,A)],F[A])", "kind" : "def"}, {"label" : "applicativeUnit", "tail" : "(a: A): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeLaws.applicativeUnit", "link" : "cats\/effect\/laws\/SyncLaws.html#applicativeUnit[A](a:A):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "apProductConsistent", "tail" : "(fa: F[A], f: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.apProductConsistent", "link" : "cats\/effect\/laws\/SyncLaws.html#apProductConsistent[A,B](fa:F[A],f:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeComposition", "tail" : "(fa: F[A], fab: F[(A) => B], fbc: F[(B) => C]): laws.IsEq[F[C]]", "member" : "cats.laws.ApplicativeLaws.applicativeComposition", "link" : "cats\/effect\/laws\/SyncLaws.html#applicativeComposition[A,B,C](fa:F[A],fab:F[A=>B],fbc:F[B=>C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "applicativeMap", "tail" : "(fa: F[A], f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeMap", "link" : "cats\/effect\/laws\/SyncLaws.html#applicativeMap[A,B](fa:F[A],f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeInterchange", "tail" : "(a: A, ff: F[(A) => B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeInterchange", "link" : "cats\/effect\/laws\/SyncLaws.html#applicativeInterchange[A,B](a:A,ff:F[A=>B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeHomomorphism", "tail" : "(a: A, f: (A) => B): laws.IsEq[F[B]]", "member" : "cats.laws.ApplicativeLaws.applicativeHomomorphism", "link" : "cats\/effect\/laws\/SyncLaws.html#applicativeHomomorphism[A,B](a:A,f:A=>B):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "applicativeIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplicativeLaws.applicativeIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#applicativeIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "productLConsistency", "tail" : "(fa: F[A], fb: F[B]): laws.IsEq[F[A]]", "member" : "cats.laws.ApplyLaws.productLConsistency", "link" : "cats\/effect\/laws\/SyncLaws.html#productLConsistency[A,B](fa:F[A],fb:F[B]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "productRConsistency", "tail" : "(fa: F[A], fb: F[B]): laws.IsEq[F[B]]", "member" : "cats.laws.ApplyLaws.productRConsistency", "link" : "cats\/effect\/laws\/SyncLaws.html#productRConsistency[A,B](fa:F[A],fb:F[B]):cats.laws.IsEq[F[B]]", "kind" : "def"}, {"label" : "map2EvalConsistency", "tail" : "(fa: F[A], fb: F[B], f: (A, B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.map2EvalConsistency", "link" : "cats\/effect\/laws\/SyncLaws.html#map2EvalConsistency[A,B,C](fa:F[A],fb:F[B],f:(A,B)=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "map2ProductConsistency", "tail" : "(fa: F[A], fb: F[B], f: (A, B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.map2ProductConsistency", "link" : "cats\/effect\/laws\/SyncLaws.html#map2ProductConsistency[A,B,C](fa:F[A],fb:F[B],f:(A,B)=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "applyComposition", "tail" : "(fa: F[A], fab: F[(A) => B], fbc: F[(B) => C]): laws.IsEq[F[C]]", "member" : "cats.laws.ApplyLaws.applyComposition", "link" : "cats\/effect\/laws\/SyncLaws.html#applyComposition[A,B,C](fa:F[A],fab:F[A=>B],fbc:F[B=>C]):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "semigroupalAssociativity", "tail" : "(fa: F[A], fb: F[B], fc: F[C]): (F[(A, (B, C))], F[((A, B), C)])", "member" : "cats.laws.SemigroupalLaws.semigroupalAssociativity", "link" : "cats\/effect\/laws\/SyncLaws.html#semigroupalAssociativity[A,B,C](fa:F[A],fb:F[B],fc:F[C]):(F[(A,(B,C))],F[((A,B),C)])", "kind" : "def"}, {"label" : "covariantComposition", "tail" : "(fa: F[A], f: (A) => B, g: (B) => C): laws.IsEq[F[C]]", "member" : "cats.laws.FunctorLaws.covariantComposition", "link" : "cats\/effect\/laws\/SyncLaws.html#covariantComposition[A,B,C](fa:F[A],f:A=>B,g:B=>C):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "covariantIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.FunctorLaws.covariantIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#covariantIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "invariantComposition", "tail" : "(fa: F[A], f1: (A) => B, f2: (B) => A, g1: (B) => C, g2: (C) => B): laws.IsEq[F[C]]", "member" : "cats.laws.InvariantLaws.invariantComposition", "link" : "cats\/effect\/laws\/SyncLaws.html#invariantComposition[A,B,C](fa:F[A],f1:A=>B,f2:B=>A,g1:B=>C,g2:C=>B):cats.laws.IsEq[F[C]]", "kind" : "def"}, {"label" : "invariantIdentity", "tail" : "(fa: F[A]): laws.IsEq[F[A]]", "member" : "cats.laws.InvariantLaws.invariantIdentity", "link" : "cats\/effect\/laws\/SyncLaws.html#invariantIdentity[A](fa:F[A]):cats.laws.IsEq[F[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/SyncLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/SyncLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/SyncLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/SyncLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/SyncLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/SyncLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/SyncLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/SyncLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/SyncLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/SyncLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/SyncLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/SyncLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/SyncLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/SyncLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/SyncLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/SyncLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": kernel.Sync[F]", "member" : "cats.effect.laws.SyncLaws.F", "link" : "cats\/effect\/laws\/SyncLaws.html#F:cats.effect.kernel.Sync[F]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.SyncTests", "object" : "cats\/effect\/laws\/SyncTests$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.Sync[F]): SyncTests[F]", "member" : "cats.effect.laws.SyncTests.apply", "link" : "cats\/effect\/laws\/SyncTests$.html#apply[F[_]](implicitF0:cats.effect.kernel.Sync[F]):cats.effect.laws.SyncTests[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/SyncTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/SyncTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/SyncTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/SyncTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/SyncTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/SyncTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/SyncTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/SyncTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/SyncTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/SyncTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/SyncTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/SyncTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/SyncTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/SyncTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/SyncTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/SyncTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/SyncTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cats\/effect\/laws\/SyncTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cats\/effect\/laws\/SyncTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cats\/effect\/laws\/SyncTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cats\/effect\/laws\/SyncTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "sync", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[Throwable], ArbST: Arbitrary[Type], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[Throwable], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[Throwable], EqFEitherEU: Eq[F[Either[Throwable, Unit]]], EqFEitherEA: Eq[F[Either[Throwable, A]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], exec: (F[Boolean]) => Prop, iso: Isomorphisms[F]): RuleSet", "member" : "cats.effect.laws.SyncTests.sync", "link" : "cats\/effect\/laws\/SyncTests.html#sync[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[Throwable],implicitArbST:org.scalacheck.Arbitrary[cats.effect.kernel.Sync.Type],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[Throwable],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[Throwable],implicitEqFEitherEU:cats.Eq[F[Either[Throwable,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[Throwable,A]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitexec:F[Boolean]=>org.scalacheck.Prop,implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):SyncTests.this.RuleSet", "kind" : "def"}, {"label" : "unique", "tail" : "(exec: (F[Boolean]) => Prop): RuleSet", "member" : "cats.effect.laws.UniqueTests.unique", "link" : "cats\/effect\/laws\/SyncTests.html#unique(implicitexec:F[Boolean]=>org.scalacheck.Prop):UniqueTests.this.RuleSet", "kind" : "def"}, {"label" : "clock", "tail" : "(exec: (F[Boolean]) => Prop): RuleSet", "member" : "cats.effect.laws.ClockTests.clock", "link" : "cats\/effect\/laws\/SyncTests.html#clock(implicitexec:F[Boolean]=>org.scalacheck.Prop):ClockTests.this.RuleSet", "kind" : "def"}, {"label" : "monadCancel", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[Throwable], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[Throwable], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFU: Eq[F[Unit]], EqE: Eq[Throwable], EqFEitherEU: Eq[F[Either[Throwable, Unit]]], EqFEitherEA: Eq[F[Either[Throwable, A]]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F], faPP: (F[A]) => Pretty, fuPP: (F[Unit]) => Pretty, ePP: (Throwable) => Pretty): RuleSet", "member" : "cats.effect.laws.MonadCancelTests.monadCancel", "link" : "cats\/effect\/laws\/SyncTests.html#monadCancel[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFU:cats.Eq[F[Unit]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitfaPP:F[A]=>org.scalacheck.util.Pretty,implicitfuPP:F[Unit]=>org.scalacheck.util.Pretty,implicitePP:E=>org.scalacheck.util.Pretty):MonadCancelTests.this.RuleSet", "kind" : "def"}, {"label" : "monadError", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[Throwable], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[Throwable], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqE: Eq[Throwable], EqFEitherEU: Eq[F[Either[Throwable, Unit]]], EqFEitherEA: Eq[F[Either[Throwable, A]]], EqEitherTFEA: Eq[EitherT[F, Throwable, A]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadErrorTests.monadError", "link" : "cats\/effect\/laws\/SyncTests.html#monadError[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqEitherTFEA:cats.Eq[cats.data.EitherT[F,E,A]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadErrorTests.this.RuleSet", "kind" : "def"}, {"label" : "stackUnsafeMonad", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadTests.stackUnsafeMonad", "link" : "cats\/effect\/laws\/SyncTests.html#stackUnsafeMonad[A,B,C](implicitevidence$7:org.scalacheck.Arbitrary[A],implicitevidence$8:cats.Eq[A],implicitevidence$9:org.scalacheck.Arbitrary[B],implicitevidence$10:cats.Eq[B],implicitevidence$11:org.scalacheck.Arbitrary[C],implicitevidence$12:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadTests.this.RuleSet", "kind" : "def"}, {"label" : "monad", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], EqFInt: Eq[F[Int]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.MonadTests.monad", "link" : "cats\/effect\/laws\/SyncTests.html#monad[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitEqFInt:cats.Eq[F[Int]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):MonadTests.this.RuleSet", "kind" : "def"}, {"label" : "flatMap", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.FlatMapTests.flatMap", "link" : "cats\/effect\/laws\/SyncTests.html#flatMap[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):FlatMapTests.this.RuleSet", "kind" : "def"}, {"label" : "applicativeError", "tail" : "(arg0: Arbitrary[A], arg1: Eq[A], arg2: Arbitrary[B], arg3: Eq[B], arg4: Arbitrary[C], arg5: Eq[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFU: Arbitrary[F[Unit]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], ArbE: Arbitrary[Throwable], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], CogenE: Cogen[Throwable], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqE: Eq[Throwable], EqFEitherEU: Eq[F[Either[Throwable, Unit]]], EqFEitherEA: Eq[F[Either[Throwable, A]]], EqEitherTFEA: Eq[EitherT[F, Throwable, A]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplicativeErrorTests.applicativeError", "link" : "cats\/effect\/laws\/SyncTests.html#applicativeError[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:cats.Eq[A],implicitevidence$3:org.scalacheck.Arbitrary[B],implicitevidence$4:cats.Eq[B],implicitevidence$5:org.scalacheck.Arbitrary[C],implicitevidence$6:cats.Eq[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFU:org.scalacheck.Arbitrary[F[Unit]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitArbE:org.scalacheck.Arbitrary[E],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitCogenE:org.scalacheck.Cogen[E],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqE:cats.Eq[E],implicitEqFEitherEU:cats.Eq[F[Either[E,Unit]]],implicitEqFEitherEA:cats.Eq[F[Either[E,A]]],implicitEqEitherTFEA:cats.Eq[cats.data.EitherT[F,E,A]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplicativeErrorTests.this.RuleSet", "kind" : "def"}, {"label" : "applicative", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFB: Eq[F[B]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplicativeTests.applicative", "link" : "cats\/effect\/laws\/SyncTests.html#applicative[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFB:cats.Eq[F[B]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplicativeTests.this.RuleSet", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], ArbFAtoB: Arbitrary[F[(A) => B]], ArbFBtoC: Arbitrary[F[(B) => C]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]], EqFABC: Eq[F[(A, B, C)]], iso: Isomorphisms[F]): RuleSet", "member" : "cats.laws.discipline.ApplyTests.apply", "link" : "cats\/effect\/laws\/SyncTests.html#apply[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitArbFAtoB:org.scalacheck.Arbitrary[F[A=>B]],implicitArbFBtoC:org.scalacheck.Arbitrary[F[B=>C]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]],implicitEqFABC:cats.Eq[F[(A,B,C)]],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F]):ApplyTests.this.RuleSet", "kind" : "def"}, {"label" : "semigroupal", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], iso: Isomorphisms[F], ArbFA: Arbitrary[F[A]], ArbFB: Arbitrary[F[B]], ArbFC: Arbitrary[F[C]], EqFA: Eq[F[A]], EqFABC: Eq[F[(A, B, C)]]): RuleSet", "member" : "cats.laws.discipline.SemigroupalTests.semigroupal", "link" : "cats\/effect\/laws\/SyncTests.html#semigroupal[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitiso:cats.laws.discipline.SemigroupalTests.Isomorphisms[F],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitArbFB:org.scalacheck.Arbitrary[F[B]],implicitArbFC:org.scalacheck.Arbitrary[F[C]],implicitEqFA:cats.Eq[F[A]],implicitEqFABC:cats.Eq[F[(A,B,C)]]):SemigroupalTests.this.RuleSet", "kind" : "def"}, {"label" : "functor", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]]): RuleSet", "member" : "cats.laws.discipline.FunctorTests.functor", "link" : "cats\/effect\/laws\/SyncTests.html#functor[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]]):FunctorTests.this.RuleSet", "kind" : "def"}, {"label" : "invariant", "tail" : "(arg0: Arbitrary[A], arg1: Arbitrary[B], arg2: Arbitrary[C], ArbFA: Arbitrary[F[A]], CogenA: Cogen[A], CogenB: Cogen[B], CogenC: Cogen[C], EqFA: Eq[F[A]], EqFC: Eq[F[C]]): RuleSet", "member" : "cats.laws.discipline.InvariantTests.invariant", "link" : "cats\/effect\/laws\/SyncTests.html#invariant[A,B,C](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitevidence$2:org.scalacheck.Arbitrary[B],implicitevidence$3:org.scalacheck.Arbitrary[C],implicitArbFA:org.scalacheck.Arbitrary[F[A]],implicitCogenA:org.scalacheck.Cogen[A],implicitCogenB:org.scalacheck.Cogen[B],implicitCogenC:org.scalacheck.Cogen[C],implicitEqFA:cats.Eq[F[A]],implicitEqFC:cats.Eq[F[C]]):InvariantTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cats\/effect\/laws\/SyncTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/SyncTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/SyncTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/SyncTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/SyncTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/SyncTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/SyncTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/SyncTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/SyncTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/SyncTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/SyncTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/SyncTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/SyncTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/SyncTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/SyncTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/SyncTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/SyncTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/SyncTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : ": SyncLaws[F]", "member" : "cats.effect.laws.SyncTests.laws", "link" : "cats\/effect\/laws\/SyncTests.html#laws:cats.effect.laws.SyncLaws[F]", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.Tolerance", "shortDescription" : "", "object" : "cats\/effect\/laws\/Tolerance$.html", "members_object" : [{"label" : "lift", "tail" : "(arg0: Applicative[F], arg1: Tolerance[A]): Tolerance[F[A]]", "member" : "cats.effect.laws.Tolerance.lift", "link" : "cats\/effect\/laws\/Tolerance$.html#lift[F[_],A](implicitevidence$1:cats.Applicative[F],implicitevidence$2:cats.effect.laws.Tolerance[A]):cats.effect.laws.Tolerance[F[A]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(A: Tolerance[A]): Tolerance[A]", "member" : "cats.effect.laws.Tolerance.apply", "link" : "cats\/effect\/laws\/Tolerance$.html#apply[A](implicitA:cats.effect.laws.Tolerance[A]):cats.effect.laws.Tolerance[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/Tolerance$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/Tolerance$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/Tolerance$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/Tolerance$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/Tolerance$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/Tolerance$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/Tolerance$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/Tolerance$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/Tolerance$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/Tolerance$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/Tolerance$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/Tolerance$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/Tolerance$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/Tolerance$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/Tolerance$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/Tolerance$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/Tolerance$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/Tolerance$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/Tolerance$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "cats.effect.laws.Tolerance#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": A", "member" : "cats.effect.laws.Tolerance.value", "link" : "cats\/effect\/laws\/Tolerance.html#value:A", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cats\/effect\/laws\/Tolerance.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/Tolerance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/Tolerance.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/Tolerance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/Tolerance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/Tolerance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/Tolerance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/Tolerance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/Tolerance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/Tolerance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/Tolerance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/Tolerance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/Tolerance.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/Tolerance.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/Tolerance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/Tolerance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/Tolerance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cats\/effect\/laws\/Tolerance.html", "kind" : "case class"}, {"name" : "cats.effect.laws.UniqueLaws", "object" : "cats\/effect\/laws\/UniqueLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.Unique[F]): UniqueLaws[F]", "member" : "cats.effect.laws.UniqueLaws.apply", "link" : "cats\/effect\/laws\/UniqueLaws$.html#apply[F[_]](implicitF0:cats.effect.kernel.Unique[F]):cats.effect.laws.UniqueLaws[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/UniqueLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/UniqueLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/UniqueLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/UniqueLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/UniqueLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/UniqueLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/UniqueLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/UniqueLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/UniqueLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/UniqueLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/UniqueLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/UniqueLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/UniqueLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/UniqueLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/UniqueLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/UniqueLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/UniqueLaws.html", "kind" : "trait", "members_trait" : [{"label" : "uniqueness", "tail" : "(): F[Boolean]", "member" : "cats.effect.laws.UniqueLaws.uniqueness", "link" : "cats\/effect\/laws\/UniqueLaws.html#uniqueness:F[Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/UniqueLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/UniqueLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/UniqueLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/UniqueLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/UniqueLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/UniqueLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/UniqueLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/UniqueLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/UniqueLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/UniqueLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/UniqueLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/UniqueLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/UniqueLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/UniqueLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/UniqueLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/UniqueLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "F", "tail" : ": kernel.Unique[F]", "member" : "cats.effect.laws.UniqueLaws.F", "link" : "cats\/effect\/laws\/UniqueLaws.html#F:cats.effect.kernel.Unique[F]", "kind" : "implicit abstract val"}], "shortDescription" : ""}, {"name" : "cats.effect.laws.UniqueTests", "object" : "cats\/effect\/laws\/UniqueTests$.html", "members_object" : [{"label" : "apply", "tail" : "(F0: kernel.Unique[F]): UniqueTests[F]", "member" : "cats.effect.laws.UniqueTests.apply", "link" : "cats\/effect\/laws\/UniqueTests$.html#apply[F[_]](implicitF0:cats.effect.kernel.Unique[F]):cats.effect.laws.UniqueTests[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/UniqueTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/UniqueTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/UniqueTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/UniqueTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/UniqueTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/UniqueTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/UniqueTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/UniqueTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/UniqueTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/UniqueTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/UniqueTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/UniqueTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/UniqueTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/UniqueTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/UniqueTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/UniqueTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/laws\/UniqueTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cats\/effect\/laws\/UniqueTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cats\/effect\/laws\/UniqueTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cats\/effect\/laws\/UniqueTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cats\/effect\/laws\/UniqueTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "unique", "tail" : "(exec: (F[Boolean]) => Prop): RuleSet", "member" : "cats.effect.laws.UniqueTests.unique", "link" : "cats\/effect\/laws\/UniqueTests.html#unique(implicitexec:F[Boolean]=>org.scalacheck.Prop):UniqueTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cats\/effect\/laws\/UniqueTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/laws\/UniqueTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/laws\/UniqueTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/laws\/UniqueTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/laws\/UniqueTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/laws\/UniqueTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/laws\/UniqueTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/laws\/UniqueTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/laws\/UniqueTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/laws\/UniqueTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/laws\/UniqueTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/laws\/UniqueTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/laws\/UniqueTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/laws\/UniqueTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/laws\/UniqueTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/laws\/UniqueTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/laws\/UniqueTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/laws\/UniqueTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : ": UniqueLaws[F]", "member" : "cats.effect.laws.UniqueTests.laws", "link" : "cats\/effect\/laws\/UniqueTests.html#laws:cats.effect.laws.UniqueLaws[F]", "kind" : "abstract val"}], "shortDescription" : ""}], "cats.effect.std" : [{"name" : "cats.effect.std.AsyncAwaitDsl", "shortDescription" : "WARNING: This construct currently only works on scala 2 (2.12.12+ \/ 2.13.3+),relies on an experimental compiler feature enabled by the -Xasyncscalac option, and should absolutely be considered unstable withregards to backward compatibility guarantees (be that source or binary).", "object" : "cats\/effect\/std\/AsyncAwaitDsl$.html", "members_class" : [{"label" : "async", "tail" : "(body: => T): F[T]", "member" : "cats.effect.std.AsyncAwaitDsl.async", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#async[T](body:=>T):F[T]", "kind" : "macro def"}, {"label" : "await", "tail" : "(awaitable: F[T]): T", "member" : "cats.effect.std.AsyncAwaitDsl.await", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#await[T](awaitable:F[T]):T", "kind" : "def"}, {"label" : "_AsyncInstance", "tail" : ": kernel.Async[F]", "member" : "cats.effect.std.AsyncAwaitDsl._AsyncInstance", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#_AsyncInstance:cats.effect.kernel.Async[F]", "kind" : "implicit val"}, {"label" : "_AsyncContext", "tail" : "", "member" : "cats.effect.std.AsyncAwaitDsl._AsyncContext", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#_AsyncContext[A]=F[A]", "kind" : "type"}, {"member" : "cats.effect.std.AsyncAwaitDsl#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/AsyncAwaitDsl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "asyncImpl", "tail" : "(c: Context)(body: scala.reflect.macros.blackbox.Context.Expr[T]): scala.reflect.macros.blackbox.Context.Expr[F[T]]", "member" : "cats.effect.std.AsyncAwaitDsl.asyncImpl", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#asyncImpl[F[_],T](c:scala.reflect.macros.blackbox.Context)(body:c.Expr[T]):c.Expr[F[T]]", "kind" : "def"}, {"label" : "AwaitOutcome", "tail" : "", "member" : "cats.effect.std.AsyncAwaitDsl.AwaitOutcome", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#AwaitOutcome[F[_]]=Either[F[AnyRef],(F[Unit],AnyRef)]", "kind" : "type"}, {"label" : "AwaitCallback", "tail" : "", "member" : "cats.effect.std.AsyncAwaitDsl.AwaitCallback", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#AwaitCallback[F[_]]=Either[Throwable,F[AnyRef]]=>Unit", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/AsyncAwaitDsl$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/std\/AsyncAwaitDsl.html", "kind" : "class"}, {"name" : "cats.effect.std.AsyncAwaitStateMachine", "shortDescription" : "", "members_class" : [{"label" : "start", "tail" : "(): Unit", "member" : "cats.effect.std.AsyncAwaitStateMachine.start", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#start():Unit", "kind" : "def"}, {"label" : "tryGet", "tail" : "(awaitOutcome: AwaitOutcome[F]): AnyRef", "member" : "cats.effect.std.AsyncAwaitStateMachine.tryGet", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#tryGet(awaitOutcome:cats.effect.std.AsyncAwaitDsl.AwaitOutcome[F]):AnyRef", "kind" : "def"}, {"label" : "getCompleted", "tail" : "(f: F[AnyRef]): AwaitOutcome[F]", "member" : "cats.effect.std.AsyncAwaitStateMachine.getCompleted", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#getCompleted(f:F[AnyRef]):cats.effect.std.AsyncAwaitDsl.AwaitOutcome[F]", "kind" : "def"}, {"label" : "onComplete", "tail" : "(f: F[AnyRef]): Unit", "member" : "cats.effect.std.AsyncAwaitStateMachine.onComplete", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#onComplete(f:F[AnyRef]):Unit", "kind" : "def"}, {"label" : "completeSuccess", "tail" : "(value: AnyRef): Unit", "member" : "cats.effect.std.AsyncAwaitStateMachine.completeSuccess", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#completeSuccess(value:AnyRef):Unit", "kind" : "def"}, {"label" : "completeFailure", "tail" : "(t: Throwable): Unit", "member" : "cats.effect.std.AsyncAwaitStateMachine.completeFailure", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#completeFailure(t:Throwable):Unit", "kind" : "def"}, {"label" : "state_=", "tail" : "(s: Int): Unit", "member" : "cats.effect.std.AsyncAwaitStateMachine.state_=", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#state_=(s:Int):Unit", "kind" : "def"}, {"label" : "state", "tail" : "(): Int", "member" : "cats.effect.std.AsyncAwaitStateMachine.state", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#state:Int", "kind" : "def"}, {"member" : "cats.effect.std.AsyncAwaitStateMachine#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Unit) => A): (AwaitOutcome[F]) => A", "member" : "scala.Function1.andThen", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => AwaitOutcome[F]): (A) => Unit", "member" : "scala.Function1.compose", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(v1: AwaitOutcome[F]): Unit", "member" : "scala.Function1.apply", "link" : "cats\/effect\/std\/AsyncAwaitStateMachine.html#apply(v1:T1):R", "kind" : "abstract def"}], "class" : "cats\/effect\/std\/AsyncAwaitStateMachine.html", "kind" : "class"}, {"name" : "cats.effect.std.Console", "object" : "cats\/effect\/std\/Console$.html", "members_object" : [{"label" : "catsReaderWriterStateTConsole", "tail" : "(arg0: Console[F], arg1: Applicative[F], arg2: kernel.Monoid[L]): Console[[ε$6$]IndexedReaderWriterStateT[F, E, L, S, S, ε$6$]]", "member" : "cats.effect.std.Console.catsReaderWriterStateTConsole", "link" : "cats\/effect\/std\/Console$.html#catsReaderWriterStateTConsole[F[_],E,L,S](implicitevidence$13:cats.effect.std.Console[F],implicitevidence$14:cats.Applicative[F],implicitevidence$15:cats.kernel.Monoid[L]):cats.effect.std.Console[[ε$6$]cats.data.IndexedReaderWriterStateT[F,E,L,S,S,ε$6$]]", "kind" : "implicit def"}, {"label" : "catsIorTConsole", "tail" : "(arg0: Console[F], arg1: Functor[F]): Console[[γ$5$]IorT[F, L, γ$5$]]", "member" : "cats.effect.std.Console.catsIorTConsole", "link" : "cats\/effect\/std\/Console$.html#catsIorTConsole[F[_],L](implicitevidence$11:cats.effect.std.Console[F],implicitevidence$12:cats.Functor[F]):cats.effect.std.Console[[γ$5$]cats.data.IorT[F,L,γ$5$]]", "kind" : "implicit def"}, {"label" : "catsWriterTConsole", "tail" : "(arg0: Console[F], arg1: Applicative[F], arg2: kernel.Monoid[L]): Console[[γ$4$]WriterT[F, L, γ$4$]]", "member" : "cats.effect.std.Console.catsWriterTConsole", "link" : "cats\/effect\/std\/Console$.html#catsWriterTConsole[F[_],L](implicitevidence$8:cats.effect.std.Console[F],implicitevidence$9:cats.Applicative[F],implicitevidence$10:cats.kernel.Monoid[L]):cats.effect.std.Console[[γ$4$]cats.data.WriterT[F,L,γ$4$]]", "kind" : "implicit def"}, {"label" : "catsStateTConsole", "tail" : "(arg0: Console[F], arg1: Applicative[F]): Console[[γ$3$]IndexedStateT[F, S, S, γ$3$]]", "member" : "cats.effect.std.Console.catsStateTConsole", "link" : "cats\/effect\/std\/Console$.html#catsStateTConsole[F[_],S](implicitevidence$6:cats.effect.std.Console[F],implicitevidence$7:cats.Applicative[F]):cats.effect.std.Console[[γ$3$]cats.data.IndexedStateT[F,S,S,γ$3$]]", "kind" : "implicit def"}, {"label" : "catsOptionTConsole", "tail" : "(arg0: Console[F], arg1: Functor[F]): Console[[β$2$]OptionT[F, β$2$]]", "member" : "cats.effect.std.Console.catsOptionTConsole", "link" : "cats\/effect\/std\/Console$.html#catsOptionTConsole[F[_]](implicitevidence$4:cats.effect.std.Console[F],implicitevidence$5:cats.Functor[F]):cats.effect.std.Console[[β$2$]cats.data.OptionT[F,β$2$]]", "kind" : "implicit def"}, {"label" : "catsKleisliConsole", "tail" : "(arg0: Console[F]): Console[[γ$1$]Kleisli[F, R, γ$1$]]", "member" : "cats.effect.std.Console.catsKleisliConsole", "link" : "cats\/effect\/std\/Console$.html#catsKleisliConsole[F[_],R](implicitevidence$3:cats.effect.std.Console[F]):cats.effect.std.Console[[γ$1$]cats.data.Kleisli[F,R,γ$1$]]", "kind" : "implicit def"}, {"label" : "catsEitherTConsole", "tail" : "(arg0: Console[F], arg1: Functor[F]): Console[[γ$0$]EitherT[F, L, γ$0$]]", "member" : "cats.effect.std.Console.catsEitherTConsole", "link" : "cats\/effect\/std\/Console$.html#catsEitherTConsole[F[_],L](implicitevidence$1:cats.effect.std.Console[F],implicitevidence$2:cats.Functor[F]):cats.effect.std.Console[[γ$0$]cats.data.EitherT[F,L,γ$0$]]", "kind" : "implicit def"}, {"label" : "make", "tail" : "(F: kernel.Sync[F]): Console[F]", "member" : "cats.effect.std.Console.make", "link" : "cats\/effect\/std\/Console$.html#make[F[_]](implicitF:cats.effect.kernel.Sync[F]):cats.effect.std.Console[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(C: Console[F]): C.type", "member" : "cats.effect.std.Console.apply", "link" : "cats\/effect\/std\/Console$.html#apply[F[_]](implicitC:cats.effect.std.Console[F]):C.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Console$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Console$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Console$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Console$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Console$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Console$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Console$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Console$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Console$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Console$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Console$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Console$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Console$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Console$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Console$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Console$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Console$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Console$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Console$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/Console.html", "kind" : "trait", "members_trait" : [{"label" : "mapK", "tail" : "(f: ~>[F, G]): Console[G]", "member" : "cats.effect.std.Console.mapK", "link" : "cats\/effect\/std\/Console.html#mapK[G[_]](f:F~>G):cats.effect.std.Console[G]", "kind" : "def"}, {"label" : "readLine", "tail" : "(): F[String]", "member" : "cats.effect.std.Console.readLine", "link" : "cats\/effect\/std\/Console.html#readLine:F[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Console.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Console.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Console.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Console.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Console.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Console.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Console.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Console.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Console.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Console.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Console.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Console.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Console.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Console.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Console.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Console.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Console.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Console.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Console.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "errorln", "tail" : "(a: A)(S: Show[A]): F[Unit]", "member" : "cats.effect.std.Console.errorln", "link" : "cats\/effect\/std\/Console.html#errorln[A](a:A)(implicitS:cats.Show[A]):F[Unit]", "kind" : "abstract def"}, {"label" : "error", "tail" : "(a: A)(S: Show[A]): F[Unit]", "member" : "cats.effect.std.Console.error", "link" : "cats\/effect\/std\/Console.html#error[A](a:A)(implicitS:cats.Show[A]):F[Unit]", "kind" : "abstract def"}, {"label" : "println", "tail" : "(a: A)(S: Show[A]): F[Unit]", "member" : "cats.effect.std.Console.println", "link" : "cats\/effect\/std\/Console.html#println[A](a:A)(implicitS:cats.Show[A]):F[Unit]", "kind" : "abstract def"}, {"label" : "print", "tail" : "(a: A)(S: Show[A]): F[Unit]", "member" : "cats.effect.std.Console.print", "link" : "cats\/effect\/std\/Console.html#print[A](a:A)(implicitS:cats.Show[A]):F[Unit]", "kind" : "abstract def"}, {"label" : "readLineWithCharset", "tail" : "(charset: Charset): F[String]", "member" : "cats.effect.std.Console.readLineWithCharset", "link" : "cats\/effect\/std\/Console.html#readLineWithCharset(charset:java.nio.charset.Charset):F[String]", "kind" : "abstract def"}], "shortDescription" : "Effect type agnostic Console with common methods to write to and read fromthe standard console."}, {"name" : "cats.effect.std.CountDownLatch", "shortDescription" : "Concurrency abstraction that supports semantically blockinguntil n latches are released.", "object" : "cats\/effect\/std\/CountDownLatch$.html", "members_class" : [{"label" : "mapK", "tail" : "(f: ~>[F, G]): CountDownLatch[G]", "member" : "cats.effect.std.CountDownLatch.mapK", "link" : "cats\/effect\/std\/CountDownLatch.html#mapK[G[_]](f:F~>G):cats.effect.std.CountDownLatch[G]", "kind" : "def"}, {"member" : "cats.effect.std.CountDownLatch#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/CountDownLatch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/CountDownLatch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/CountDownLatch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/CountDownLatch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/CountDownLatch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/CountDownLatch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/CountDownLatch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CountDownLatch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CountDownLatch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CountDownLatch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/CountDownLatch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/CountDownLatch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/CountDownLatch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/CountDownLatch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/CountDownLatch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/CountDownLatch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/CountDownLatch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/CountDownLatch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/CountDownLatch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "await", "tail" : "(): F[Unit]", "member" : "cats.effect.std.CountDownLatch.await", "link" : "cats\/effect\/std\/CountDownLatch.html#await:F[Unit]", "kind" : "abstract def"}, {"label" : "release", "tail" : "(): F[Unit]", "member" : "cats.effect.std.CountDownLatch.release", "link" : "cats\/effect\/std\/CountDownLatch.html#release:F[Unit]", "kind" : "abstract def"}], "members_object" : [{"label" : "apply", "tail" : "(n: Int)(F: kernel.GenConcurrent[F, _]): F[CountDownLatch[F]]", "member" : "cats.effect.std.CountDownLatch.apply", "link" : "cats\/effect\/std\/CountDownLatch$.html#apply[F[_]](n:Int)(implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[cats.effect.std.CountDownLatch[F]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/CountDownLatch$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/CountDownLatch$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/CountDownLatch$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/CountDownLatch$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/CountDownLatch$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/CountDownLatch$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/CountDownLatch$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CountDownLatch$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CountDownLatch$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CountDownLatch$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/CountDownLatch$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/CountDownLatch$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/CountDownLatch$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/CountDownLatch$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/CountDownLatch$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/CountDownLatch$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/CountDownLatch$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/CountDownLatch$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/CountDownLatch$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/std\/CountDownLatch.html", "kind" : "class"}, {"name" : "cats.effect.std.CyclicBarrier", "shortDescription" : "A synchronization abstraction that allows a set of fibersto wait until they all reach a certain point.", "object" : "cats\/effect\/std\/CyclicBarrier$.html", "members_class" : [{"label" : "mapK", "tail" : "(f: ~>[F, G]): CyclicBarrier[G]", "member" : "cats.effect.std.CyclicBarrier.mapK", "link" : "cats\/effect\/std\/CyclicBarrier.html#mapK[G[_]](f:F~>G):cats.effect.std.CyclicBarrier[G]", "kind" : "def"}, {"member" : "cats.effect.std.CyclicBarrier#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/CyclicBarrier.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/CyclicBarrier.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/CyclicBarrier.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/CyclicBarrier.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/CyclicBarrier.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/CyclicBarrier.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/CyclicBarrier.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CyclicBarrier.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CyclicBarrier.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CyclicBarrier.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/CyclicBarrier.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/CyclicBarrier.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/CyclicBarrier.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/CyclicBarrier.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/CyclicBarrier.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/CyclicBarrier.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/CyclicBarrier.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/CyclicBarrier.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/CyclicBarrier.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "await", "tail" : "(): F[Unit]", "member" : "cats.effect.std.CyclicBarrier.await", "link" : "cats\/effect\/std\/CyclicBarrier.html#await:F[Unit]", "kind" : "abstract def"}], "members_object" : [{"label" : "apply", "tail" : "(capacity: Int)(F: kernel.GenConcurrent[F, _]): F[CyclicBarrier[F]]", "member" : "cats.effect.std.CyclicBarrier.apply", "link" : "cats\/effect\/std\/CyclicBarrier$.html#apply[F[_]](capacity:Int)(implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[cats.effect.std.CyclicBarrier[F]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/CyclicBarrier$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/CyclicBarrier$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/CyclicBarrier$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/CyclicBarrier$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/CyclicBarrier$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/CyclicBarrier$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/CyclicBarrier$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CyclicBarrier$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CyclicBarrier$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/CyclicBarrier$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/CyclicBarrier$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/CyclicBarrier$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/CyclicBarrier$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/CyclicBarrier$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/CyclicBarrier$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/CyclicBarrier$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/CyclicBarrier$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/CyclicBarrier$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/CyclicBarrier$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/std\/CyclicBarrier.html", "kind" : "class"}, {"name" : "cats.effect.std.Dequeue", "object" : "cats\/effect\/std\/Dequeue$.html", "members_object" : [{"label" : "catsInvariantForDequeue", "tail" : "(arg0: Functor[F]): Invariant[[β$0$]Dequeue[F, β$0$]]", "member" : "cats.effect.std.Dequeue.catsInvariantForDequeue", "link" : "cats\/effect\/std\/Dequeue$.html#catsInvariantForDequeue[F[_]](implicitevidence$1:cats.Functor[F]):cats.Invariant[[β$0$]cats.effect.std.Dequeue[F,β$0$]]", "kind" : "implicit def"}, {"label" : "unbounded", "tail" : "(F: kernel.GenConcurrent[F, _]): F[Dequeue[F, A]]", "member" : "cats.effect.std.Dequeue.unbounded", "link" : "cats\/effect\/std\/Dequeue$.html#unbounded[F[_],A](implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[cats.effect.std.Dequeue[F,A]]", "kind" : "def"}, {"label" : "bounded", "tail" : "(capacity: Int)(F: kernel.GenConcurrent[F, _]): F[Dequeue[F, A]]", "member" : "cats.effect.std.Dequeue.bounded", "link" : "cats\/effect\/std\/Dequeue$.html#bounded[F[_],A](capacity:Int)(implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[cats.effect.std.Dequeue[F,A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Dequeue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Dequeue$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Dequeue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Dequeue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Dequeue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Dequeue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Dequeue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dequeue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dequeue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dequeue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Dequeue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Dequeue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Dequeue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Dequeue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Dequeue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Dequeue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Dequeue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Dequeue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Dequeue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/Dequeue.html", "kind" : "trait", "members_trait" : [{"label" : "mapK", "tail" : "(f: ~>[F, G]): Dequeue[G, A]", "member" : "cats.effect.std.Dequeue.mapK", "link" : "cats\/effect\/std\/Dequeue.html#mapK[G[_]](f:F~>G):cats.effect.std.Dequeue[G,A]", "kind" : "def"}, {"label" : "tryOffer", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.std.DequeueSink.tryOffer", "link" : "cats\/effect\/std\/Dequeue.html#tryOffer(a:A):F[Boolean]", "kind" : "def"}, {"label" : "offer", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.std.DequeueSink.offer", "link" : "cats\/effect\/std\/Dequeue.html#offer(a:A):F[Unit]", "kind" : "def"}, {"label" : "tryTake", "tail" : "(): F[Option[A]]", "member" : "cats.effect.std.DequeueSource.tryTake", "link" : "cats\/effect\/std\/Dequeue.html#tryTake:F[Option[A]]", "kind" : "def"}, {"label" : "take", "tail" : "(): F[A]", "member" : "cats.effect.std.DequeueSource.take", "link" : "cats\/effect\/std\/Dequeue.html#take:F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Dequeue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Dequeue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Dequeue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Dequeue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Dequeue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Dequeue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Dequeue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dequeue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dequeue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dequeue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Dequeue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Dequeue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Dequeue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Dequeue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Dequeue.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Dequeue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Dequeue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Dequeue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Dequeue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "reverse", "tail" : "(): F[Unit]", "member" : "cats.effect.std.Dequeue.reverse", "link" : "cats\/effect\/std\/Dequeue.html#reverse:F[Unit]", "kind" : "abstract def"}, {"label" : "tryOfferFront", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.std.DequeueSink.tryOfferFront", "link" : "cats\/effect\/std\/Dequeue.html#tryOfferFront(a:A):F[Boolean]", "kind" : "abstract def"}, {"label" : "offerFront", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.std.DequeueSink.offerFront", "link" : "cats\/effect\/std\/Dequeue.html#offerFront(a:A):F[Unit]", "kind" : "abstract def"}, {"label" : "tryOfferBack", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.std.DequeueSink.tryOfferBack", "link" : "cats\/effect\/std\/Dequeue.html#tryOfferBack(a:A):F[Boolean]", "kind" : "abstract def"}, {"label" : "offerBack", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.std.DequeueSink.offerBack", "link" : "cats\/effect\/std\/Dequeue.html#offerBack(a:A):F[Unit]", "kind" : "abstract def"}, {"label" : "tryTakeFront", "tail" : "(): F[Option[A]]", "member" : "cats.effect.std.DequeueSource.tryTakeFront", "link" : "cats\/effect\/std\/Dequeue.html#tryTakeFront:F[Option[A]]", "kind" : "abstract def"}, {"label" : "takeFront", "tail" : "(): F[A]", "member" : "cats.effect.std.DequeueSource.takeFront", "link" : "cats\/effect\/std\/Dequeue.html#takeFront:F[A]", "kind" : "abstract def"}, {"label" : "tryTakeBack", "tail" : "(): F[Option[A]]", "member" : "cats.effect.std.DequeueSource.tryTakeBack", "link" : "cats\/effect\/std\/Dequeue.html#tryTakeBack:F[Option[A]]", "kind" : "abstract def"}, {"label" : "takeBack", "tail" : "(): F[A]", "member" : "cats.effect.std.DequeueSource.takeBack", "link" : "cats\/effect\/std\/Dequeue.html#takeBack:F[A]", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): F[Int]", "member" : "cats.effect.std.QueueSource.size", "link" : "cats\/effect\/std\/Dequeue.html#size:F[Int]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.std.DequeueSink", "object" : "cats\/effect\/std\/DequeueSink$.html", "members_object" : [{"label" : "catsContravariantForDequeueSink", "tail" : "(): Contravariant[[β$4$]DequeueSink[F, β$4$]]", "member" : "cats.effect.std.DequeueSink.catsContravariantForDequeueSink", "link" : "cats\/effect\/std\/DequeueSink$.html#catsContravariantForDequeueSink[F[_]]:cats.Contravariant[[β$4$]cats.effect.std.DequeueSink[F,β$4$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/DequeueSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/DequeueSink$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/DequeueSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/DequeueSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/DequeueSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/DequeueSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/DequeueSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/DequeueSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/DequeueSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/DequeueSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/DequeueSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/DequeueSink$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/DequeueSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/DequeueSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/DequeueSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/DequeueSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/DequeueSink.html", "kind" : "trait", "members_trait" : [{"label" : "tryOffer", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.std.DequeueSink.tryOffer", "link" : "cats\/effect\/std\/DequeueSink.html#tryOffer(a:A):F[Boolean]", "kind" : "def"}, {"label" : "offer", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.std.DequeueSink.offer", "link" : "cats\/effect\/std\/DequeueSink.html#offer(a:A):F[Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/DequeueSink.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/DequeueSink.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/DequeueSink.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/DequeueSink.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/DequeueSink.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/DequeueSink.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/DequeueSink.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSink.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSink.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSink.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/DequeueSink.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/DequeueSink.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/DequeueSink.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/DequeueSink.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/DequeueSink.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/DequeueSink.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/DequeueSink.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/DequeueSink.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/DequeueSink.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryOfferFront", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.std.DequeueSink.tryOfferFront", "link" : "cats\/effect\/std\/DequeueSink.html#tryOfferFront(a:A):F[Boolean]", "kind" : "abstract def"}, {"label" : "offerFront", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.std.DequeueSink.offerFront", "link" : "cats\/effect\/std\/DequeueSink.html#offerFront(a:A):F[Unit]", "kind" : "abstract def"}, {"label" : "tryOfferBack", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.std.DequeueSink.tryOfferBack", "link" : "cats\/effect\/std\/DequeueSink.html#tryOfferBack(a:A):F[Boolean]", "kind" : "abstract def"}, {"label" : "offerBack", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.std.DequeueSink.offerBack", "link" : "cats\/effect\/std\/DequeueSink.html#offerBack(a:A):F[Unit]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.std.DequeueSource", "object" : "cats\/effect\/std\/DequeueSource$.html", "members_object" : [{"label" : "catsFunctorForDequeueSource", "tail" : "(arg0: Functor[F]): Functor[[β$2$]DequeueSource[F, β$2$]]", "member" : "cats.effect.std.DequeueSource.catsFunctorForDequeueSource", "link" : "cats\/effect\/std\/DequeueSource$.html#catsFunctorForDequeueSource[F[_]](implicitevidence$2:cats.Functor[F]):cats.Functor[[β$2$]cats.effect.std.DequeueSource[F,β$2$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/DequeueSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/DequeueSource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/DequeueSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/DequeueSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/DequeueSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/DequeueSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/DequeueSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/DequeueSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/DequeueSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/DequeueSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/DequeueSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/DequeueSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/DequeueSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/DequeueSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/DequeueSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/DequeueSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/DequeueSource.html", "kind" : "trait", "members_trait" : [{"label" : "tryTake", "tail" : "(): F[Option[A]]", "member" : "cats.effect.std.DequeueSource.tryTake", "link" : "cats\/effect\/std\/DequeueSource.html#tryTake:F[Option[A]]", "kind" : "def"}, {"label" : "take", "tail" : "(): F[A]", "member" : "cats.effect.std.DequeueSource.take", "link" : "cats\/effect\/std\/DequeueSource.html#take:F[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/DequeueSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/DequeueSource.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/DequeueSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/DequeueSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/DequeueSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/DequeueSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/DequeueSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/DequeueSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/DequeueSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/DequeueSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/DequeueSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/DequeueSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/DequeueSource.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/DequeueSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/DequeueSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/DequeueSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/DequeueSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryTakeFront", "tail" : "(): F[Option[A]]", "member" : "cats.effect.std.DequeueSource.tryTakeFront", "link" : "cats\/effect\/std\/DequeueSource.html#tryTakeFront:F[Option[A]]", "kind" : "abstract def"}, {"label" : "takeFront", "tail" : "(): F[A]", "member" : "cats.effect.std.DequeueSource.takeFront", "link" : "cats\/effect\/std\/DequeueSource.html#takeFront:F[A]", "kind" : "abstract def"}, {"label" : "tryTakeBack", "tail" : "(): F[Option[A]]", "member" : "cats.effect.std.DequeueSource.tryTakeBack", "link" : "cats\/effect\/std\/DequeueSource.html#tryTakeBack:F[Option[A]]", "kind" : "abstract def"}, {"label" : "takeBack", "tail" : "(): F[A]", "member" : "cats.effect.std.DequeueSource.takeBack", "link" : "cats\/effect\/std\/DequeueSource.html#takeBack:F[A]", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): F[Int]", "member" : "cats.effect.std.QueueSource.size", "link" : "cats\/effect\/std\/DequeueSource.html#size:F[Int]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.std.Dispatcher", "object" : "cats\/effect\/std\/Dispatcher$.html", "members_object" : [{"label" : "apply", "tail" : "(F: kernel.Async[F]): kernel.Resource[F, Dispatcher[F]]", "member" : "cats.effect.std.Dispatcher.apply", "link" : "cats\/effect\/std\/Dispatcher$.html#apply[F[_]](implicitF:cats.effect.kernel.Async[F]):cats.effect.kernel.Resource[F,cats.effect.std.Dispatcher[F]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Dispatcher$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Dispatcher$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Dispatcher$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Dispatcher$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Dispatcher$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Dispatcher$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Dispatcher$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dispatcher$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dispatcher$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dispatcher$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Dispatcher$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Dispatcher$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Dispatcher$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Dispatcher$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Dispatcher$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Dispatcher$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Dispatcher$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Dispatcher$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Dispatcher$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/Dispatcher.html", "kind" : "trait", "members_trait" : [{"label" : "unsafeRunAndForget", "tail" : "(fa: F[A]): Unit", "member" : "cats.effect.std.Dispatcher.unsafeRunAndForget", "link" : "cats\/effect\/std\/Dispatcher.html#unsafeRunAndForget[A](fa:F[A]):Unit", "kind" : "def"}, {"label" : "unsafeRunCancelable", "tail" : "(fa: F[A]): () => Future[Unit]", "member" : "cats.effect.std.Dispatcher.unsafeRunCancelable", "link" : "cats\/effect\/std\/Dispatcher.html#unsafeRunCancelable[A](fa:F[A]):()=>scala.concurrent.Future[Unit]", "kind" : "def"}, {"label" : "unsafeToFuture", "tail" : "(fa: F[A]): Future[A]", "member" : "cats.effect.std.Dispatcher.unsafeToFuture", "link" : "cats\/effect\/std\/Dispatcher.html#unsafeToFuture[A](fa:F[A]):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "unsafeRunTimed", "tail" : "(fa: F[A], timeout: Duration): A", "member" : "cats.effect.std.DispatcherPlatform.unsafeRunTimed", "link" : "cats\/effect\/std\/Dispatcher.html#unsafeRunTimed[A](fa:F[A],timeout:scala.concurrent.duration.Duration):A", "kind" : "def"}, {"label" : "unsafeRunSync", "tail" : "(fa: F[A]): A", "member" : "cats.effect.std.DispatcherPlatform.unsafeRunSync", "link" : "cats\/effect\/std\/Dispatcher.html#unsafeRunSync[A](fa:F[A]):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Dispatcher.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Dispatcher.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Dispatcher.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Dispatcher.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Dispatcher.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Dispatcher.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Dispatcher.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dispatcher.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dispatcher.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Dispatcher.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Dispatcher.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Dispatcher.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Dispatcher.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Dispatcher.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Dispatcher.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Dispatcher.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Dispatcher.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Dispatcher.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Dispatcher.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unsafeToFutureCancelable", "tail" : "(fa: F[A]): (Future[A], () => Future[Unit])", "member" : "cats.effect.std.Dispatcher.unsafeToFutureCancelable", "link" : "cats\/effect\/std\/Dispatcher.html#unsafeToFutureCancelable[A](fa:F[A]):(scala.concurrent.Future[A],()=>scala.concurrent.Future[Unit])", "kind" : "abstract def"}], "shortDescription" : "A fiber-based supervisor utility for evaluating effects across an impureboundary."}, {"name" : "cats.effect.std.Hotswap", "object" : "cats\/effect\/std\/Hotswap$.html", "members_object" : [{"label" : "create", "tail" : "(F: kernel.Concurrent[F]): kernel.Resource[F, Hotswap[F, R]]", "member" : "cats.effect.std.Hotswap.create", "link" : "cats\/effect\/std\/Hotswap$.html#create[F[_],R](implicitF:cats.effect.kernel.Concurrent[F]):cats.effect.kernel.Resource[F,cats.effect.std.Hotswap[F,R]]", "kind" : "def"}, {"label" : "apply", "tail" : "(initial: kernel.Resource[F, R])(arg0: kernel.Concurrent[F]): kernel.Resource[F, (Hotswap[F, R], R)]", "member" : "cats.effect.std.Hotswap.apply", "link" : "cats\/effect\/std\/Hotswap$.html#apply[F[_],R](initial:cats.effect.kernel.Resource[F,R])(implicitevidence$1:cats.effect.kernel.Concurrent[F]):cats.effect.kernel.Resource[F,(cats.effect.std.Hotswap[F,R],R)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Hotswap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Hotswap$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Hotswap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Hotswap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Hotswap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Hotswap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Hotswap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Hotswap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Hotswap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Hotswap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Hotswap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Hotswap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Hotswap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Hotswap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Hotswap$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Hotswap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Hotswap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Hotswap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Hotswap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/Hotswap.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Hotswap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Hotswap.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Hotswap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Hotswap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Hotswap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Hotswap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Hotswap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Hotswap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Hotswap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Hotswap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Hotswap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Hotswap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Hotswap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Hotswap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Hotswap.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Hotswap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Hotswap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Hotswap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Hotswap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "clear", "tail" : "(): F[Unit]", "member" : "cats.effect.std.Hotswap.clear", "link" : "cats\/effect\/std\/Hotswap.html#clear:F[Unit]", "kind" : "abstract def"}, {"label" : "swap", "tail" : "(next: kernel.Resource[F, R]): F[R]", "member" : "cats.effect.std.Hotswap.swap", "link" : "cats\/effect\/std\/Hotswap.html#swap(next:cats.effect.kernel.Resource[F,R]):F[R]", "kind" : "abstract def"}], "shortDescription" : "A concurrent data structure that exposes a linear sequence of R resourcesas a single cats.effect.kernel.Resource in F without accumulation."}, {"name" : "cats.effect.std.PQueue", "shortDescription" : "A purely functional Priority Queue implementation basedon a binomial heap (Okasaki)", "object" : "cats\/effect\/std\/PQueue$.html", "members_class" : [{"label" : "mapK", "tail" : "(f: ~>[F, G]): PQueue[G, A]", "member" : "cats.effect.std.PQueue.mapK", "link" : "cats\/effect\/std\/PQueue.html#mapK[G[_]](f:F~>G):cats.effect.std.PQueue[G,A]", "kind" : "def"}, {"member" : "cats.effect.std.PQueue#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/PQueue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/PQueue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/PQueue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/PQueue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/PQueue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/PQueue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/PQueue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/PQueue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/PQueue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/PQueue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/PQueue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/PQueue.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/PQueue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/PQueue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/PQueue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/PQueue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryOffer", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.std.PQueueSink.tryOffer", "link" : "cats\/effect\/std\/PQueue.html#tryOffer(a:A):F[Boolean]", "kind" : "abstract def"}, {"label" : "offer", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.std.PQueueSink.offer", "link" : "cats\/effect\/std\/PQueue.html#offer(a:A):F[Unit]", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): F[Int]", "member" : "cats.effect.std.PQueueSource.size", "link" : "cats\/effect\/std\/PQueue.html#size:F[Int]", "kind" : "abstract def"}, {"label" : "tryTake", "tail" : "(): F[Option[A]]", "member" : "cats.effect.std.PQueueSource.tryTake", "link" : "cats\/effect\/std\/PQueue.html#tryTake:F[Option[A]]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(): F[A]", "member" : "cats.effect.std.PQueueSource.take", "link" : "cats\/effect\/std\/PQueue.html#take:F[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "catsInvariantForPQueue", "tail" : "(arg0: Functor[F]): Invariant[[β$0$]PQueue[F, β$0$]]", "member" : "cats.effect.std.PQueue.catsInvariantForPQueue", "link" : "cats\/effect\/std\/PQueue$.html#catsInvariantForPQueue[F[_]](implicitevidence$2:cats.Functor[F]):cats.Invariant[[β$0$]cats.effect.std.PQueue[F,β$0$]]", "kind" : "implicit def"}, {"label" : "unbounded", "tail" : "(F: kernel.Concurrent[F], O: Order[A]): F[PQueue[F, A]]", "member" : "cats.effect.std.PQueue.unbounded", "link" : "cats\/effect\/std\/PQueue$.html#unbounded[F[_],A](implicitF:cats.effect.kernel.Concurrent[F],implicitO:cats.Order[A]):F[cats.effect.std.PQueue[F,A]]", "kind" : "def"}, {"label" : "bounded", "tail" : "(capacity: Int)(F: kernel.Concurrent[F], O: Order[A]): F[PQueue[F, A]]", "member" : "cats.effect.std.PQueue.bounded", "link" : "cats\/effect\/std\/PQueue$.html#bounded[F[_],A](capacity:Int)(implicitF:cats.effect.kernel.Concurrent[F],implicitO:cats.Order[A]):F[cats.effect.std.PQueue[F,A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/PQueue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/PQueue$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/PQueue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/PQueue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/PQueue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/PQueue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/PQueue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/PQueue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/PQueue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/PQueue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/PQueue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/PQueue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/PQueue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/PQueue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/PQueue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/PQueue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/std\/PQueue.html", "kind" : "class"}, {"name" : "cats.effect.std.PQueueSink", "object" : "cats\/effect\/std\/PQueueSink$.html", "members_object" : [{"label" : "catsContravariantForPQueueSink", "tail" : "(): Contravariant[[β$4$]PQueueSink[F, β$4$]]", "member" : "cats.effect.std.PQueueSink.catsContravariantForPQueueSink", "link" : "cats\/effect\/std\/PQueueSink$.html#catsContravariantForPQueueSink[F[_]]:cats.Contravariant[[β$4$]cats.effect.std.PQueueSink[F,β$4$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/PQueueSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/PQueueSink$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/PQueueSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/PQueueSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/PQueueSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/PQueueSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/PQueueSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/PQueueSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/PQueueSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/PQueueSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/PQueueSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/PQueueSink$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/PQueueSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/PQueueSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/PQueueSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/PQueueSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/PQueueSink.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/PQueueSink.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/PQueueSink.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/PQueueSink.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/PQueueSink.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/PQueueSink.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/PQueueSink.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/PQueueSink.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSink.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSink.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSink.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/PQueueSink.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/PQueueSink.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/PQueueSink.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/PQueueSink.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/PQueueSink.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/PQueueSink.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/PQueueSink.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/PQueueSink.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/PQueueSink.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryOffer", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.std.PQueueSink.tryOffer", "link" : "cats\/effect\/std\/PQueueSink.html#tryOffer(a:A):F[Boolean]", "kind" : "abstract def"}, {"label" : "offer", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.std.PQueueSink.offer", "link" : "cats\/effect\/std\/PQueueSink.html#offer(a:A):F[Unit]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.std.PQueueSource", "object" : "cats\/effect\/std\/PQueueSource$.html", "members_object" : [{"label" : "catsFunctorForPQueueSource", "tail" : "(arg0: Functor[F]): Functor[[β$2$]PQueueSource[F, β$2$]]", "member" : "cats.effect.std.PQueueSource.catsFunctorForPQueueSource", "link" : "cats\/effect\/std\/PQueueSource$.html#catsFunctorForPQueueSource[F[_]](implicitevidence$3:cats.Functor[F]):cats.Functor[[β$2$]cats.effect.std.PQueueSource[F,β$2$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/PQueueSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/PQueueSource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/PQueueSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/PQueueSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/PQueueSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/PQueueSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/PQueueSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/PQueueSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/PQueueSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/PQueueSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/PQueueSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/PQueueSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/PQueueSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/PQueueSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/PQueueSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/PQueueSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/PQueueSource.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/PQueueSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/PQueueSource.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/PQueueSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/PQueueSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/PQueueSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/PQueueSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/PQueueSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/PQueueSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/PQueueSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/PQueueSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/PQueueSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/PQueueSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/PQueueSource.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/PQueueSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/PQueueSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/PQueueSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/PQueueSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "size", "tail" : "(): F[Int]", "member" : "cats.effect.std.PQueueSource.size", "link" : "cats\/effect\/std\/PQueueSource.html#size:F[Int]", "kind" : "abstract def"}, {"label" : "tryTake", "tail" : "(): F[Option[A]]", "member" : "cats.effect.std.PQueueSource.tryTake", "link" : "cats\/effect\/std\/PQueueSource.html#tryTake:F[Option[A]]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(): F[A]", "member" : "cats.effect.std.PQueueSource.take", "link" : "cats\/effect\/std\/PQueueSource.html#take:F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.std.Queue", "shortDescription" : "A purely functional, concurrent data structure which allows insertion andretrieval of elements of type A in a first-in-first-out (FIFO) manner.", "object" : "cats\/effect\/std\/Queue$.html", "members_class" : [{"label" : "mapK", "tail" : "(f: ~>[F, G]): Queue[G, A]", "member" : "cats.effect.std.Queue.mapK", "link" : "cats\/effect\/std\/Queue.html#mapK[G[_]](f:F~>G):cats.effect.std.Queue[G,A]", "kind" : "def"}, {"member" : "cats.effect.std.Queue#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Queue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Queue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Queue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Queue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Queue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Queue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Queue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Queue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Queue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Queue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Queue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Queue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Queue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Queue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Queue.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Queue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Queue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Queue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Queue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryOffer", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.std.QueueSink.tryOffer", "link" : "cats\/effect\/std\/Queue.html#tryOffer(a:A):F[Boolean]", "kind" : "abstract def"}, {"label" : "offer", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.std.QueueSink.offer", "link" : "cats\/effect\/std\/Queue.html#offer(a:A):F[Unit]", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): F[Int]", "member" : "cats.effect.std.QueueSource.size", "link" : "cats\/effect\/std\/Queue.html#size:F[Int]", "kind" : "abstract def"}, {"label" : "tryTake", "tail" : "(): F[Option[A]]", "member" : "cats.effect.std.QueueSource.tryTake", "link" : "cats\/effect\/std\/Queue.html#tryTake:F[Option[A]]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(): F[A]", "member" : "cats.effect.std.QueueSource.take", "link" : "cats\/effect\/std\/Queue.html#take:F[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "catsInvariantForQueue", "tail" : "(arg0: Functor[F]): Invariant[[β$0$]Queue[F, β$0$]]", "member" : "cats.effect.std.Queue.catsInvariantForQueue", "link" : "cats\/effect\/std\/Queue$.html#catsInvariantForQueue[F[_]](implicitevidence$1:cats.Functor[F]):cats.Invariant[[β$0$]cats.effect.std.Queue[F,β$0$]]", "kind" : "implicit def"}, {"label" : "circularBuffer", "tail" : "(capacity: Int)(F: kernel.GenConcurrent[F, _]): F[Queue[F, A]]", "member" : "cats.effect.std.Queue.circularBuffer", "link" : "cats\/effect\/std\/Queue$.html#circularBuffer[F[_],A](capacity:Int)(implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[cats.effect.std.Queue[F,A]]", "kind" : "def"}, {"label" : "dropping", "tail" : "(capacity: Int)(F: kernel.GenConcurrent[F, _]): F[Queue[F, A]]", "member" : "cats.effect.std.Queue.dropping", "link" : "cats\/effect\/std\/Queue$.html#dropping[F[_],A](capacity:Int)(implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[cats.effect.std.Queue[F,A]]", "kind" : "def"}, {"label" : "unbounded", "tail" : "(F: kernel.GenConcurrent[F, _]): F[Queue[F, A]]", "member" : "cats.effect.std.Queue.unbounded", "link" : "cats\/effect\/std\/Queue$.html#unbounded[F[_],A](implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[cats.effect.std.Queue[F,A]]", "kind" : "def"}, {"label" : "synchronous", "tail" : "(F: kernel.GenConcurrent[F, _]): F[Queue[F, A]]", "member" : "cats.effect.std.Queue.synchronous", "link" : "cats\/effect\/std\/Queue$.html#synchronous[F[_],A](implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[cats.effect.std.Queue[F,A]]", "kind" : "def"}, {"label" : "bounded", "tail" : "(capacity: Int)(F: kernel.GenConcurrent[F, _]): F[Queue[F, A]]", "member" : "cats.effect.std.Queue.bounded", "link" : "cats\/effect\/std\/Queue$.html#bounded[F[_],A](capacity:Int)(implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[cats.effect.std.Queue[F,A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Queue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Queue$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Queue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Queue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Queue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Queue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Queue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Queue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Queue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Queue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Queue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Queue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Queue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Queue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Queue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Queue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Queue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Queue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Queue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/std\/Queue.html", "kind" : "class"}, {"name" : "cats.effect.std.QueueSink", "object" : "cats\/effect\/std\/QueueSink$.html", "members_object" : [{"label" : "catsContravariantForQueueSink", "tail" : "(): Contravariant[[β$4$]QueueSink[F, β$4$]]", "member" : "cats.effect.std.QueueSink.catsContravariantForQueueSink", "link" : "cats\/effect\/std\/QueueSink$.html#catsContravariantForQueueSink[F[_]]:cats.Contravariant[[β$4$]cats.effect.std.QueueSink[F,β$4$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/QueueSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/QueueSink$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/QueueSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/QueueSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/QueueSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/QueueSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/QueueSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/QueueSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/QueueSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/QueueSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/QueueSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/QueueSink$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/QueueSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/QueueSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/QueueSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/QueueSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/QueueSink.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/QueueSink.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/QueueSink.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/QueueSink.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/QueueSink.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/QueueSink.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/QueueSink.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/QueueSink.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSink.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSink.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSink.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/QueueSink.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/QueueSink.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/QueueSink.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/QueueSink.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/QueueSink.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/QueueSink.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/QueueSink.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/QueueSink.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/QueueSink.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tryOffer", "tail" : "(a: A): F[Boolean]", "member" : "cats.effect.std.QueueSink.tryOffer", "link" : "cats\/effect\/std\/QueueSink.html#tryOffer(a:A):F[Boolean]", "kind" : "abstract def"}, {"label" : "offer", "tail" : "(a: A): F[Unit]", "member" : "cats.effect.std.QueueSink.offer", "link" : "cats\/effect\/std\/QueueSink.html#offer(a:A):F[Unit]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.std.QueueSource", "object" : "cats\/effect\/std\/QueueSource$.html", "members_object" : [{"label" : "catsFunctorForQueueSource", "tail" : "(arg0: Functor[F]): Functor[[β$2$]QueueSource[F, β$2$]]", "member" : "cats.effect.std.QueueSource.catsFunctorForQueueSource", "link" : "cats\/effect\/std\/QueueSource$.html#catsFunctorForQueueSource[F[_]](implicitevidence$2:cats.Functor[F]):cats.Functor[[β$2$]cats.effect.std.QueueSource[F,β$2$]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/QueueSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/QueueSource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/QueueSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/QueueSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/QueueSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/QueueSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/QueueSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/QueueSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/QueueSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/QueueSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/QueueSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/QueueSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/QueueSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/QueueSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/QueueSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/QueueSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/QueueSource.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/QueueSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/QueueSource.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/QueueSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/QueueSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/QueueSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/QueueSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/QueueSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/QueueSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/QueueSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/QueueSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/QueueSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/QueueSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/QueueSource.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/QueueSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/QueueSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/QueueSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/QueueSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "size", "tail" : "(): F[Int]", "member" : "cats.effect.std.QueueSource.size", "link" : "cats\/effect\/std\/QueueSource.html#size:F[Int]", "kind" : "abstract def"}, {"label" : "tryTake", "tail" : "(): F[Option[A]]", "member" : "cats.effect.std.QueueSource.tryTake", "link" : "cats\/effect\/std\/QueueSource.html#tryTake:F[Option[A]]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(): F[A]", "member" : "cats.effect.std.QueueSource.take", "link" : "cats\/effect\/std\/QueueSource.html#take:F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cats.effect.std.Random", "object" : "cats\/effect\/std\/Random$.html", "members_object" : [{"label" : "javaSecuritySecureRandom", "tail" : "(arg0: kernel.Sync[F]): F[Random[F]]", "member" : "cats.effect.std.Random.javaSecuritySecureRandom", "link" : "cats\/effect\/std\/Random$.html#javaSecuritySecureRandom[F[_]](implicitevidence$23:cats.effect.kernel.Sync[F]):F[cats.effect.std.Random[F]]", "kind" : "def"}, {"label" : "javaSecuritySecureRandom", "tail" : "(n: Int)(arg0: kernel.Sync[F]): F[Random[F]]", "member" : "cats.effect.std.Random.javaSecuritySecureRandom", "link" : "cats\/effect\/std\/Random$.html#javaSecuritySecureRandom[F[_]](n:Int)(implicitevidence$22:cats.effect.kernel.Sync[F]):F[cats.effect.std.Random[F]]", "kind" : "def"}, {"label" : "javaUtilConcurrentThreadLocalRandom", "tail" : "(arg0: kernel.Sync[F]): Random[F]", "member" : "cats.effect.std.Random.javaUtilConcurrentThreadLocalRandom", "link" : "cats\/effect\/std\/Random$.html#javaUtilConcurrentThreadLocalRandom[F[_]](implicitevidence$21:cats.effect.kernel.Sync[F]):cats.effect.std.Random[F]", "kind" : "def"}, {"label" : "javaUtilRandom", "tail" : "(random: java.util.Random)(arg0: kernel.Sync[F]): F[Random[F]]", "member" : "cats.effect.std.Random.javaUtilRandom", "link" : "cats\/effect\/std\/Random$.html#javaUtilRandom[F[_]](random:java.util.Random)(implicitevidence$20:cats.effect.kernel.Sync[F]):F[cats.effect.std.Random[F]]", "kind" : "def"}, {"label" : "scalaUtilRandomSeedLong", "tail" : "(seed: Long)(arg0: kernel.Sync[F]): F[Random[F]]", "member" : "cats.effect.std.Random.scalaUtilRandomSeedLong", "link" : "cats\/effect\/std\/Random$.html#scalaUtilRandomSeedLong[F[_]](seed:Long)(implicitevidence$19:cats.effect.kernel.Sync[F]):F[cats.effect.std.Random[F]]", "kind" : "def"}, {"label" : "scalaUtilRandomSeedInt", "tail" : "(seed: Int)(arg0: kernel.Sync[F]): F[Random[F]]", "member" : "cats.effect.std.Random.scalaUtilRandomSeedInt", "link" : "cats\/effect\/std\/Random$.html#scalaUtilRandomSeedInt[F[_]](seed:Int)(implicitevidence$18:cats.effect.kernel.Sync[F]):F[cats.effect.std.Random[F]]", "kind" : "def"}, {"label" : "scalaUtilRandomN", "tail" : "(n: Int)(arg0: kernel.Sync[F]): F[Random[F]]", "member" : "cats.effect.std.Random.scalaUtilRandomN", "link" : "cats\/effect\/std\/Random$.html#scalaUtilRandomN[F[_]](n:Int)(implicitevidence$17:cats.effect.kernel.Sync[F]):F[cats.effect.std.Random[F]]", "kind" : "def"}, {"label" : "catsIndexedReaderWriterStateTRandom", "tail" : "(arg0: Random[F], arg1: Applicative[F], arg2: Monoid[L]): Random[[ζ$6$]IndexedReaderWriterStateT[F, E, L, S, S, ζ$6$]]", "member" : "cats.effect.std.Random.catsIndexedReaderWriterStateTRandom", "link" : "cats\/effect\/std\/Random$.html#catsIndexedReaderWriterStateTRandom[F[_],E,L,S](implicitevidence$14:cats.effect.std.Random[F],implicitevidence$15:cats.Applicative[F],implicitevidence$16:cats.Monoid[L]):cats.effect.std.Random[[ζ$6$]cats.data.IndexedReaderWriterStateT[F,E,L,S,S,ζ$6$]]", "kind" : "implicit def"}, {"label" : "catsIorTRandom", "tail" : "(arg0: Random[F], arg1: Functor[F]): Random[[γ$5$]IorT[F, L, γ$5$]]", "member" : "cats.effect.std.Random.catsIorTRandom", "link" : "cats\/effect\/std\/Random$.html#catsIorTRandom[F[_],L](implicitevidence$12:cats.effect.std.Random[F],implicitevidence$13:cats.Functor[F]):cats.effect.std.Random[[γ$5$]cats.data.IorT[F,L,γ$5$]]", "kind" : "implicit def"}, {"label" : "catsWriterTRandom", "tail" : "(arg0: Random[F], arg1: Applicative[F], arg2: Monoid[L]): Random[[γ$4$]WriterT[F, L, γ$4$]]", "member" : "cats.effect.std.Random.catsWriterTRandom", "link" : "cats\/effect\/std\/Random$.html#catsWriterTRandom[F[_],L](implicitevidence$9:cats.effect.std.Random[F],implicitevidence$10:cats.Applicative[F],implicitevidence$11:cats.Monoid[L]):cats.effect.std.Random[[γ$4$]cats.data.WriterT[F,L,γ$4$]]", "kind" : "implicit def"}, {"label" : "catsIndexedStateTRandom", "tail" : "(arg0: Random[F], arg1: Applicative[F]): Random[[δ$3$]IndexedStateT[F, S, S, δ$3$]]", "member" : "cats.effect.std.Random.catsIndexedStateTRandom", "link" : "cats\/effect\/std\/Random$.html#catsIndexedStateTRandom[F[_],S](implicitevidence$7:cats.effect.std.Random[F],implicitevidence$8:cats.Applicative[F]):cats.effect.std.Random[[δ$3$]cats.data.IndexedStateT[F,S,S,δ$3$]]", "kind" : "implicit def"}, {"label" : "catsOptionTRandom", "tail" : "(arg0: Random[F], arg1: Functor[F]): Random[[β$2$]OptionT[F, β$2$]]", "member" : "cats.effect.std.Random.catsOptionTRandom", "link" : "cats\/effect\/std\/Random$.html#catsOptionTRandom[F[_]](implicitevidence$5:cats.effect.std.Random[F],implicitevidence$6:cats.Functor[F]):cats.effect.std.Random[[β$2$]cats.data.OptionT[F,β$2$]]", "kind" : "implicit def"}, {"label" : "catsKleisliRandom", "tail" : "(arg0: Random[F]): Random[[γ$1$]Kleisli[F, R, γ$1$]]", "member" : "cats.effect.std.Random.catsKleisliRandom", "link" : "cats\/effect\/std\/Random$.html#catsKleisliRandom[F[_],R](implicitevidence$4:cats.effect.std.Random[F]):cats.effect.std.Random[[γ$1$]cats.data.Kleisli[F,R,γ$1$]]", "kind" : "implicit def"}, {"label" : "catsEitherTRandom", "tail" : "(arg0: Random[F], arg1: Functor[F]): Random[[γ$0$]EitherT[F, L, γ$0$]]", "member" : "cats.effect.std.Random.catsEitherTRandom", "link" : "cats\/effect\/std\/Random$.html#catsEitherTRandom[F[_],L](implicitevidence$2:cats.effect.std.Random[F],implicitevidence$3:cats.Functor[F]):cats.effect.std.Random[[γ$0$]cats.data.EitherT[F,L,γ$0$]]", "kind" : "implicit def"}, {"label" : "scalaUtilRandom", "tail" : "(arg0: kernel.Sync[F]): F[Random[F]]", "member" : "cats.effect.std.Random.scalaUtilRandom", "link" : "cats\/effect\/std\/Random$.html#scalaUtilRandom[F[_]](implicitevidence$1:cats.effect.kernel.Sync[F]):F[cats.effect.std.Random[F]]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Random[F]): Random[F]", "member" : "cats.effect.std.Random.apply", "link" : "cats\/effect\/std\/Random$.html#apply[F[_]](implicitev:cats.effect.std.Random[F]):cats.effect.std.Random[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Random$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Random$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Random$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Random$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Random$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Random$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Random$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Random$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Random$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Random$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Random$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Random$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Random$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Random$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Random$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Random$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Random$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Random$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Random$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/Random.html", "kind" : "trait", "members_trait" : [{"label" : "mapK", "tail" : "(f: ~>[F, G]): Random[G]", "member" : "cats.effect.std.Random.mapK", "link" : "cats\/effect\/std\/Random.html#mapK[G[_]](f:F~>G):cats.effect.std.Random[G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Random.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Random.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Random.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Random.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Random.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Random.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Random.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Random.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Random.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Random.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Random.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Random.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Random.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Random.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Random.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Random.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Random.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Random.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Random.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "shuffleVector", "tail" : "(v: Vector[A]): F[Vector[A]]", "member" : "cats.effect.std.Random.shuffleVector", "link" : "cats\/effect\/std\/Random.html#shuffleVector[A](v:Vector[A]):F[Vector[A]]", "kind" : "abstract def"}, {"label" : "shuffleList", "tail" : "(l: List[A]): F[List[A]]", "member" : "cats.effect.std.Random.shuffleList", "link" : "cats\/effect\/std\/Random.html#shuffleList[A](l:List[A]):F[List[A]]", "kind" : "abstract def"}, {"label" : "nextString", "tail" : "(length: Int): F[String]", "member" : "cats.effect.std.Random.nextString", "link" : "cats\/effect\/std\/Random.html#nextString(length:Int):F[String]", "kind" : "abstract def"}, {"label" : "nextPrintableChar", "tail" : "(): F[Char]", "member" : "cats.effect.std.Random.nextPrintableChar", "link" : "cats\/effect\/std\/Random.html#nextPrintableChar:F[Char]", "kind" : "abstract def"}, {"label" : "nextLongBounded", "tail" : "(n: Long): F[Long]", "member" : "cats.effect.std.Random.nextLongBounded", "link" : "cats\/effect\/std\/Random.html#nextLongBounded(n:Long):F[Long]", "kind" : "abstract def"}, {"label" : "nextLong", "tail" : "(): F[Long]", "member" : "cats.effect.std.Random.nextLong", "link" : "cats\/effect\/std\/Random.html#nextLong:F[Long]", "kind" : "abstract def"}, {"label" : "nextIntBounded", "tail" : "(n: Int): F[Int]", "member" : "cats.effect.std.Random.nextIntBounded", "link" : "cats\/effect\/std\/Random.html#nextIntBounded(n:Int):F[Int]", "kind" : "abstract def"}, {"label" : "nextInt", "tail" : "(): F[Int]", "member" : "cats.effect.std.Random.nextInt", "link" : "cats\/effect\/std\/Random.html#nextInt:F[Int]", "kind" : "abstract def"}, {"label" : "nextGaussian", "tail" : "(): F[Double]", "member" : "cats.effect.std.Random.nextGaussian", "link" : "cats\/effect\/std\/Random.html#nextGaussian:F[Double]", "kind" : "abstract def"}, {"label" : "nextFloat", "tail" : "(): F[Float]", "member" : "cats.effect.std.Random.nextFloat", "link" : "cats\/effect\/std\/Random.html#nextFloat:F[Float]", "kind" : "abstract def"}, {"label" : "nextDouble", "tail" : "(): F[Double]", "member" : "cats.effect.std.Random.nextDouble", "link" : "cats\/effect\/std\/Random.html#nextDouble:F[Double]", "kind" : "abstract def"}, {"label" : "nextBytes", "tail" : "(n: Int): F[Array[Byte]]", "member" : "cats.effect.std.Random.nextBytes", "link" : "cats\/effect\/std\/Random.html#nextBytes(n:Int):F[Array[Byte]]", "kind" : "abstract def"}, {"label" : "nextBoolean", "tail" : "(): F[Boolean]", "member" : "cats.effect.std.Random.nextBoolean", "link" : "cats\/effect\/std\/Random.html#nextBoolean:F[Boolean]", "kind" : "abstract def"}, {"label" : "nextAlphaNumeric", "tail" : "(): F[Char]", "member" : "cats.effect.std.Random.nextAlphaNumeric", "link" : "cats\/effect\/std\/Random.html#nextAlphaNumeric:F[Char]", "kind" : "abstract def"}, {"label" : "betweenLong", "tail" : "(minInclusive: Long, maxExclusive: Long): F[Long]", "member" : "cats.effect.std.Random.betweenLong", "link" : "cats\/effect\/std\/Random.html#betweenLong(minInclusive:Long,maxExclusive:Long):F[Long]", "kind" : "abstract def"}, {"label" : "betweenInt", "tail" : "(minInclusive: Int, maxExclusive: Int): F[Int]", "member" : "cats.effect.std.Random.betweenInt", "link" : "cats\/effect\/std\/Random.html#betweenInt(minInclusive:Int,maxExclusive:Int):F[Int]", "kind" : "abstract def"}, {"label" : "betweenFloat", "tail" : "(minInclusive: Float, maxExclusive: Float): F[Float]", "member" : "cats.effect.std.Random.betweenFloat", "link" : "cats\/effect\/std\/Random.html#betweenFloat(minInclusive:Float,maxExclusive:Float):F[Float]", "kind" : "abstract def"}, {"label" : "betweenDouble", "tail" : "(minInclusive: Double, maxExclusive: Double): F[Double]", "member" : "cats.effect.std.Random.betweenDouble", "link" : "cats\/effect\/std\/Random.html#betweenDouble(minInclusive:Double,maxExclusive:Double):F[Double]", "kind" : "abstract def"}], "shortDescription" : "Random is the ability to get random information, each time gettinga different result."}, {"name" : "cats.effect.std.Semaphore", "shortDescription" : "A purely functional semaphore.", "object" : "cats\/effect\/std\/Semaphore$.html", "members_class" : [{"label" : "release", "tail" : "(): F[Unit]", "member" : "cats.effect.std.Semaphore.release", "link" : "cats\/effect\/std\/Semaphore.html#release:F[Unit]", "kind" : "def"}, {"label" : "tryAcquire", "tail" : "(): F[Boolean]", "member" : "cats.effect.std.Semaphore.tryAcquire", "link" : "cats\/effect\/std\/Semaphore.html#tryAcquire:F[Boolean]", "kind" : "def"}, {"label" : "acquire", "tail" : "(): F[Unit]", "member" : "cats.effect.std.Semaphore.acquire", "link" : "cats\/effect\/std\/Semaphore.html#acquire:F[Unit]", "kind" : "def"}, {"member" : "cats.effect.std.Semaphore#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Semaphore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Semaphore.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Semaphore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Semaphore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Semaphore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Semaphore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Semaphore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Semaphore.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Semaphore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Semaphore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Semaphore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Semaphore.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Semaphore.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Semaphore.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Semaphore.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Semaphore.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Semaphore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Semaphore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Semaphore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapK", "tail" : "(f: ~>[F, G])(G: kernel.MonadCancel[G, _]): Semaphore[G]", "member" : "cats.effect.std.Semaphore.mapK", "link" : "cats\/effect\/std\/Semaphore.html#mapK[G[_]](f:F~>G)(implicitG:cats.effect.kernel.MonadCancel[G,_]):cats.effect.std.Semaphore[G]", "kind" : "abstract def"}, {"label" : "permit", "tail" : "(): kernel.Resource[F, Unit]", "member" : "cats.effect.std.Semaphore.permit", "link" : "cats\/effect\/std\/Semaphore.html#permit:cats.effect.kernel.Resource[F,Unit]", "kind" : "abstract def"}, {"label" : "releaseN", "tail" : "(n: Long): F[Unit]", "member" : "cats.effect.std.Semaphore.releaseN", "link" : "cats\/effect\/std\/Semaphore.html#releaseN(n:Long):F[Unit]", "kind" : "abstract def"}, {"label" : "tryAcquireN", "tail" : "(n: Long): F[Boolean]", "member" : "cats.effect.std.Semaphore.tryAcquireN", "link" : "cats\/effect\/std\/Semaphore.html#tryAcquireN(n:Long):F[Boolean]", "kind" : "abstract def"}, {"label" : "acquireN", "tail" : "(n: Long): F[Unit]", "member" : "cats.effect.std.Semaphore.acquireN", "link" : "cats\/effect\/std\/Semaphore.html#acquireN(n:Long):F[Unit]", "kind" : "abstract def"}, {"label" : "count", "tail" : "(): F[Long]", "member" : "cats.effect.std.Semaphore.count", "link" : "cats\/effect\/std\/Semaphore.html#count:F[Long]", "kind" : "abstract def"}, {"label" : "available", "tail" : "(): F[Long]", "member" : "cats.effect.std.Semaphore.available", "link" : "cats\/effect\/std\/Semaphore.html#available:F[Long]", "kind" : "abstract def"}], "members_object" : [{"label" : "in", "tail" : "(n: Long)(F: kernel.Sync[F], G: kernel.Async[G]): F[Semaphore[G]]", "member" : "cats.effect.std.Semaphore.in", "link" : "cats\/effect\/std\/Semaphore$.html#in[F[_],G[_]](n:Long)(implicitF:cats.effect.kernel.Sync[F],implicitG:cats.effect.kernel.Async[G]):F[cats.effect.std.Semaphore[G]]", "kind" : "def"}, {"label" : "apply", "tail" : "(n: Long)(F: kernel.GenConcurrent[F, _]): F[Semaphore[F]]", "member" : "cats.effect.std.Semaphore.apply", "link" : "cats\/effect\/std\/Semaphore$.html#apply[F[_]](n:Long)(implicitF:cats.effect.kernel.GenConcurrent[F,_]):F[cats.effect.std.Semaphore[F]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Semaphore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Semaphore$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Semaphore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Semaphore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Semaphore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Semaphore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Semaphore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Semaphore$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Semaphore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Semaphore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Semaphore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Semaphore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Semaphore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Semaphore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Semaphore$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Semaphore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Semaphore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Semaphore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Semaphore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cats\/effect\/std\/Semaphore.html", "kind" : "class"}, {"name" : "cats.effect.std.Supervisor", "object" : "cats\/effect\/std\/Supervisor$.html", "members_object" : [{"label" : "apply", "tail" : "(F: kernel.Concurrent[F]): kernel.Resource[F, Supervisor[F]]", "member" : "cats.effect.std.Supervisor.apply", "link" : "cats\/effect\/std\/Supervisor$.html#apply[F[_]](implicitF:cats.effect.kernel.Concurrent[F]):cats.effect.kernel.Resource[F,cats.effect.std.Supervisor[F]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Supervisor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Supervisor$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Supervisor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Supervisor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Supervisor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Supervisor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Supervisor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Supervisor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Supervisor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Supervisor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Supervisor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Supervisor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Supervisor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Supervisor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Supervisor$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Supervisor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Supervisor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Supervisor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Supervisor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cats\/effect\/std\/Supervisor.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cats\/effect\/std\/Supervisor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cats\/effect\/std\/Supervisor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cats\/effect\/std\/Supervisor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cats\/effect\/std\/Supervisor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cats\/effect\/std\/Supervisor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cats\/effect\/std\/Supervisor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cats\/effect\/std\/Supervisor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Supervisor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Supervisor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cats\/effect\/std\/Supervisor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cats\/effect\/std\/Supervisor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cats\/effect\/std\/Supervisor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cats\/effect\/std\/Supervisor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cats\/effect\/std\/Supervisor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cats\/effect\/std\/Supervisor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cats\/effect\/std\/Supervisor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cats\/effect\/std\/Supervisor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cats\/effect\/std\/Supervisor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cats\/effect\/std\/Supervisor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "supervise", "tail" : "(fa: F[A]): F[kernel.Fiber[F, Throwable, A]]", "member" : "cats.effect.std.Supervisor.supervise", "link" : "cats\/effect\/std\/Supervisor.html#supervise[A](fa:F[A]):F[cats.effect.kernel.Fiber[F,Throwable,A]]", "kind" : "abstract def"}], "shortDescription" : "A fiber-based supervisor that monitors the lifecycle of all fibersthat are started via its interface."}]};